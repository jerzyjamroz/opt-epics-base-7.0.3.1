##############################################################################
####                         AUTOSAVE iocsh                                ###
##############################################################################
#-IOCNAME        - AUTOSAVE IOCNAME (IOCNAME should not have :)
#-AS_TOP         - Autosave TOP path
#-#############################################################################
#-
#- INCOMPLETE      - Optional: Ok to save/restore save sets with missing values?
#-                   Default: 1
#- CA_RECONNECT    - Optional: Retry connecting to PVs whose initial connection
#-                             attempt failed?,  Default: 1
#- DATED_BACKUP    - Optional: Save dated backup files?
#-                   Default: 1
#- CA_RECONNECT    - Optional: Retry connecting to PVs whose initial connection
#-                             attempt failed?, Default: 1
#- NUM_SEQ         - Optional: Number of sequenced backup files to write
#-                   Default: 3
#- SEQ_PERIOD      - Optional: Time interval in seconds between sequenced backups
#-                 - Default: 300
#- VALUES_FILES_PASS0    - Optional: Filename, Default: values_pass0
#- VALUES_FILES_PASS1    - Optional: Filename, Default: values_pass1
#- SETTINGS_FILES  - Optional: Filename, Default : settings
#- WAVEFORM_FILES  - Optional: Filename, Default : waveform
#- VALUES_PERIOD_PASS0   - Optional, Default 5
#- VALUES_PERIOD_PASS1   - Optional, Default 10
#- SETTINGS_PERIOD  - Optional, Default 5
#- WAVEFORM_PERIOD - Optional, Default 30
#-
set_savefile_path    ("$(AS_TOP)/$(IOCNAME)", "/save")
set_requestfile_path ("$(AS_TOP)/$(IOCNAME)", "/req")
#
#- If there is no path, create it
system("install -d $(AS_TOP)/$(IOCNAME)/save")
system("install -d $(AS_TOP)/$(IOCNAME)/req")
#-
#- iocBoot/iocas/save_restore.cmd
#-
save_restoreSet_status_prefix("$(IOCNAME)-as:")
#-
#- Debug-output level
save_restoreSet_Debug(0)
#-
#- Ok to save/restore save sets with missing values (no CA connection to PV)?
save_restoreSet_IncompleteSetsOk($(INCOMPLETE=1))
#-
#- Tell save_restore to writed dated backup files. 
save_restoreSet_DatedBackupFiles($(DATED_BACKUP=1))
#-
#- Tell save_restore to save sequence files.
#- save_restore to to maintain three copies of each *.sav file
save_restoreSet_NumSeqFiles($(NUM_SEQ=3))
#-
#- at 5 minute intervals
save_restoreSet_SeqPeriodInSeconds($(SEQ_PERIOD=300))
#-
#- should periodically retry connecting to PVs whose initial connection attempt failed
#-
save_restoreSet_CAReconnect($(CA_RECONNECT=1))

#-
#- Time interval in seconds between forced save-file writes.  (-1 means forever).
#- This is intended to get save files written even if the normal trigger mechanism is broken.
save_restoreSet_CallbackTimeout(-1)
#- 
#- pass0 : save files are to be restored before record initialization
set_pass0_restoreFile("$(SETTINGS_FILES=settings).sav")
set_pass0_restoreFile("$(VALUES_FILES_PASS0=values_pass0).sav")
#- pass1 : save files are to be restored after record initialization
set_pass1_restoreFile("$(SETTINGS_FILES=settings).sav")
set_pass1_restoreFile("$(VALUES_FILES_PASS1=values_pass1).sav")
#-
#-
dbLoadRecords("save_restoreStatus.db", "P=$(IOCNAME)-as:, DEAD_SECONDS=5")

#- Note afterInit supplied by require
afterInit("makeAutosaveFileFromDbInfo('$(AS_TOP)/$(IOCNAME)/req/$(SETTINGS_FILES=settings).req','autosaveFields')")
afterInit("makeAutosaveFileFromDbInfo('$(AS_TOP)/$(IOCNAME)/req/$(VALUES_FILES_PASS0=values_pass0).req','autosaveFields_pass0')")
afterInit("makeAutosaveFileFromDbInfo('$(AS_TOP)/$(IOCNAME)/req/$(VALUES_FILES_PASS1=values_pass1).req','autosaveFields_pass1')")
#-
#- Note afterInit supplied by require
#- We don't need PREFIX, because generated req files has the hard-code PV names from DBInfo : info tag
afterInit("create_monitor_set('$(SETTINGS_FILES=settings).req','$(SETTINGS_PERIOD=5)')")
afterInit("create_monitor_set('$(VALUES_FILES_PASS0=values_pass0).req','$(VALUES_PASS0_PERIOD=5)')")
afterInit("create_monitor_set('$(VALUES_FILES_PASS1=values_pass1).req','$(VALUES_PASS1_PERIOD=10)')")
