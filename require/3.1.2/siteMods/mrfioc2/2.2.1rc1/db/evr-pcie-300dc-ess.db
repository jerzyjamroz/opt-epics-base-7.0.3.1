
# Base record set for an EVR
#
# Macros:
#  P = record name prefix
#  OBJ = devObj name
#  EVNT1HZ = DB event number for the 1 second tick

record(bo, "$(P)$(R=)$(S=:)Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ), PROP=Enable")
  field(DESC, "Master enable for EVR device")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(P)$(R=)$(S=:)Cnt-LinkTimo-I") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ), PROP=HB Timeout Count")
  field(SCAN, "I/O Intr")
  field(DESC, "# of heartbeat timeout")
}

record(bo, "$(P)$(R=)$(S=:)ExtInhib-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ), PROP=External Inhibit")
  field(PINI, "YES")
  field(DESC, "Use HW trigger inhibit (EVRTG only)")
  field(MASK, "1")
  field(ZNAM, "Use Inhibit")
  field(ONAM, "Always Permit")
  field(OSV, "MINOR")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "$(P)$(R=)$(S=:)Link-Sts") {
  field(DTYP, "Obj Prop bool")
  field(INP , "@OBJ=$(OBJ), PROP=Link Status")
  field(DESC, "Status of event link")
  field(SCAN, "1 second")
  field(ZNAM, "Fail")
  field(ONAM, "OK")
  field(ZSV , "MAJOR")
  field(FLNK, "$(P)$(R=)$(S=:)Cnt-RxErr-I")
}

record(longin, "$(P)$(R=)$(S=:)Cnt-RxErr-I") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Receive Error Count")
  field(INP , "@OBJ=$(OBJ), PROP=Receive Error Count")
  field(DESC, "Rx error count")
  field(TSEL, "$(P)$(R=)$(S=:)Link-Sts.TIME")
  field(FLNK, "$(P)$(R=)$(S=:)Cnt-HwOflw-I")
}

record(longin, "$(P)$(R=)$(S=:)Cnt-HwOflw-I") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "FIFO Hw Overflow Count")
  field(INP , "@OBJ=$(OBJ), PROP=FIFO Overflow Count")
  field(TSEL, "$(P)$(R=)$(S=:)Cnt-RxErr-I.TIME")
  field(FLNK, "$(P)$(R=)$(S=:)Cnt-SwOflw-I")
}

record(longin, "$(P)$(R=)$(S=:)Cnt-SwOflw-I") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "FIFO Sw Overrate Count")
  field(INP , "@OBJ=$(OBJ), PROP=FIFO Over rate")
  field(TSEL, "$(P)$(R=)$(S=:)Cnt-RxErr-I.TIME")
  field(FLNK, "$(P)$(R=)$(S=:)Link-Init-FO_")
}

# Detect the first time the event link
# is online.  Then set master enable.
record(calcout, "$(P)$(R=)$(S=:)Link-Init-FO_") {
  field(DESC, "Detect initial link up")
  field(INPA, "$(P)$(R=)$(S=:)Link-Sts")
  field(CALC, "A")
  field(OUT , "$(P)$(R=)$(S=:)Ena-Sel PP")
  field(OOPT, "Transition To Non-zero")
  field(ODLY, "1.0")
  field(TSEL, "$(P)$(R=)$(S=:)Link-Sts.TIME")
}

record(ao, "$(P)$(R=)$(S=:)Link-Clk-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ), PROP=Clock")
  field(PINI, "YES")
  field(DESC, "Event Link speed")
  field(VAL , "$(FEVT=88.0525)")
  field(EGU , "MHz")
  field(LINR, "LINEAR")
  field(ESLO, "1e-6")
  field(HOPR, "150")
  field(LOPR, "50")
  field(DRVH, "150")
  field(DRVL, "50")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)Link-Clk-I")
  info(autosaveFields_pass0, "VAL EGU ESLO HOPR LOPR DRVH DRVL PREC")
}

record(ai, "$(P)$(R=)$(S=:)Link-Clk-I") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ), PROP=Clock")
  field(DESC, "Event Link speed")
  field(PINI, "YES")
  field(UDF , "0")
  field(EGU , "MHz")
  field(LINR, "LINEAR")
  field(ESLO, "1e-6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)Link-ClkErr-I")
  info(autosaveFields_pass0, "EGU ESLO HOPR LOPR PREC")
}

record(calc, "$(P)$(R=)$(S=:)Link-ClkErr-I") {
  field(CALC, "(A-B)*1000")
  field(EGU , "KHz")
  field(PREC, "3")
  field(INPA, "$(P)$(R=)$(S=:)Link-Clk-SP")
  field(INPB, "$(P)$(R=)$(S=:)Link-Clk-I")
  field(TSEL, "$(P)$(R=)$(S=:)Link-Clk-I.TIME")
  field(FLNK, "$(P)$(R=)$(S=:)Link-ClkPeriod-I")
  info(autosaveFields_pass0, "EGU CALC PREC")
}

# Intended for use in calculations
record(calc, "$(P)$(R=)$(S=:)Link-ClkPeriod-I") {
  field(DESC, "Event period")
  field(CALC, "B/A")
  field(EGU , "s")
  field(PREC, "3")
  field(INPA, "$(P)$(R=)$(S=:)Link-Clk-SP")
  field(INPB, "$(P)$(R=)$(S=:)Link-Clk-SP.ESLO")
  field(TSEL, "$(P)$(R=)$(S=:)Link-Clk-I.TIME")
}

record(longin, "$(P)$(R=)$(S=:)Cnt-IRQ-I") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Interrupt Count")
  field(SCAN, "1 second")
  field(INP , "@OBJ=$(OBJ), PROP=Interrupt Count")
  field(FLNK, "$(P)$(R=)$(S=:)Rate-IRQ-I")
}

record(calc, "$(P)$(R=)$(S=:)Rate-IRQ-I") {
  field(DESC, "Interrupt rate")
  field(INPA, "$(P)$(R=)$(S=:)Cnt-IRQ-I")
  field(CALC, "C:=A-B;B:=A;C")
  field(EGU , "Hz")
}

record(longin, "$(P)$(R=)$(S=:)Cnt-FIFOEvt-I") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "FIFO Event Count")
  field(SCAN, "1 second")
  field(INP , "@OBJ=$(OBJ), PROP=FIFO Event Count")
  field(FLNK, "$(P)$(R=)$(S=:)Rate-FIFOEvt-I")
}

record(calc, "$(P)$(R=)$(S=:)Rate-FIFOEvt-I") {
field(DESC, "FIFO reception rate")
  field(INPA, "$(P)$(R=)$(S=:)Cnt-FIFOEvt-I")
  field(CALC, "C:=A-B;B:=A;C")
  field(EGU , "evt/s")
  field(FLNK, "$(P)$(R=)$(S=:)Cnt-FIFOLoop-I")
}

record(longin, "$(P)$(R=)$(S=:)Cnt-FIFOLoop-I") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "FIFO Loop Count")
  field(INP , "@OBJ=$(OBJ), PROP=FIFO Loop Count")
  field(FLNK, "$(P)$(R=)$(S=:)Rate-FIFOLoop-I")
}

record(calc, "$(P)$(R=)$(S=:)Rate-FIFOLoop-I") {
  field(DESC, "FIFO service rate")
  field(INPA, "$(P)$(R=)$(S=:)Cnt-FIFOLoop-I")
  field(CALC, "C:=A-B;B:=A;C")
  field(EGU , "Hz")
  field(FLNK, "$(P)$(R=)$(S=:)FIFOCap-I")
}

# average number of events taken from the FIFO during each loop
record(calc, "$(P)$(R=)$(S=:)FIFOCap-I") {
  field(DESC, "FIFO capacity utilization")
  field(INPA, "$(P)$(R=)$(S=:)Rate-FIFOEvt-I")
  field(INPB, "$(P)$(R=)$(S=:)Rate-FIFOLoop-I")
  field(INPC, "5.11")
  field(CALC, "A/B/C")
  field(EGU , "%")
  field(HIHI, "98")
  field(HIGH, "80")
  field(LOW , "-1")
  field(HHSV, "MAJOR")
  field(HSV , "MINOR")
  field(LSV , "INVALID")
  info(autosaveFields_pass0, "HIHI HIGH LOW")
}

record(bi, "$(P)$(R=)$(S=:)Pll-Sts") {
  field(DTYP, "Obj Prop bool")
  field(INP , "@OBJ=$(OBJ), PROP=PLL Lock Status")
  field(SCAN, "1 second")
  field(PINI, "YES")
  field(DESC, "Status of PLL")
  field(ZNAM, "Error")
  field(ONAM, "OK")
  field(ZSV , "MAJOR")
}

record(stringin, "$(P)$(R=)$(S=:)HwType-I") {
  field(DTYP, "Obj Prop string")
  field(INP , "@OBJ=$(OBJ), PROP=Model")
  field(PINI, "YES")
  field(DESC, "Hardware type code")
}

record(stringin, "$(P)$(R=)$(S=:)FwVer-I") {
  field(DTYP, "Obj Prop string")
  field(INP , "@OBJ=$(OBJ), PROP=Version")
  field(PINI, "YES")
  field(DESC, "Firmware version")
}

record(stringin, "$(P)$(R=)$(S=:)SwVer-I") {
  field(DTYP, "Obj Prop string")
  field(INP , "@OBJ=$(OBJ), PROP=Sw Version")
  field(PINI, "YES")
  field(DESC, "Software version")
}

record(stringin, "$(P)$(R=)$(S=:)Pos-I") {
  field(DTYP, "Obj Prop string")
  field(INP , "@OBJ=$(OBJ), PROP=Position")
  field(PINI, "YES")
  field(DESC, "Card position in system")
}

record(fanout, "$(P)$(R=)$(S=:)Time-Init-FO_") {
  field(PINI, "YES")
  field(LNK1, "$(P)$(R=)$(S=:)Time-Clock-SP")
  field(LNK2, "$(P)$(R=)$(S=:)Time-Src-Sel")
}

record(bi, "$(P)$(R=)$(S=:)Time-Valid-Sts") {
  field(DTYP, "Obj Prop bool")
  field(INP , "@OBJ=$(OBJ), PROP=Timestamp Valid")
  field(PINI, "YES")
  field(SCAN, "I/O Intr")
  field(ZSV , "MAJOR")
  field(ZNAM, "Invalid")
  field(ONAM, "Valid")
}

record(mbbo, "$(P)$(R=)$(S=:)Time-Src-Sel") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)Time-Src-Sel_")
  field( PINI, "YES")
  field( ZRST, "Event clock")
  field( ONST, "Mapped code(s)")
  field( TWST, "DBus 4")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  field(FLNK, "$(P)$(R=)$(S=:)Time-Src-Sel_")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)Time-Src-Sel_") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ), PROP=Timestamp Source")
  field(FLNK, "$(P)$(R=)$(S=:)Time-Clock-I")
}

record(ao, "$(P)$(R=)$(S=:)Time-Clock-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ), PROP=Timestamp Clock")
  field(DESC, "Timestamp tick rate")
  field(VAL , "$(FEVT=88.0525)")
  field(EGU , "MHz")
  field(LINR, "LINEAR")
  field(ESLO, "1e-6")
  field(HOPR, "150")
  field(LOPR, "0")
  field(DRVH, "150")
  field(DRVL, "0")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)Time-Clock-I")
  info(autosaveFields_pass0, "VAL EGU ESLO HOPR LOPR DRVH DRVL PREC")
}

record(ai, "$(P)$(R=)$(S=:)Time-Clock-I") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ), PROP=Timestamp Clock")
  field(SCAN, "1 second")
  field(DESC, "Timestamp tick rate")
  field(PINI, "YES")
  field(UDF , "0")
  field(EGU , "MHz")
  field(LINR, "LINEAR")
  field(ESLO, "1e-6")
  field(HOPR, "150")
  field(LOPR, "0")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)Time-Div-I")
}

record(longin, "$(P)$(R=)$(S=:)Time-Div-I") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ), PROP=Timestamp Prescaler")
  field(DESC, "Timestamp divider")
}

record(stringin, "$(P)$(R=)$(S=:)Time-I") {
  field(DTYP, "EVR Timestamp")
  field(INP , "@OBJ=$(OBJ), Code=$(EVNT1HZ=125)")
  field(SCAN, "Event")
  field(EVNT, "$(EVNT1HZ=125)")
  field(TSE , "-2")
}

record(bo, "$(P)$(R=)$(S=:)Link-RxMode-Sel") {
  field(DESC, "Downstream data mode")
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):BUFRX, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "DBus only")
  field(ONAM, "DBus+Buffer")
  info(autosaveFields_pass0, "VAL")
}

record(waveform, "$(P)$(R=)$(S=:)Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}


record(mbbo, "$(P)$(R=)$(S=:)Src-Clk-SP") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(OBJ), PROP=Clock Mode")
  field(PINI, "YES")
  field(ZRST, "EVG")
  field(ONST, "Internal")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(FLNK, "$(P)$(R=)$(S=:)Src-Clk-RB")
}

record(mbbi, "$(P)$(R=)$(S=:)Src-Clk-RB") {
  field(DTYP, "Obj Prop uint16")
  field(INP , "@OBJ=$(OBJ), PROP=Clock Mode")
  field(PINI, "YES")
  field(ZRST, "EVG")
  field(ONST, "Internal")
  field(ZRVL, "0")
  field(ONVL, "1")
}

record(waveform, "$(P)$(R=)$(S=:)dbus-send-s8") {
  field(DESC, "Send Buffer")
  field(DTYP, "MRF Data Buf Tx")
  field(INP , "@OBJ=$(OBJ):BUFTX, Proto=1, P=Data Tx")
  field(FTVL, "CHAR")
  field(NELM, "2046")
  info(autosaveFields_pass0, "INP")
  info(autosaveFields_pass1, "VAL")
}

record(waveform, "$(P)$(R=)$(S=:)dbus-send-u32") {
  field(DESC, "Send Buffer")
  field(DTYP, "MRF Data Buf Tx")
  field(INP , "@OBJ=$(OBJ):BUFTX, Proto=1, P=Data Tx")
  field(FTVL, "ULONG")
  field(NELM, "2046")
  info(autosaveFields_pass0, "INP")
  info(autosaveFields_pass1, "VAL")
}
record(longout, "$(P)$(R=)$(S=:)EvtCode-SP") {
  field(DESC, "Sent software event")
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ), PROP=EvtCode")
  field(VAL , "0")
  field(PINI, "YES") # send event 0 is a no-op
}

# software time source simulation
# included here as it depends on SW event feature

record (stringin, "$(P)$(R=)$(S=:)Timestamp-RB") {
    field( DTYP, "Obj Prop string")
    field( INP , "@OBJ=$(OBJ), PROP=NextSecond")
    field( SCAN, "1 second")
    field( FLNK, "$(P)$(R=)$(S=:)TimeErr-I")
}

record(ai, "$(P)$(R=)$(S=:)TimeErr-I") {
    field( DTYP, "Obj Prop double")
    field( INP , "@OBJ=$(OBJ), PROP=Time Error")
}

record(mbbo, "$(P)$(R=)$(S=:)TimeSrc-Sel") {
    field( DTYP, "Obj Prop uint32")
    field( OUT , "@OBJ=$(OBJ), PROP=TimeSrc")
    field( ZRST, "Disable (noop)")
    field( ONST, "External clk")
    field( TWST, "Sys. Clock")
    field( ZRVL, "0")
    field( ONVL, "1")
    field( TWVL, "2")
}

record(bo,"$(P)$(R=)$(S=:)SyncTimestamp-Cmd" ) {
    field( DTYP, "Obj Prop command")
    field( OUT , "@OBJ=$(OBJ), PROP=Sync TS")
    field( DESC, "EVG Sync TimeStamp")
}
record(bo, "$(P)$(R=)$(S=:)Link-TxMode-Sel") {
  field(DESC, "Data mode")
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):BUFTX, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "DBus only")
  field(ONAM, "DBus+Buffer")
  info(autosaveFields_pass0, "VAL")
}

record(waveform, "$(P)$(R=)$(S=:)dbus-recv-s8") {
  field(DESC, "Recv Buffer")
  field(DTYP, "MRM EVR Buf Rx")
  field(INP , "@OBJ=$(OBJ):BUFRX, Proto=0xff00, P=Data Rx")
  field(FTVL, "CHAR")
  field(NELM, "2046")
  info(autosaveFields_pass0, "INP")
}

record(waveform, "$(P)$(R=)$(S=:)dbus-recv-u32") {
  field(DESC, "Recv Buffer")
  field(DTYP, "MRM EVR Buf Rx")
  field(INP , "@OBJ=$(OBJ):BUFRX, Proto=0xff00, P=Data Rx")
  field(FTVL, "ULONG")
  field(NELM, "2046")
  info(autosaveFields_pass0, "INP")
}

# Macros
#  P
#  EVG
#  seqNum
#
# Device indpendent parts of sequencer (excludes trigger source mapping)

record(mbbo, "$(P)$(R=)$(S=:)SoftSeq0-TsResolution-Sel") {
    field( DTYP, "Obj Prop uint32")
    field( OUT,  "@OBJ=$(OBJ):SEQ0, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=TIMEUNITS")
    field( ZRST, "Ticks")
    field( ONST, "Sec")
    field( TWST, "uSec")
    field( THST, "nSec")
    field( ZRVL, "0")
    field( ONVL, "1")
    field( TWVL, "1000000")
    field( THVL, "1000000000")
    field( FRSV, "INVALID")
    field( FVSV, "INVALID")
    field( SXSV, "INVALID")
    field( SVSV, "INVALID")
    field( EISV, "INVALID")
    field( NISV, "INVALID")
    field( TESV, "INVALID")
    field( ELSV, "INVALID")
    field( TVSV, "INVALID")
    field( TTSV, "INVALID")
    field( FTSV, "INVALID")
    field( FFSV, "INVALID")
    field( UNSV, "INVALID")
    field( IVOA, "Don't drive outputs")
    field( FLNK, "$(P)$(R=)$(S=:)SoftSeq0-TsResolution-RB")
    info(autosaveFields_pass0, "VAL")
}

record(mbbi, "$(P)$(R=)$(S=:)SoftSeq0-TsResolution-RB") {
    field( DTYP, "Obj Prop uint32")
    field( INP , "@OBJ=$(OBJ):SEQ0, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=TIMEUNITS")
    field( ZRST, "Ticks")
    field( ONST, "Sec")
    field( TWST, "uSec")
    field( THST, "nSec")
    field( ZRVL, "0")
    field( ONVL, "1")
    field( TWVL, "1000000")
    field( THVL, "1000000000")
    field( FRSV, "INVALID")
    field( FVSV, "INVALID")
    field( SXSV, "INVALID")
    field( SVSV, "INVALID")
    field( EISV, "INVALID")
    field( NISV, "INVALID")
    field( TESV, "INVALID")
    field( ELSV, "INVALID")
    field( TVSV, "INVALID")
    field( TTSV, "INVALID")
    field( FTSV, "INVALID")
    field( FFSV, "INVALID")
    field( UNSV, "INVALID")
}

record(waveform, "$(P)$(R=)$(S=:)SoftSeq0-EvtCode-SP") {
    field( DTYP, "Obj Prop waveform out")
    field( DESC, "Sequence event code array")
    field( INP,  "@OBJ=$(OBJ):SEQ0, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=CODES")
    field( NELM, "2047")
    field( FTVL, "UCHAR")
    info( autosaveFields_pass1, "VAL")
}

record(waveform, "$(P)$(R=)$(S=:)SoftSeq0-EvtCode-RB") {
    field( DTYP, "Obj Prop waveform in")
    field( DESC, "Sequence event code readback")
    field( INP,  "@OBJ=$(OBJ):SEQ0, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=CODES")
    field( SCAN, "I/O Intr")
    field( NELM, "2047")
    field( FTVL, "UCHAR")
}

record(waveform, "$(P)$(R=)$(S=:)SoftSeq0-Timestamp-SP") {
    field( DTYP, "Obj Prop waveform out")
    field( DESC, "Sequence timestamp array")
    field( INP,  "@OBJ=$(OBJ):SEQ0, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=TIMES")
    field( NELM, "2047")
    field( FTVL, "DOUBLE")
    info( autosaveFields_pass1, "VAL")
}

record(waveform, "$(P)$(R=)$(S=:)SoftSeq0-Timestamp-RB") {
    field( DTYP, "Obj Prop waveform in")
    field( DESC, "Sequence timestamp readback")
    field( INP,  "@OBJ=$(OBJ):SEQ0, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=TIMES")
    field( SCAN, "I/O Intr")
    field( NELM, "2047")
    field( FTVL, "DOUBLE")
}

record(mbbo, "$(P)$(R=)$(S=:)SoftSeq0-RunMode-Sel") {
    field( DTYP, "Obj Prop uint32")
    field( OUT,  "@OBJ=$(OBJ):SEQ0, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=RUN_MODE")
    field( UDF,  "0")
    field( VAL,  "1") # default to Single
    field( ZRVL, "0")
    field( ONVL, "2")
    field( ZRST, "Normal")
    field( ONST, "Single")
    field( TWSV, "INVALID")
    field( THSV, "INVALID")
    field( FRSV, "INVALID")
    field( FVSV, "INVALID")
    field( SXSV, "INVALID")
    field( SVSV, "INVALID")
    field( EISV, "INVALID")
    field( NISV, "INVALID")
    field( TESV, "INVALID")
    field( ELSV, "INVALID")
    field( TVSV, "INVALID")
    field( TTSV, "INVALID")
    field( FTSV, "INVALID")
    field( FFSV, "INVALID")
    field( UNSV, "INVALID")
    field( IVOA, "Don't drive outputs")
    info(autosaveFields_pass0, "VAL")
}

record(mbbi, "$(P)$(R=)$(S=:)SoftSeq0-RunMode-RB") {
    field( DTYP, "Obj Prop uint32")
    field( INP , "@OBJ=$(OBJ):SEQ0, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=RUN_MODE")
    field( SCAN, "I/O Intr")
    field( ZRVL, "0")
    field( ONVL, "1")
    field( TWVL, "2")
    field( ZRST, "Normal")
    field( ONST, "Automatic")
    field( TWST, "Single")
    field( THSV, "INVALID")
    field( FRSV, "INVALID")
    field( FVSV, "INVALID")
    field( SXSV, "INVALID")
    field( SVSV, "INVALID")
    field( EISV, "INVALID")
    field( NISV, "INVALID")
    field( TESV, "INVALID")
    field( ELSV, "INVALID")
    field( TVSV, "INVALID")
    field( TTSV, "INVALID")
    field( FTSV, "INVALID")
    field( FFSV, "INVALID")
    field( UNSV, "INVALID")
}

record(bo, "$(P)$(R=)$(S=:)SoftSeq0-Commit-Cmd") {
    field( DTYP, "Obj Prop command")
    field( DESC, "Commit EVG Sequence")
    field( OUT,  "@OBJ=$(OBJ):SEQ0, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=COMMIT")
    field( VAL,  "1")
    field( UDF,  "0")
    field( ZNAM, "Commit")
    field( ONAM, "Commit")
}

record(bo, "$(P)$(R=)$(S=:)SoftSeq0-Load-Cmd") {
    field( DTYP, "Obj Prop command")
    field( DESC, "ALLOC EVG Sequence")
    field( OUT,  "@OBJ=$(OBJ):SEQ0, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=LOAD")
    field( VAL,  "1")
    field( UDF,  "0")
    field( ZNAM, "0")
    field( ONAM, "1")
}

record(bo, "$(P)$(R=)$(S=:)SoftSeq0-Unload-Cmd") {
    field( DTYP, "Obj Prop command")
    field( DESC, "Dealloc EVG Sequence")
    field( OUT,  "@OBJ=$(OBJ):SEQ0, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=UNLOAD")
    field( VAL,  "0")
    field( UDF,  "0")
    field( ZNAM, "0")
    field( ONAM, "1")
}

record(bo, "$(P)$(R=)$(S=:)SoftSeq0-Enable-Cmd") {
    field( DTYP, "Obj Prop command")
    field( DESC, "Enable EVG Sequence")
    field( OUT,  "@OBJ=$(OBJ):SEQ0, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=ENABLE")
    field( VAL,  "1")
    field( UDF,  "0")
    field( ZNAM, "0")
    field( ONAM, "1")
    field( FLNK, "$(P)$(R=)$(S=:)SoftSeq0-Enable-RB")
    field( ASG , "")
}

record(bo, "$(P)$(R=)$(S=:)SoftSeq0-Disable-Cmd") {
    field( DTYP, "Obj Prop command")
    field( DESC, "Disable EVG Sequence")
    field( OUT,  "@OBJ=$(OBJ):SEQ0, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=DISABLE")
    field( VAL,  "0")
    field( UDF,  "0")
    field( ZNAM, "0")
    field( ONAM, "1")
    field( ASG , "")
}

record(bo, "$(P)$(R=)$(S=:)SoftSeq0-SoftTrig-Cmd") {
    field( DTYP, "Obj Prop command")
    field( DESC, "Sequence RAM soft trigger")
    field( OUT,  "@OBJ=$(OBJ):SEQ0, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=SOFT_TRIG")
    field( VAL,  "0")
    field( UDF,  "0")
    field( ZNAM, "0")
    field( ONAM, "1")
}

record(bi, "$(P)$(R=)$(S=:)SoftSeq0-Load-RB") {
    field( DTYP, "Obj Prop bool")
    field( DESC, "Soft Seq Load status")
    field( INP,  "@OBJ=$(OBJ):SEQ0, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=LOADED")
    field( SCAN, "I/O Intr")
    field( ZNAM, "Unloaded")
    field( ONAM, "Loaded")
    info( autosaveFields_pass0, "VAL")
}

record(bi, "$(P)$(R=)$(S=:)SoftSeq0-Commit-RB") {
    field( DTYP, "Obj Prop bool")
    field( DESC, "Soft Seq Commit status")
    field( INP,  "@OBJ=$(OBJ):SEQ0, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=COMMITTED")
    field( SCAN, "I/O Intr")    
    field( ZNAM, "Uncommitted")
    field( ONAM, "Committed")
    info( autosaveFields_pass0, "VAL")
}

record(bi, "$(P)$(R=)$(S=:)SoftSeq0-Enable-Sts") {
    field( DTYP, "Obj Prop bool")
    field( DESC, "Soft Seq Ena status")
    field( INP,  "@OBJ=$(OBJ):SEQ0, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=ENABLED")
    field( SCAN, "I/O Intr")    
    field( ZNAM, "Disabled")
    field( ONAM, "Enabled")
    field( FLNK, "")
    info( autosaveFields_pass0, "VAL")
    alias("$(P)$(R=)$(S=:)SoftSeq0-Enable-RB")
}

record(stringin, "$(P)$(R=)$(S=:)SoftSeq0-Error-RB") {
    field( DTYP, "Obj Prop string")
    field( DESC, "Sequence error msg.")
    field( INP,  "@OBJ=$(OBJ):SEQ0, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=ERROR")
    field( SCAN, "I/O Intr")
}

record(longin, "$(P)$(R=)$(S=:)SoftSeq0-NumOfStarts-I") {
    field( DTYP, "Obj Prop uint32")
    field( DESC, "# times soft sequence starts")
    field( INP , "@OBJ=$(OBJ):SEQ0, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=NUM_STARTS")
    field( SCAN, "I/O Intr") # on sequencer start
    field( FLNK, "")
}

record(longin, "$(P)$(R=)$(S=:)SoftSeq0-NumOfRuns-I") {
    field( DTYP, "Obj Prop uint32")
    field( DESC, "# times soft sequence ran")
    field( INP,  "@OBJ=$(OBJ):SEQ0, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=NUM_RUNS")
    field( SCAN, "I/O Intr") # on sequencer stop
}

#
#Process Load-Cmd record if the sequence  was perviously in LOADED state
#

record(calcout, "$(P)$(R=)$(S=:)SoftSeq0-Load-Calc_") {
    field( CALC, "A")
    field( INPA, "$(P)$(R=)$(S=:)SoftSeq0-Load-RB NPP NMS")
    field( OOPT, "When Non-zero")
    field( OUT,  "$(P)$(R=)$(S=:)SoftSeq0-Load-Cmd PP")
}

#
#Process Commit-Cmd record if the sequence was perviously in COMMITTED state
#

record(calcout, "$(P)$(R=)$(S=:)SoftSeq0-Commit-Calc_") {
    field( CALC, "A")
    field( INPA, "$(P)$(R=)$(S=:)SoftSeq0-Commit-RB NPP NMS")
    field( OOPT, "When Non-zero")
    field( OUT,  "$(P)$(R=)$(S=:)SoftSeq0-Commit-Cmd PP")
}

#
#Process Enable-Cmd record if the sequence was perviously in ENABLED state
#

record(calcout, "$(P)$(R=)$(S=:)SoftSeq0-Enable-Calc_") {
    field( CALC, "A")
    field( INPA, "$(P)$(R=)$(S=:)SoftSeq0-Enable-RB NPP NMS")
    field( OOPT, "When Non-zero")
    field( OUT,  "$(P)$(R=)$(S=:)SoftSeq0-Enable-Cmd PP")
}

record(fanout, "$(P)$(R=)$(S=:)SoftSeq0-InitSeq-FOut_") {
    field( DESC, "Boot of sequence for sequencer")
    field( SELM, "All")
    field( PINI, "RUNNING")
    field( LNK1, "")
    field( LNK2, "$(P)$(R=)$(S=:)SoftSeq0-TsResolution-Sel")
    field( LNK3, "$(P)$(R=)$(S=:)SoftSeq0-EvtCode-SP")
    field( LNK4, "$(P)$(R=)$(S=:)SoftSeq0-Timestamp-SP")
    field( LNK5, "$(P)$(R=)$(S=:)SoftSeq0-RunMode-Sel")
    field( LNK6, "$(P)$(R=)$(S=:)SoftSeq0-InitSeq-Cont-FOut_")
}

record(fanout, "$(P)$(R=)$(S=:)SoftSeq0-InitSeq-Cont-FOut_") {
    field( DESC, "Boot of sequence for sequencer")
    field( SELM, "All")
    field( LNK1, "$(P)$(R=)$(S=:)SoftSeq0-TrigSrc-Init-FOut_")
    field( LNK2, "$(P)$(R=)$(S=:)SoftSeq0-Commit-Calc_")
    field( LNK3, "$(P)$(R=)$(S=:)SoftSeq0-Load-Calc_")
    field( LNK4, "$(P)$(R=)$(S=:)SoftSeq0-Enable-Calc_")
}

record(waveform, "$(P)$(R=)$(S=:)SoftSeq0-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Macros
#  P
#  EVG
#  seqNum
#
# Device indpendent parts of sequencer (excludes trigger source mapping)

record(mbbo, "$(P)$(R=)$(S=:)SoftSeq1-TsResolution-Sel") {
    field( DTYP, "Obj Prop uint32")
    field( OUT,  "@OBJ=$(OBJ):SEQ1, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=TIMEUNITS")
    field( ZRST, "Ticks")
    field( ONST, "Sec")
    field( TWST, "uSec")
    field( THST, "nSec")
    field( ZRVL, "0")
    field( ONVL, "1")
    field( TWVL, "1000000")
    field( THVL, "1000000000")
    field( FRSV, "INVALID")
    field( FVSV, "INVALID")
    field( SXSV, "INVALID")
    field( SVSV, "INVALID")
    field( EISV, "INVALID")
    field( NISV, "INVALID")
    field( TESV, "INVALID")
    field( ELSV, "INVALID")
    field( TVSV, "INVALID")
    field( TTSV, "INVALID")
    field( FTSV, "INVALID")
    field( FFSV, "INVALID")
    field( UNSV, "INVALID")
    field( IVOA, "Don't drive outputs")
    field( FLNK, "$(P)$(R=)$(S=:)SoftSeq1-TsResolution-RB")
    info(autosaveFields_pass0, "VAL")
}

record(mbbi, "$(P)$(R=)$(S=:)SoftSeq1-TsResolution-RB") {
    field( DTYP, "Obj Prop uint32")
    field( INP , "@OBJ=$(OBJ):SEQ1, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=TIMEUNITS")
    field( ZRST, "Ticks")
    field( ONST, "Sec")
    field( TWST, "uSec")
    field( THST, "nSec")
    field( ZRVL, "0")
    field( ONVL, "1")
    field( TWVL, "1000000")
    field( THVL, "1000000000")
    field( FRSV, "INVALID")
    field( FVSV, "INVALID")
    field( SXSV, "INVALID")
    field( SVSV, "INVALID")
    field( EISV, "INVALID")
    field( NISV, "INVALID")
    field( TESV, "INVALID")
    field( ELSV, "INVALID")
    field( TVSV, "INVALID")
    field( TTSV, "INVALID")
    field( FTSV, "INVALID")
    field( FFSV, "INVALID")
    field( UNSV, "INVALID")
}

record(waveform, "$(P)$(R=)$(S=:)SoftSeq1-EvtCode-SP") {
    field( DTYP, "Obj Prop waveform out")
    field( DESC, "Sequence event code array")
    field( INP,  "@OBJ=$(OBJ):SEQ1, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=CODES")
    field( NELM, "2047")
    field( FTVL, "UCHAR")
    info( autosaveFields_pass1, "VAL")
}

record(waveform, "$(P)$(R=)$(S=:)SoftSeq1-EvtCode-RB") {
    field( DTYP, "Obj Prop waveform in")
    field( DESC, "Sequence event code readback")
    field( INP,  "@OBJ=$(OBJ):SEQ1, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=CODES")
    field( SCAN, "I/O Intr")
    field( NELM, "2047")
    field( FTVL, "UCHAR")
}

record(waveform, "$(P)$(R=)$(S=:)SoftSeq1-Timestamp-SP") {
    field( DTYP, "Obj Prop waveform out")
    field( DESC, "Sequence timestamp array")
    field( INP,  "@OBJ=$(OBJ):SEQ1, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=TIMES")
    field( NELM, "2047")
    field( FTVL, "DOUBLE")
    info( autosaveFields_pass1, "VAL")
}

record(waveform, "$(P)$(R=)$(S=:)SoftSeq1-Timestamp-RB") {
    field( DTYP, "Obj Prop waveform in")
    field( DESC, "Sequence timestamp readback")
    field( INP,  "@OBJ=$(OBJ):SEQ1, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=TIMES")
    field( SCAN, "I/O Intr")
    field( NELM, "2047")
    field( FTVL, "DOUBLE")
}

record(mbbo, "$(P)$(R=)$(S=:)SoftSeq1-RunMode-Sel") {
    field( DTYP, "Obj Prop uint32")
    field( OUT,  "@OBJ=$(OBJ):SEQ1, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=RUN_MODE")
    field( UDF,  "0")
    field( VAL,  "1") # default to Single
    field( ZRVL, "0")
    field( ONVL, "2")
    field( ZRST, "Normal")
    field( ONST, "Single")
    field( TWSV, "INVALID")
    field( THSV, "INVALID")
    field( FRSV, "INVALID")
    field( FVSV, "INVALID")
    field( SXSV, "INVALID")
    field( SVSV, "INVALID")
    field( EISV, "INVALID")
    field( NISV, "INVALID")
    field( TESV, "INVALID")
    field( ELSV, "INVALID")
    field( TVSV, "INVALID")
    field( TTSV, "INVALID")
    field( FTSV, "INVALID")
    field( FFSV, "INVALID")
    field( UNSV, "INVALID")
    field( IVOA, "Don't drive outputs")
    info(autosaveFields_pass0, "VAL")
}

record(mbbi, "$(P)$(R=)$(S=:)SoftSeq1-RunMode-RB") {
    field( DTYP, "Obj Prop uint32")
    field( INP , "@OBJ=$(OBJ):SEQ1, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=RUN_MODE")
    field( SCAN, "I/O Intr")
    field( ZRVL, "0")
    field( ONVL, "1")
    field( TWVL, "2")
    field( ZRST, "Normal")
    field( ONST, "Automatic")
    field( TWST, "Single")
    field( THSV, "INVALID")
    field( FRSV, "INVALID")
    field( FVSV, "INVALID")
    field( SXSV, "INVALID")
    field( SVSV, "INVALID")
    field( EISV, "INVALID")
    field( NISV, "INVALID")
    field( TESV, "INVALID")
    field( ELSV, "INVALID")
    field( TVSV, "INVALID")
    field( TTSV, "INVALID")
    field( FTSV, "INVALID")
    field( FFSV, "INVALID")
    field( UNSV, "INVALID")
}

record(bo, "$(P)$(R=)$(S=:)SoftSeq1-Commit-Cmd") {
    field( DTYP, "Obj Prop command")
    field( DESC, "Commit EVG Sequence")
    field( OUT,  "@OBJ=$(OBJ):SEQ1, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=COMMIT")
    field( VAL,  "1")
    field( UDF,  "0")
    field( ZNAM, "Commit")
    field( ONAM, "Commit")
}

record(bo, "$(P)$(R=)$(S=:)SoftSeq1-Load-Cmd") {
    field( DTYP, "Obj Prop command")
    field( DESC, "ALLOC EVG Sequence")
    field( OUT,  "@OBJ=$(OBJ):SEQ1, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=LOAD")
    field( VAL,  "1")
    field( UDF,  "0")
    field( ZNAM, "0")
    field( ONAM, "1")
}

record(bo, "$(P)$(R=)$(S=:)SoftSeq1-Unload-Cmd") {
    field( DTYP, "Obj Prop command")
    field( DESC, "Dealloc EVG Sequence")
    field( OUT,  "@OBJ=$(OBJ):SEQ1, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=UNLOAD")
    field( VAL,  "0")
    field( UDF,  "0")
    field( ZNAM, "0")
    field( ONAM, "1")
}

record(bo, "$(P)$(R=)$(S=:)SoftSeq1-Enable-Cmd") {
    field( DTYP, "Obj Prop command")
    field( DESC, "Enable EVG Sequence")
    field( OUT,  "@OBJ=$(OBJ):SEQ1, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=ENABLE")
    field( VAL,  "1")
    field( UDF,  "0")
    field( ZNAM, "0")
    field( ONAM, "1")
    field( FLNK, "$(P)$(R=)$(S=:)SoftSeq1-Enable-RB")
    field( ASG , "")
}

record(bo, "$(P)$(R=)$(S=:)SoftSeq1-Disable-Cmd") {
    field( DTYP, "Obj Prop command")
    field( DESC, "Disable EVG Sequence")
    field( OUT,  "@OBJ=$(OBJ):SEQ1, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=DISABLE")
    field( VAL,  "0")
    field( UDF,  "0")
    field( ZNAM, "0")
    field( ONAM, "1")
    field( ASG , "")
}

record(bo, "$(P)$(R=)$(S=:)SoftSeq1-SoftTrig-Cmd") {
    field( DTYP, "Obj Prop command")
    field( DESC, "Sequence RAM soft trigger")
    field( OUT,  "@OBJ=$(OBJ):SEQ1, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=SOFT_TRIG")
    field( VAL,  "0")
    field( UDF,  "0")
    field( ZNAM, "0")
    field( ONAM, "1")
}

record(bi, "$(P)$(R=)$(S=:)SoftSeq1-Load-RB") {
    field( DTYP, "Obj Prop bool")
    field( DESC, "Soft Seq Load status")
    field( INP,  "@OBJ=$(OBJ):SEQ1, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=LOADED")
    field( SCAN, "I/O Intr")
    field( ZNAM, "Unloaded")
    field( ONAM, "Loaded")
    info( autosaveFields_pass0, "VAL")
}

record(bi, "$(P)$(R=)$(S=:)SoftSeq1-Commit-RB") {
    field( DTYP, "Obj Prop bool")
    field( DESC, "Soft Seq Commit status")
    field( INP,  "@OBJ=$(OBJ):SEQ1, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=COMMITTED")
    field( SCAN, "I/O Intr")    
    field( ZNAM, "Uncommitted")
    field( ONAM, "Committed")
    info( autosaveFields_pass0, "VAL")
}

record(bi, "$(P)$(R=)$(S=:)SoftSeq1-Enable-Sts") {
    field( DTYP, "Obj Prop bool")
    field( DESC, "Soft Seq Ena status")
    field( INP,  "@OBJ=$(OBJ):SEQ1, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=ENABLED")
    field( SCAN, "I/O Intr")    
    field( ZNAM, "Disabled")
    field( ONAM, "Enabled")
    field( FLNK, "")
    info( autosaveFields_pass0, "VAL")
    alias("$(P)$(R=)$(S=:)SoftSeq1-Enable-RB")
}

record(stringin, "$(P)$(R=)$(S=:)SoftSeq1-Error-RB") {
    field( DTYP, "Obj Prop string")
    field( DESC, "Sequence error msg.")
    field( INP,  "@OBJ=$(OBJ):SEQ1, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=ERROR")
    field( SCAN, "I/O Intr")
}

record(longin, "$(P)$(R=)$(S=:)SoftSeq1-NumOfStarts-I") {
    field( DTYP, "Obj Prop uint32")
    field( DESC, "# times soft sequence starts")
    field( INP , "@OBJ=$(OBJ):SEQ1, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=NUM_STARTS")
    field( SCAN, "I/O Intr") # on sequencer start
    field( FLNK, "")
}

record(longin, "$(P)$(R=)$(S=:)SoftSeq1-NumOfRuns-I") {
    field( DTYP, "Obj Prop uint32")
    field( DESC, "# times soft sequence ran")
    field( INP,  "@OBJ=$(OBJ):SEQ1, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=NUM_RUNS")
    field( SCAN, "I/O Intr") # on sequencer stop
}

#
#Process Load-Cmd record if the sequence  was perviously in LOADED state
#

record(calcout, "$(P)$(R=)$(S=:)SoftSeq1-Load-Calc_") {
    field( CALC, "A")
    field( INPA, "$(P)$(R=)$(S=:)SoftSeq1-Load-RB NPP NMS")
    field( OOPT, "When Non-zero")
    field( OUT,  "$(P)$(R=)$(S=:)SoftSeq1-Load-Cmd PP")
}

#
#Process Commit-Cmd record if the sequence was perviously in COMMITTED state
#

record(calcout, "$(P)$(R=)$(S=:)SoftSeq1-Commit-Calc_") {
    field( CALC, "A")
    field( INPA, "$(P)$(R=)$(S=:)SoftSeq1-Commit-RB NPP NMS")
    field( OOPT, "When Non-zero")
    field( OUT,  "$(P)$(R=)$(S=:)SoftSeq1-Commit-Cmd PP")
}

#
#Process Enable-Cmd record if the sequence was perviously in ENABLED state
#

record(calcout, "$(P)$(R=)$(S=:)SoftSeq1-Enable-Calc_") {
    field( CALC, "A")
    field( INPA, "$(P)$(R=)$(S=:)SoftSeq1-Enable-RB NPP NMS")
    field( OOPT, "When Non-zero")
    field( OUT,  "$(P)$(R=)$(S=:)SoftSeq1-Enable-Cmd PP")
}

record(fanout, "$(P)$(R=)$(S=:)SoftSeq1-InitSeq-FOut_") {
    field( DESC, "Boot of sequence for sequencer")
    field( SELM, "All")
    field( PINI, "RUNNING")
    field( LNK1, "")
    field( LNK2, "$(P)$(R=)$(S=:)SoftSeq1-TsResolution-Sel")
    field( LNK3, "$(P)$(R=)$(S=:)SoftSeq1-EvtCode-SP")
    field( LNK4, "$(P)$(R=)$(S=:)SoftSeq1-Timestamp-SP")
    field( LNK5, "$(P)$(R=)$(S=:)SoftSeq1-RunMode-Sel")
    field( LNK6, "$(P)$(R=)$(S=:)SoftSeq1-InitSeq-Cont-FOut_")
}

record(fanout, "$(P)$(R=)$(S=:)SoftSeq1-InitSeq-Cont-FOut_") {
    field( DESC, "Boot of sequence for sequencer")
    field( SELM, "All")
    field( LNK1, "$(P)$(R=)$(S=:)SoftSeq1-TrigSrc-Init-FOut_")
    field( LNK2, "$(P)$(R=)$(S=:)SoftSeq1-Commit-Calc_")
    field( LNK3, "$(P)$(R=)$(S=:)SoftSeq1-Load-Calc_")
    field( LNK4, "$(P)$(R=)$(S=:)SoftSeq1-Enable-Calc_")
}

record(waveform, "$(P)$(R=)$(S=:)SoftSeq1-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Macros
#  P
#  EVG
#  seqNum
#
# Device indpendent parts of sequencer (excludes trigger source mapping)

record(mbbo, "$(P)$(R=)$(S=:)SoftSeq2-TsResolution-Sel") {
    field( DTYP, "Obj Prop uint32")
    field( OUT,  "@OBJ=$(OBJ):SEQ2, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=TIMEUNITS")
    field( ZRST, "Ticks")
    field( ONST, "Sec")
    field( TWST, "uSec")
    field( THST, "nSec")
    field( ZRVL, "0")
    field( ONVL, "1")
    field( TWVL, "1000000")
    field( THVL, "1000000000")
    field( FRSV, "INVALID")
    field( FVSV, "INVALID")
    field( SXSV, "INVALID")
    field( SVSV, "INVALID")
    field( EISV, "INVALID")
    field( NISV, "INVALID")
    field( TESV, "INVALID")
    field( ELSV, "INVALID")
    field( TVSV, "INVALID")
    field( TTSV, "INVALID")
    field( FTSV, "INVALID")
    field( FFSV, "INVALID")
    field( UNSV, "INVALID")
    field( IVOA, "Don't drive outputs")
    field( FLNK, "$(P)$(R=)$(S=:)SoftSeq2-TsResolution-RB")
    info(autosaveFields_pass0, "VAL")
}

record(mbbi, "$(P)$(R=)$(S=:)SoftSeq2-TsResolution-RB") {
    field( DTYP, "Obj Prop uint32")
    field( INP , "@OBJ=$(OBJ):SEQ2, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=TIMEUNITS")
    field( ZRST, "Ticks")
    field( ONST, "Sec")
    field( TWST, "uSec")
    field( THST, "nSec")
    field( ZRVL, "0")
    field( ONVL, "1")
    field( TWVL, "1000000")
    field( THVL, "1000000000")
    field( FRSV, "INVALID")
    field( FVSV, "INVALID")
    field( SXSV, "INVALID")
    field( SVSV, "INVALID")
    field( EISV, "INVALID")
    field( NISV, "INVALID")
    field( TESV, "INVALID")
    field( ELSV, "INVALID")
    field( TVSV, "INVALID")
    field( TTSV, "INVALID")
    field( FTSV, "INVALID")
    field( FFSV, "INVALID")
    field( UNSV, "INVALID")
}

record(waveform, "$(P)$(R=)$(S=:)SoftSeq2-EvtCode-SP") {
    field( DTYP, "Obj Prop waveform out")
    field( DESC, "Sequence event code array")
    field( INP,  "@OBJ=$(OBJ):SEQ2, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=CODES")
    field( NELM, "2047")
    field( FTVL, "UCHAR")
    info( autosaveFields_pass1, "VAL")
}

record(waveform, "$(P)$(R=)$(S=:)SoftSeq2-EvtCode-RB") {
    field( DTYP, "Obj Prop waveform in")
    field( DESC, "Sequence event code readback")
    field( INP,  "@OBJ=$(OBJ):SEQ2, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=CODES")
    field( SCAN, "I/O Intr")
    field( NELM, "2047")
    field( FTVL, "UCHAR")
}

record(waveform, "$(P)$(R=)$(S=:)SoftSeq2-Timestamp-SP") {
    field( DTYP, "Obj Prop waveform out")
    field( DESC, "Sequence timestamp array")
    field( INP,  "@OBJ=$(OBJ):SEQ2, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=TIMES")
    field( NELM, "2047")
    field( FTVL, "DOUBLE")
    info( autosaveFields_pass1, "VAL")
}

record(waveform, "$(P)$(R=)$(S=:)SoftSeq2-Timestamp-RB") {
    field( DTYP, "Obj Prop waveform in")
    field( DESC, "Sequence timestamp readback")
    field( INP,  "@OBJ=$(OBJ):SEQ2, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=TIMES")
    field( SCAN, "I/O Intr")
    field( NELM, "2047")
    field( FTVL, "DOUBLE")
}

record(mbbo, "$(P)$(R=)$(S=:)SoftSeq2-RunMode-Sel") {
    field( DTYP, "Obj Prop uint32")
    field( OUT,  "@OBJ=$(OBJ):SEQ2, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=RUN_MODE")
    field( UDF,  "0")
    field( VAL,  "1") # default to Single
    field( ZRVL, "0")
    field( ONVL, "2")
    field( ZRST, "Normal")
    field( ONST, "Single")
    field( TWSV, "INVALID")
    field( THSV, "INVALID")
    field( FRSV, "INVALID")
    field( FVSV, "INVALID")
    field( SXSV, "INVALID")
    field( SVSV, "INVALID")
    field( EISV, "INVALID")
    field( NISV, "INVALID")
    field( TESV, "INVALID")
    field( ELSV, "INVALID")
    field( TVSV, "INVALID")
    field( TTSV, "INVALID")
    field( FTSV, "INVALID")
    field( FFSV, "INVALID")
    field( UNSV, "INVALID")
    field( IVOA, "Don't drive outputs")
    info(autosaveFields_pass0, "VAL")
}

record(mbbi, "$(P)$(R=)$(S=:)SoftSeq2-RunMode-RB") {
    field( DTYP, "Obj Prop uint32")
    field( INP , "@OBJ=$(OBJ):SEQ2, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=RUN_MODE")
    field( SCAN, "I/O Intr")
    field( ZRVL, "0")
    field( ONVL, "1")
    field( TWVL, "2")
    field( ZRST, "Normal")
    field( ONST, "Automatic")
    field( TWST, "Single")
    field( THSV, "INVALID")
    field( FRSV, "INVALID")
    field( FVSV, "INVALID")
    field( SXSV, "INVALID")
    field( SVSV, "INVALID")
    field( EISV, "INVALID")
    field( NISV, "INVALID")
    field( TESV, "INVALID")
    field( ELSV, "INVALID")
    field( TVSV, "INVALID")
    field( TTSV, "INVALID")
    field( FTSV, "INVALID")
    field( FFSV, "INVALID")
    field( UNSV, "INVALID")
}

record(bo, "$(P)$(R=)$(S=:)SoftSeq2-Commit-Cmd") {
    field( DTYP, "Obj Prop command")
    field( DESC, "Commit EVG Sequence")
    field( OUT,  "@OBJ=$(OBJ):SEQ2, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=COMMIT")
    field( VAL,  "1")
    field( UDF,  "0")
    field( ZNAM, "Commit")
    field( ONAM, "Commit")
}

record(bo, "$(P)$(R=)$(S=:)SoftSeq2-Load-Cmd") {
    field( DTYP, "Obj Prop command")
    field( DESC, "ALLOC EVG Sequence")
    field( OUT,  "@OBJ=$(OBJ):SEQ2, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=LOAD")
    field( VAL,  "1")
    field( UDF,  "0")
    field( ZNAM, "0")
    field( ONAM, "1")
}

record(bo, "$(P)$(R=)$(S=:)SoftSeq2-Unload-Cmd") {
    field( DTYP, "Obj Prop command")
    field( DESC, "Dealloc EVG Sequence")
    field( OUT,  "@OBJ=$(OBJ):SEQ2, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=UNLOAD")
    field( VAL,  "0")
    field( UDF,  "0")
    field( ZNAM, "0")
    field( ONAM, "1")
}

record(bo, "$(P)$(R=)$(S=:)SoftSeq2-Enable-Cmd") {
    field( DTYP, "Obj Prop command")
    field( DESC, "Enable EVG Sequence")
    field( OUT,  "@OBJ=$(OBJ):SEQ2, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=ENABLE")
    field( VAL,  "1")
    field( UDF,  "0")
    field( ZNAM, "0")
    field( ONAM, "1")
    field( FLNK, "$(P)$(R=)$(S=:)SoftSeq2-Enable-RB")
    field( ASG , "")
}

record(bo, "$(P)$(R=)$(S=:)SoftSeq2-Disable-Cmd") {
    field( DTYP, "Obj Prop command")
    field( DESC, "Disable EVG Sequence")
    field( OUT,  "@OBJ=$(OBJ):SEQ2, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=DISABLE")
    field( VAL,  "0")
    field( UDF,  "0")
    field( ZNAM, "0")
    field( ONAM, "1")
    field( ASG , "")
}

record(bo, "$(P)$(R=)$(S=:)SoftSeq2-SoftTrig-Cmd") {
    field( DTYP, "Obj Prop command")
    field( DESC, "Sequence RAM soft trigger")
    field( OUT,  "@OBJ=$(OBJ):SEQ2, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=SOFT_TRIG")
    field( VAL,  "0")
    field( UDF,  "0")
    field( ZNAM, "0")
    field( ONAM, "1")
}

record(bi, "$(P)$(R=)$(S=:)SoftSeq2-Load-RB") {
    field( DTYP, "Obj Prop bool")
    field( DESC, "Soft Seq Load status")
    field( INP,  "@OBJ=$(OBJ):SEQ2, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=LOADED")
    field( SCAN, "I/O Intr")
    field( ZNAM, "Unloaded")
    field( ONAM, "Loaded")
    info( autosaveFields_pass0, "VAL")
}

record(bi, "$(P)$(R=)$(S=:)SoftSeq2-Commit-RB") {
    field( DTYP, "Obj Prop bool")
    field( DESC, "Soft Seq Commit status")
    field( INP,  "@OBJ=$(OBJ):SEQ2, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=COMMITTED")
    field( SCAN, "I/O Intr")    
    field( ZNAM, "Uncommitted")
    field( ONAM, "Committed")
    info( autosaveFields_pass0, "VAL")
}

record(bi, "$(P)$(R=)$(S=:)SoftSeq2-Enable-Sts") {
    field( DTYP, "Obj Prop bool")
    field( DESC, "Soft Seq Ena status")
    field( INP,  "@OBJ=$(OBJ):SEQ2, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=ENABLED")
    field( SCAN, "I/O Intr")    
    field( ZNAM, "Disabled")
    field( ONAM, "Enabled")
    field( FLNK, "")
    info( autosaveFields_pass0, "VAL")
    alias("$(P)$(R=)$(S=:)SoftSeq2-Enable-RB")
}

record(stringin, "$(P)$(R=)$(S=:)SoftSeq2-Error-RB") {
    field( DTYP, "Obj Prop string")
    field( DESC, "Sequence error msg.")
    field( INP,  "@OBJ=$(OBJ):SEQ2, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=ERROR")
    field( SCAN, "I/O Intr")
}

record(longin, "$(P)$(R=)$(S=:)SoftSeq2-NumOfStarts-I") {
    field( DTYP, "Obj Prop uint32")
    field( DESC, "# times soft sequence starts")
    field( INP , "@OBJ=$(OBJ):SEQ2, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=NUM_STARTS")
    field( SCAN, "I/O Intr") # on sequencer start
    field( FLNK, "")
}

record(longin, "$(P)$(R=)$(S=:)SoftSeq2-NumOfRuns-I") {
    field( DTYP, "Obj Prop uint32")
    field( DESC, "# times soft sequence ran")
    field( INP,  "@OBJ=$(OBJ):SEQ2, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=NUM_RUNS")
    field( SCAN, "I/O Intr") # on sequencer stop
}

#
#Process Load-Cmd record if the sequence  was perviously in LOADED state
#

record(calcout, "$(P)$(R=)$(S=:)SoftSeq2-Load-Calc_") {
    field( CALC, "A")
    field( INPA, "$(P)$(R=)$(S=:)SoftSeq2-Load-RB NPP NMS")
    field( OOPT, "When Non-zero")
    field( OUT,  "$(P)$(R=)$(S=:)SoftSeq2-Load-Cmd PP")
}

#
#Process Commit-Cmd record if the sequence was perviously in COMMITTED state
#

record(calcout, "$(P)$(R=)$(S=:)SoftSeq2-Commit-Calc_") {
    field( CALC, "A")
    field( INPA, "$(P)$(R=)$(S=:)SoftSeq2-Commit-RB NPP NMS")
    field( OOPT, "When Non-zero")
    field( OUT,  "$(P)$(R=)$(S=:)SoftSeq2-Commit-Cmd PP")
}

#
#Process Enable-Cmd record if the sequence was perviously in ENABLED state
#

record(calcout, "$(P)$(R=)$(S=:)SoftSeq2-Enable-Calc_") {
    field( CALC, "A")
    field( INPA, "$(P)$(R=)$(S=:)SoftSeq2-Enable-RB NPP NMS")
    field( OOPT, "When Non-zero")
    field( OUT,  "$(P)$(R=)$(S=:)SoftSeq2-Enable-Cmd PP")
}

record(fanout, "$(P)$(R=)$(S=:)SoftSeq2-InitSeq-FOut_") {
    field( DESC, "Boot of sequence for sequencer")
    field( SELM, "All")
    field( PINI, "RUNNING")
    field( LNK1, "")
    field( LNK2, "$(P)$(R=)$(S=:)SoftSeq2-TsResolution-Sel")
    field( LNK3, "$(P)$(R=)$(S=:)SoftSeq2-EvtCode-SP")
    field( LNK4, "$(P)$(R=)$(S=:)SoftSeq2-Timestamp-SP")
    field( LNK5, "$(P)$(R=)$(S=:)SoftSeq2-RunMode-Sel")
    field( LNK6, "$(P)$(R=)$(S=:)SoftSeq2-InitSeq-Cont-FOut_")
}

record(fanout, "$(P)$(R=)$(S=:)SoftSeq2-InitSeq-Cont-FOut_") {
    field( DESC, "Boot of sequence for sequencer")
    field( SELM, "All")
    field( LNK1, "$(P)$(R=)$(S=:)SoftSeq2-TrigSrc-Init-FOut_")
    field( LNK2, "$(P)$(R=)$(S=:)SoftSeq2-Commit-Calc_")
    field( LNK3, "$(P)$(R=)$(S=:)SoftSeq2-Load-Calc_")
    field( LNK4, "$(P)$(R=)$(S=:)SoftSeq2-Enable-Calc_")
}

record(waveform, "$(P)$(R=)$(S=:)SoftSeq2-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}

# EVR sequencer trigger sources in DC firmware
# 0-31  DlyGen
# 32-39 DBus
# 40-47 Prescalars
# 61 - SW
# 62 - Continuous
# 63 - Disable

# linked from mrmSoftSeq.template
# $ (PINITSEQ)Cont-FOut_
record(fanout, "$(P)$(R=)$(S=:)SoftSeq0-TrigSrc-Init-FOut_") {
    field( LNK1, "$(P)$(R=)$(S=:)SoftSeq0-TrigSrc-Sel_")
}

record(mbbo, "$(P)$(R=)$(S=:)SoftSeq0-TrigSrc-Pulse-Sel") {
    field( DTYP, "Raw Soft Channel")
    field( OUT , "$(P)$(R=)$(S=:)SoftSeq0-TrigSrc-Sel_ PP")
    field( ZRST, "Pulser 0")
    field( ONST, "Pulser 1")
    field( TWST, "Pulser 2")
    field( THST, "Pulser 3")
    field( FRST, "Pulser 4")
    field( FVST, "Pulser 5")
    field( SXST, "Pulser 6")
    field( SVST, "Pulser 7")
    field( EIST, "Pulser 8")
    field( NIST, "Pulser 9")
    field( TEST, "Pulser 10")
    field( ELST, "Pulser 11")
    field( TVST, "Pulser 12")
    field( TTST, "Pulser 13")
    field( FTST, "Pulser 14")
    field( FFST, "Pulser 15")
    field( ZRVL, "0")
    field( ONVL, "1")
    field( TWVL, "2")
    field( THVL, "3")
    field( FRVL, "4")
    field( FVVL, "5")
    field( SXVL, "6")
    field( SVVL, "7")
    field( EIVL, "8")
    field( NIVL, "9")
    field( TEVL, "10")
    field( ELVL, "11")
    field( TVVL, "12")
    field( TTVL, "13")
    field( FTVL, "14")
    field( FFVL, "15")
    info( autosaveFields_pass0, "VAL")
    alias("$(P)$(R=)$(S=:)SoftSeq0-TrigSrc-0-Sel")
}

record(mbbo, "$(P)$(R=)$(S=:)SoftSeq0-TrigSrc-DBus-Sel") {
    field( DTYP, "Raw Soft Channel")
    field( OUT , "$(P)$(R=)$(S=:)SoftSeq0-TrigSrc-Sel_ PP")
    field( ZRST, "DBus0")
    field( ONST, "DBus1")
    field( TWST, "DBus2")
    field( THST, "DBus3")
    field( FRST, "DBus4")
    field( FVST, "DBus5")
    field( SXST, "DBus6")
    field( SVST, "DBus7")
    field( ZRVL, "32")
    field( ONVL, "33")
    field( TWVL, "34")
    field( THVL, "35")
    field( FRVL, "36")
    field( FVVL, "37")
    field( SXVL, "38")
    field( SVVL, "39")
    info( autosaveFields_pass0, "VAL")
    alias("$(P)$(R=)$(S=:)SoftSeq0-TrigSrc-1-Sel")
}

record(mbbo, "$(P)$(R=)$(S=:)SoftSeq0-TrigSrc-Scale-Sel") {
    field( DTYP, "Raw Soft Channel")
    field( OUT , "$(P)$(R=)$(S=:)SoftSeq0-TrigSrc-Sel_ PP")
    field( ZRST, "None")
    field( ONST, "Software")
    field( TWST, "Prescaler 0")
    field( THST, "Prescaler 1")
    field( FRST, "Prescaler 2")
    field( FVST, "Prescaler 3")
    field( SXST, "Prescaler 4")
    field( SVST, "Prescaler 5")
    field( EIST, "Prescaler 6")
    field( NIST, "Prescaler 7")
    field( ZRVL, "0x03000000")
    field( ONVL, "0x01000000")
    field( TWVL, "40")
    field( THVL, "41")
    field( FRVL, "42")
    field( FVVL, "43")
    field( SXVL, "44")
    field( SVVL, "45")
    field( EIVL, "46")
    field( NIVL, "47")
    info( autosaveFields_pass0, "VAL")
    alias("$(P)$(R=)$(S=:)SoftSeq0-TrigSrc-2-Sel")
}

record(longout, "$(P)$(R=)$(S=:)SoftSeq0-TrigSrc-Sel_") {
    field( DTYP, "Obj Prop uint32")
    field( OUT , "@OBJ=$(OBJ):SEQ0, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=TRIG_SRC")
    field( VAL , "0x03000000") # default to None
    info( autosaveFields_pass0, "VAL")
}

record(longin, "$(P)$(R=)$(S=:)SoftSeq0-TrigSrc-RB_") {
    field( DTYP, "Obj Prop uint32")
    field( INP , "@OBJ=$(OBJ):SEQ0, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=TRIG_SRC")
    field( UDF,  "0")
    field( SCAN, "I/O Intr")
    field( FLNK, "$(P)$(R=)$(S=:)SoftSeq0-TrigSrc-RB")
}

record(stringin, "$(P)$(R=)$(S=:)SoftSeq0-TrigSrc-RB") {
  field( DTYP, "LUT uint32 -> string")
  field(  INP, "$(P)$(R=)$(S=:)SoftSeq0-TrigSrc-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 32 = DBus 0")
  info(lutH , " 33 = DBus 1")
  info(lutI , " 34 = DBus 2")
  info(lutJ , " 35 = DBus 3")
  info(lutK , " 36 = DBus 4")
  info(lutL , " 37 = DBus 5")
  info(lutM , " 38 = DBus 6")
  info(lutN , " 39 = DBus 7")
  info(lutO , " 40 = Prescaler 0")
  info(lutP , " 41 = Prescaler 1")
  info(lutQ , " 42 = Prescaler 2")
  info(lutR , " 43 = Prescaler 3")
  info(lutS , " 44 = Prescaler 4")
  info(lutT , " 45 = Prescaler 5")
  info(lutU , " 46 = Prescaler 6")
  info(lutV , " 47 = Prescaler 7")
  info(lutW , " 0x01000000 = Software")
  info(lutY , " 0x03000000 = None")
}


#
# When Evt Clock Frequency changes, Sequencer Timestamp changes
#(only if TsInpMode = EGU).
#
#record(ai, "$(P)$(R=)$(S=:)SoftSeq0-EvtClkFreq-RB_") {
#    field( INP,  "$(P)$(R=)$(S=:)EvtClk-Frequency-RB CP")
#    field( FLNK, "$(P)$(R=)$(S=:)SoftSeq0-EvtClkFreq-Cont-RB_")
#}
#
#record(ao, "$(P)$(R=)$(S=:)SoftSeq0-EvtClkFreq-Cont-RB_") {
#    field( OUT,  "$(P)$(R=)$(S=:)SoftSeq0-Timestamp-RB.PROC")
#    field( VAL,  "1")
#}

# EVR sequencer trigger sources in DC firmware
# 0-31  DlyGen
# 32-39 DBus
# 40-47 Prescalars
# 61 - SW
# 62 - Continuous
# 63 - Disable

# linked from mrmSoftSeq.template
# $ (PINITSEQ)Cont-FOut_
record(fanout, "$(P)$(R=)$(S=:)SoftSeq1-TrigSrc-Init-FOut_") {
    field( LNK1, "$(P)$(R=)$(S=:)SoftSeq1-TrigSrc-Sel_")
}

record(mbbo, "$(P)$(R=)$(S=:)SoftSeq1-TrigSrc-Pulse-Sel") {
    field( DTYP, "Raw Soft Channel")
    field( OUT , "$(P)$(R=)$(S=:)SoftSeq1-TrigSrc-Sel_ PP")
    field( ZRST, "Pulser 0")
    field( ONST, "Pulser 1")
    field( TWST, "Pulser 2")
    field( THST, "Pulser 3")
    field( FRST, "Pulser 4")
    field( FVST, "Pulser 5")
    field( SXST, "Pulser 6")
    field( SVST, "Pulser 7")
    field( EIST, "Pulser 8")
    field( NIST, "Pulser 9")
    field( TEST, "Pulser 10")
    field( ELST, "Pulser 11")
    field( TVST, "Pulser 12")
    field( TTST, "Pulser 13")
    field( FTST, "Pulser 14")
    field( FFST, "Pulser 15")
    field( ZRVL, "0")
    field( ONVL, "1")
    field( TWVL, "2")
    field( THVL, "3")
    field( FRVL, "4")
    field( FVVL, "5")
    field( SXVL, "6")
    field( SVVL, "7")
    field( EIVL, "8")
    field( NIVL, "9")
    field( TEVL, "10")
    field( ELVL, "11")
    field( TVVL, "12")
    field( TTVL, "13")
    field( FTVL, "14")
    field( FFVL, "15")
    info( autosaveFields_pass0, "VAL")
    alias("$(P)$(R=)$(S=:)SoftSeq1-TrigSrc-0-Sel")
}

record(mbbo, "$(P)$(R=)$(S=:)SoftSeq1-TrigSrc-DBus-Sel") {
    field( DTYP, "Raw Soft Channel")
    field( OUT , "$(P)$(R=)$(S=:)SoftSeq1-TrigSrc-Sel_ PP")
    field( ZRST, "DBus0")
    field( ONST, "DBus1")
    field( TWST, "DBus2")
    field( THST, "DBus3")
    field( FRST, "DBus4")
    field( FVST, "DBus5")
    field( SXST, "DBus6")
    field( SVST, "DBus7")
    field( ZRVL, "32")
    field( ONVL, "33")
    field( TWVL, "34")
    field( THVL, "35")
    field( FRVL, "36")
    field( FVVL, "37")
    field( SXVL, "38")
    field( SVVL, "39")
    info( autosaveFields_pass0, "VAL")
    alias("$(P)$(R=)$(S=:)SoftSeq1-TrigSrc-1-Sel")
}

record(mbbo, "$(P)$(R=)$(S=:)SoftSeq1-TrigSrc-Scale-Sel") {
    field( DTYP, "Raw Soft Channel")
    field( OUT , "$(P)$(R=)$(S=:)SoftSeq1-TrigSrc-Sel_ PP")
    field( ZRST, "None")
    field( ONST, "Software")
    field( TWST, "Prescaler 0")
    field( THST, "Prescaler 1")
    field( FRST, "Prescaler 2")
    field( FVST, "Prescaler 3")
    field( SXST, "Prescaler 4")
    field( SVST, "Prescaler 5")
    field( EIST, "Prescaler 6")
    field( NIST, "Prescaler 7")
    field( ZRVL, "0x03000000")
    field( ONVL, "0x01000000")
    field( TWVL, "40")
    field( THVL, "41")
    field( FRVL, "42")
    field( FVVL, "43")
    field( SXVL, "44")
    field( SVVL, "45")
    field( EIVL, "46")
    field( NIVL, "47")
    info( autosaveFields_pass0, "VAL")
    alias("$(P)$(R=)$(S=:)SoftSeq1-TrigSrc-2-Sel")
}

record(longout, "$(P)$(R=)$(S=:)SoftSeq1-TrigSrc-Sel_") {
    field( DTYP, "Obj Prop uint32")
    field( OUT , "@OBJ=$(OBJ):SEQ1, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=TRIG_SRC")
    field( VAL , "0x03000000") # default to None
    info( autosaveFields_pass0, "VAL")
}

record(longin, "$(P)$(R=)$(S=:)SoftSeq1-TrigSrc-RB_") {
    field( DTYP, "Obj Prop uint32")
    field( INP , "@OBJ=$(OBJ):SEQ1, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=TRIG_SRC")
    field( UDF,  "0")
    field( SCAN, "I/O Intr")
    field( FLNK, "$(P)$(R=)$(S=:)SoftSeq1-TrigSrc-RB")
}

record(stringin, "$(P)$(R=)$(S=:)SoftSeq1-TrigSrc-RB") {
  field( DTYP, "LUT uint32 -> string")
  field(  INP, "$(P)$(R=)$(S=:)SoftSeq1-TrigSrc-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 32 = DBus 0")
  info(lutH , " 33 = DBus 1")
  info(lutI , " 34 = DBus 2")
  info(lutJ , " 35 = DBus 3")
  info(lutK , " 36 = DBus 4")
  info(lutL , " 37 = DBus 5")
  info(lutM , " 38 = DBus 6")
  info(lutN , " 39 = DBus 7")
  info(lutO , " 40 = Prescaler 0")
  info(lutP , " 41 = Prescaler 1")
  info(lutQ , " 42 = Prescaler 2")
  info(lutR , " 43 = Prescaler 3")
  info(lutS , " 44 = Prescaler 4")
  info(lutT , " 45 = Prescaler 5")
  info(lutU , " 46 = Prescaler 6")
  info(lutV , " 47 = Prescaler 7")
  info(lutW , " 0x01000000 = Software")
  info(lutY , " 0x03000000 = None")
}


#
# When Evt Clock Frequency changes, Sequencer Timestamp changes
#(only if TsInpMode = EGU).
#
#record(ai, "$(P)$(R=)$(S=:)SoftSeq1-EvtClkFreq-RB_") {
#    field( INP,  "$(P)$(R=)$(S=:)EvtClk-Frequency-RB CP")
#    field( FLNK, "$(P)$(R=)$(S=:)SoftSeq1-EvtClkFreq-Cont-RB_")
#}
#
#record(ao, "$(P)$(R=)$(S=:)SoftSeq1-EvtClkFreq-Cont-RB_") {
#    field( OUT,  "$(P)$(R=)$(S=:)SoftSeq1-Timestamp-RB.PROC")
#    field( VAL,  "1")
#}

# EVR sequencer trigger sources in DC firmware
# 0-31  DlyGen
# 32-39 DBus
# 40-47 Prescalars
# 61 - SW
# 62 - Continuous
# 63 - Disable

# linked from mrmSoftSeq.template
# $ (PINITSEQ)Cont-FOut_
record(fanout, "$(P)$(R=)$(S=:)SoftSeq2-TrigSrc-Init-FOut_") {
    field( LNK1, "$(P)$(R=)$(S=:)SoftSeq2-TrigSrc-Sel_")
}

record(mbbo, "$(P)$(R=)$(S=:)SoftSeq2-TrigSrc-Pulse-Sel") {
    field( DTYP, "Raw Soft Channel")
    field( OUT , "$(P)$(R=)$(S=:)SoftSeq2-TrigSrc-Sel_ PP")
    field( ZRST, "Pulser 0")
    field( ONST, "Pulser 1")
    field( TWST, "Pulser 2")
    field( THST, "Pulser 3")
    field( FRST, "Pulser 4")
    field( FVST, "Pulser 5")
    field( SXST, "Pulser 6")
    field( SVST, "Pulser 7")
    field( EIST, "Pulser 8")
    field( NIST, "Pulser 9")
    field( TEST, "Pulser 10")
    field( ELST, "Pulser 11")
    field( TVST, "Pulser 12")
    field( TTST, "Pulser 13")
    field( FTST, "Pulser 14")
    field( FFST, "Pulser 15")
    field( ZRVL, "0")
    field( ONVL, "1")
    field( TWVL, "2")
    field( THVL, "3")
    field( FRVL, "4")
    field( FVVL, "5")
    field( SXVL, "6")
    field( SVVL, "7")
    field( EIVL, "8")
    field( NIVL, "9")
    field( TEVL, "10")
    field( ELVL, "11")
    field( TVVL, "12")
    field( TTVL, "13")
    field( FTVL, "14")
    field( FFVL, "15")
    info( autosaveFields_pass0, "VAL")
    alias("$(P)$(R=)$(S=:)SoftSeq2-TrigSrc-0-Sel")
}

record(mbbo, "$(P)$(R=)$(S=:)SoftSeq2-TrigSrc-DBus-Sel") {
    field( DTYP, "Raw Soft Channel")
    field( OUT , "$(P)$(R=)$(S=:)SoftSeq2-TrigSrc-Sel_ PP")
    field( ZRST, "DBus0")
    field( ONST, "DBus1")
    field( TWST, "DBus2")
    field( THST, "DBus3")
    field( FRST, "DBus4")
    field( FVST, "DBus5")
    field( SXST, "DBus6")
    field( SVST, "DBus7")
    field( ZRVL, "32")
    field( ONVL, "33")
    field( TWVL, "34")
    field( THVL, "35")
    field( FRVL, "36")
    field( FVVL, "37")
    field( SXVL, "38")
    field( SVVL, "39")
    info( autosaveFields_pass0, "VAL")
    alias("$(P)$(R=)$(S=:)SoftSeq2-TrigSrc-1-Sel")
}

record(mbbo, "$(P)$(R=)$(S=:)SoftSeq2-TrigSrc-Scale-Sel") {
    field( DTYP, "Raw Soft Channel")
    field( OUT , "$(P)$(R=)$(S=:)SoftSeq2-TrigSrc-Sel_ PP")
    field( ZRST, "None")
    field( ONST, "Software")
    field( TWST, "Prescaler 0")
    field( THST, "Prescaler 1")
    field( FRST, "Prescaler 2")
    field( FVST, "Prescaler 3")
    field( SXST, "Prescaler 4")
    field( SVST, "Prescaler 5")
    field( EIST, "Prescaler 6")
    field( NIST, "Prescaler 7")
    field( ZRVL, "0x03000000")
    field( ONVL, "0x01000000")
    field( TWVL, "40")
    field( THVL, "41")
    field( FRVL, "42")
    field( FVVL, "43")
    field( SXVL, "44")
    field( SVVL, "45")
    field( EIVL, "46")
    field( NIVL, "47")
    info( autosaveFields_pass0, "VAL")
    alias("$(P)$(R=)$(S=:)SoftSeq2-TrigSrc-2-Sel")
}

record(longout, "$(P)$(R=)$(S=:)SoftSeq2-TrigSrc-Sel_") {
    field( DTYP, "Obj Prop uint32")
    field( OUT , "@OBJ=$(OBJ):SEQ2, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=TRIG_SRC")
    field( VAL , "0x03000000") # default to None
    info( autosaveFields_pass0, "VAL")
}

record(longin, "$(P)$(R=)$(S=:)SoftSeq2-TrigSrc-RB_") {
    field( DTYP, "Obj Prop uint32")
    field( INP , "@OBJ=$(OBJ):SEQ2, CLASS=SeqManager, PARENT=$(OBJ):SEQMGR, PROP=TRIG_SRC")
    field( UDF,  "0")
    field( SCAN, "I/O Intr")
    field( FLNK, "$(P)$(R=)$(S=:)SoftSeq2-TrigSrc-RB")
}

record(stringin, "$(P)$(R=)$(S=:)SoftSeq2-TrigSrc-RB") {
  field( DTYP, "LUT uint32 -> string")
  field(  INP, "$(P)$(R=)$(S=:)SoftSeq2-TrigSrc-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 32 = DBus 0")
  info(lutH , " 33 = DBus 1")
  info(lutI , " 34 = DBus 2")
  info(lutJ , " 35 = DBus 3")
  info(lutK , " 36 = DBus 4")
  info(lutL , " 37 = DBus 5")
  info(lutM , " 38 = DBus 6")
  info(lutN , " 39 = DBus 7")
  info(lutO , " 40 = Prescaler 0")
  info(lutP , " 41 = Prescaler 1")
  info(lutQ , " 42 = Prescaler 2")
  info(lutR , " 43 = Prescaler 3")
  info(lutS , " 44 = Prescaler 4")
  info(lutT , " 45 = Prescaler 5")
  info(lutU , " 46 = Prescaler 6")
  info(lutV , " 47 = Prescaler 7")
  info(lutW , " 0x01000000 = Software")
  info(lutY , " 0x03000000 = None")
}


#
# When Evt Clock Frequency changes, Sequencer Timestamp changes
#(only if TsInpMode = EGU).
#
#record(ai, "$(P)$(R=)$(S=:)SoftSeq2-EvtClkFreq-RB_") {
#    field( INP,  "$(P)$(R=)$(S=:)EvtClk-Frequency-RB CP")
#    field( FLNK, "$(P)$(R=)$(S=:)SoftSeq2-EvtClkFreq-Cont-RB_")
#}
#
#record(ao, "$(P)$(R=)$(S=:)SoftSeq2-EvtClkFreq-Cont-RB_") {
#    field( OUT,  "$(P)$(R=)$(S=:)SoftSeq2-Timestamp-RB.PROC")
#    field( VAL,  "1")
#}

record(bo, "$(P)$(R=)$(S=:)SFP-Update-Cmd") {
  field(DTYP, "Obj Prop bool")
  field(SCAN, "10 second")
  field(OUT , "@OBJ=$(OBJ):SFP, PROP=Update")
  field(ZNAM, "Update")
  field(ONAM, "Update")
  field(FLNK, "$(P)$(R=)$(S=:)SFP-T-I")
}

record(ai, "$(P)$(R=)$(S=:)SFP-T-I") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):SFP, PROP=Temperature")
  field(DESC, "Tranceiver Temperature")
  field(ADEL, "0.5")
  field(HIGH, "50")
  field(HSV , "MINOR")
  field(HIHI, "60")
  field(HHSV, "MAJOR")
  field(LOW , "0")
  field(LSV , "INVALID")
  field(EGU , "C")
  field(PREC, "1")
  field(FLNK, "$(P)$(R=)$(S=:)SFP-Pwr-TX-I")
}

record(ai, "$(P)$(R=)$(S=:)SFP-Pwr-TX-I") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):SFP, PROP=Power TX")
  field(DESC, "Tranceiver Output Power")
  field(ADEL, "5")
  field(HIGH, "600")
  field(HSV , "MINOR")
  field(LOW , "200")
  field(LSV , "MAJOR")
  field(LOLO, "-0.1") # SFP module removed
  field(LLSV, "INVALID")
  field(EGU , "uW")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "1")
  field(FLNK, "$(P)$(R=)$(S=:)SFP-Pwr-RX-I")
  info(autosaveFields_pass0, "LOW")
}

record(ai, "$(P)$(R=)$(S=:)SFP-Pwr-RX-I") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):SFP, PROP=Power RX")
  field(DESC, "Tranceiver Input Power")
  field(ADEL, "5")
  field(HIGH, "600")
  field(HSV , "MINOR")
  field(LOW , "100")
  field(LSV , "MAJOR")
  field(LOLO, "-0.1") # SFP module removed
  field(LLSV, "INVALID")
  field(EGU , "uW")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "1")
  field(FLNK, "$(P)$(R=)$(S=:)SFP-Speed-Link-I")
  info(autosaveFields_pass0, "LOW")
}

record(ai, "$(P)$(R=)$(S=:)SFP-Speed-Link-I") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):SFP, PROP=Link Speed")
  field(DESC, "Tranceiver Line Rate")
  field(HIGH, "5000")
  field(HSV , "MAJOR")
  field(LOW , "3000")
  field(LSV , "MAJOR")
  field(LOLO, "-0.1")
  field(LLSV, "INVALID")
  field(EGU , "Mb/s")
  field(PREC, "0")
  field(FLNK, "$(P)$(R=)$(S=:)SFP-Vendor-I")
}

record(stringin, "$(P)$(R=)$(S=:)SFP-Vendor-I") {
  field(DTYP, "Obj Prop string")
  field(DESC, "Vendor name")
  field(INP , "@OBJ=$(OBJ):SFP, PROP=Vendor")
  field(FLNK, "$(P)$(R=)$(S=:)SFP-Part-I")
}

record(stringin, "$(P)$(R=)$(S=:)SFP-Part-I") {
  field(DTYP, "Obj Prop string")
  field(DESC, "Vendor part number")
  field(INP , "@OBJ=$(OBJ):SFP, PROP=Part")
  field(FLNK, "$(P)$(R=)$(S=:)SFP-Rev-I")
}

record(stringin, "$(P)$(R=)$(S=:)SFP-Rev-I") {
  field(DTYP, "Obj Prop string")
  field(DESC, "Vendor part revision")
  field(INP , "@OBJ=$(OBJ):SFP, PROP=Rev")
  field(FLNK, "$(P)$(R=)$(S=:)SFP-Serial-I")
}

record(stringin, "$(P)$(R=)$(S=:)SFP-Serial-I") {
  field(DTYP, "Obj Prop string")
  field(DESC, "SFP serial number")
  field(INP , "@OBJ=$(OBJ):SFP, PROP=Serial")
  field(FLNK, "$(P)$(R=)$(S=:)SFP-Date-Manu-I")
}

record(stringin, "$(P)$(R=)$(S=:)SFP-Date-Manu-I") {
  field(DTYP, "Obj Prop string")
  field(DESC, "Manufactored date")
  field(INP , "@OBJ=$(OBJ):SFP, PROP=Date")
}
# Delay Compensation control/status

record(bo, "$(P)$(R=)$(S=:)DC-Ena-Sel") {
    field(DESC, "Apply DC correction")
    field(DTYP, "Obj Prop bool")
    field( OUT, "@OBJ=$(OBJ), PROP=DCEnable")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(PINI, "YES")
    field(PHAS, "1") # after Tgt-SP
    field(FLNK, "$(P)$(R=)$(S=:)DC-Ena-RB")
    info(autosaveFields_pass0, "VAL")
}
record(bi, "$(P)$(R=)$(S=:)DC-Ena-RB") {
    field(DESC, "Apply DC correction")
    field(DTYP, "Obj Prop bool")
    field( INP, "@OBJ=$(OBJ), PROP=DCEnable")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
}

record(ao, "$(P)$(R=)$(S=:)DC-Tgt-SP") {
    field(DESC, "Desired total delay")
    field(DTYP, "Obj Prop double")
    field( OUT, "@OBJ=$(OBJ), PROP=DCTarget")
    field( EGU, "ns")
    # a too small value will cause glitches and dropped events.
    # so we pick a conservative default suitable for the slowest 50MHz clock
    field( VAL, "110")
    field(PREC, "3")
    field(PINI, "YES")
    field(FLNK, "$(P)$(R=)$(S=:)DC-Tgt-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO HOPR LOPR DRVH DRVL PREC")
}
record(ai, "$(P)$(R=)$(S=:)DC-Tgt-RB") {
    field(DESC, "Desired total delay")
    field(DTYP, "Obj Prop double")
    field( INP, "@OBJ=$(OBJ), PROP=DCTarget")
    field( EGU, "ns")
    field(PREC, "3")
    info(autosaveFields_pass0, "EGU ESLO HOPR LOPR PREC")
}

record(ai, "$(P)$(R=)$(S=:)DC-Msrd-I") {
    field(DESC, "Measured total delay")
    field(DTYP, "Obj Prop double")
    field( INP, "@OBJ=$(OBJ), PROP=DCRx")
    field( EGU, "ns")
    field(PREC, "3")
    field(SCAN, "1 second")
    field(FLNK, "$(P)$(R=)$(S=:)DC-Corr-I")
    info(autosaveFields_pass0, "EGU ESLO HOPR LOPR PREC")
}
record(ai, "$(P)$(R=)$(S=:)DC-Corr-I") {
    field(DESC, "delay correction")
    field(DTYP, "Obj Prop double")
    field( INP, "@OBJ=$(OBJ), PROP=DCInt")
    field( EGU, "ns")
    field(PREC, "3")
    field(FLNK, "$(P)$(R=)$(S=:)DC-Lck-Sts")
    info(autosaveFields_pass0, "EGU ESLO HOPR LOPR PREC")
}
record(bi, "$(P)$(R=)$(S=:)DC-Lck-Sts") {
    field(DTYP, "Obj Prop uint32")
    field( INP, "@OBJ=$(OBJ), PROP=DCStatusRaw")
    field(MASK, "1")
    field(ZSV , "MAJOR")
    field(ZNAM, "Unlocked")
    field(ONAM, "Locked")
    field(FLNK, "$(P)$(R=)$(S=:)DC-LckTrk-Sts")
}
record(mbbi, "$(P)$(R=)$(S=:)DC-LckTrk-Sts") {
    field(DESC, "DC loop tracking")
    field(DTYP, "Obj Prop uint32")
    field( INP, "@OBJ=$(OBJ), PROP=DCStatusRaw")
    field(MASK, "0xc")
    field(SHFT, "2")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(THVL, "3")
    field(ZRST, "Lock")
    field(ONST, "Short")
    field(TWST, "Long")
    field(THST, "Invalid")
    field(ONSV, "MAJOR")
    field(TWSV, "MAJOR")
    field(THSV, "INVALID")
    field(FLNK, "$(P)$(R=)$(S=:)DC-LckDat-Sts")
}
record(mbbi, "$(P)$(R=)$(S=:)DC-LckDat-Sts") {
    field(DESC, "DC data from master?")
    field(DTYP, "Obj Prop uint32")
    field( INP, "@OBJ=$(OBJ), PROP=DCStatusRaw")
    field(MASK, "0x300")
    field(SHFT, "8")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(THVL, "3")
    field(ZRST, "No Mstr")
    field(ONST, "Coarse")
    field(TWST, "Invalid")
    field(THST, "Fine")
    field(ZRSV, "MAJOR")
    field(ONSV, "MINOR")
    field(TWSV, "INVALID")
    field(FLNK, "$(P)$(R=)$(S=:)DC-ID-I")
}
record(longin, "$(P)$(R=)$(S=:)DC-ID-I") {
    field(DESC, "Topology ID")
    field(DTYP, "Obj Prop uint32")
    field( INP, "@OBJ=$(OBJ), PROP=DCTOPID")
}
# Control for mapping a function to an event code in hardware
#
# Macros:
#  NAME = record name
#  OBJ = EVR devObj name
#  func = Function to be mapped
#    Choices are: "FIFO", "Latch TS", "Blink", "Forward",
#                 "Stop Log", "Log", "Heartbeat", "Reset PS",
#                 "TS reset", "TS tick", "Shift 1", "Shift 0",
#

record(longout, "$(P)$(R=)$(S=:)Evt-Blink0-SP") {
  field( DTYP, "EVR Mapping" )
  field( OUT , "@OBJ=$(OBJ), Func=Blink")
  field( PINI, "YES")
  field( DESC, "Mapping for Blink")
  field( VAL , "15")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "OUT VAL")
}
# Control for mapping a function to an event code in hardware
#
# Macros:
#  NAME = record name
#  OBJ = EVR devObj name
#  func = Function to be mapped
#    Choices are: "FIFO", "Latch TS", "Blink", "Forward",
#                 "Stop Log", "Log", "Heartbeat", "Reset PS",
#                 "TS reset", "TS tick", "Shift 1", "Shift 0",
#

record(longout, "$(P)$(R=)$(S=:)Evt-Blink1-SP") {
  field( DTYP, "EVR Mapping" )
  field( OUT , "@OBJ=$(OBJ), Func=Blink")
  field( PINI, "YES")
  field( DESC, "Mapping for Blink")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "OUT VAL")
}
# Control for mapping a function to an event code in hardware
#
# Macros:
#  NAME = record name
#  OBJ = EVR devObj name
#  func = Function to be mapped
#    Choices are: "FIFO", "Latch TS", "Blink", "Forward",
#                 "Stop Log", "Log", "Heartbeat", "Reset PS",
#                 "TS reset", "TS tick", "Shift 1", "Shift 0",
#

record(longout, "$(P)$(R=)$(S=:)Evt-ResetPS-SP") {
  field( DTYP, "EVR Mapping" )
  field( OUT , "@OBJ=$(OBJ), Func=Reset PS")
  field( PINI, "YES")
  field( DESC, "Mapping for Reset PS")
  field( VAL , "123")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "OUT VAL")
}
# Mapping between hardware event code and a software database event
#
# Macros:
#  EN = record name prefix
#  OBJ = EVR devObj name
#  CODE = Event code (hardware)
#  EVNT = Database event code (software)
#

# EVT  - Timing hardware event code
# ENUM - EPICS DB event number
record(longout, "$(P)$(R=)$(S=:)1hz-SP") {
  field(DTYP, "EVR Event")
  field(SCAN, "I/O Intr")
  field(OUT , "@OBJ=$(OBJ),Code=0x7d")
  field(VAL , "125")
  field(TSE , "-2") # from device support
  field(FLNK, "$(P)$(R=)$(S=:)1hzCnt-I")
  info(autosaveFields_pass0, "OUT VAL")
}

record(calc, "$(P)$(R=)$(S=:)1hzCnt-I") {
  field(SDIS, "$(P)$(R=)$(S=:)1hz-SP")
  field(DISV, "0")
  field(CALC, "A+1")
  field(INPA, "$(P)$(R=)$(S=:)1hzCnt-I NPP")
  field(TSEL, "$(P)$(R=)$(S=:)1hz-SP.TIME")
}
# Mapping between hardware event code and a software database event
#
# Macros:
#  EN = record name prefix
#  OBJ = EVR devObj name
#  CODE = Event code (hardware)
#  EVNT = Database event code (software)
#

# EVT  - Timing hardware event code
# ENUM - EPICS DB event number
record(longout, "$(P)$(R=)$(S=:)EvtA-SP") {
  field(DTYP, "EVR Event")
  field(SCAN, "I/O Intr")
  field(OUT , "@OBJ=$(OBJ),Code=255")
  field(VAL , "255")
  field(TSE , "-2") # from device support
  field(FLNK, "$(P)$(R=)$(S=:)EvtACnt-I")
  info(autosaveFields_pass0, "OUT VAL")
}

record(calc, "$(P)$(R=)$(S=:)EvtACnt-I") {
  field(SDIS, "$(P)$(R=)$(S=:)EvtA-SP")
  field(DISV, "0")
  field(CALC, "A+1")
  field(INPA, "$(P)$(R=)$(S=:)EvtACnt-I NPP")
  field(TSEL, "$(P)$(R=)$(S=:)EvtA-SP.TIME")
}
# Mapping between hardware event code and a software database event
#
# Macros:
#  EN = record name prefix
#  OBJ = EVR devObj name
#  CODE = Event code (hardware)
#  EVNT = Database event code (software)
#

# EVT  - Timing hardware event code
# ENUM - EPICS DB event number
record(longout, "$(P)$(R=)$(S=:)EvtB-SP") {
  field(DTYP, "EVR Event")
  field(SCAN, "I/O Intr")
  field(OUT , "@OBJ=$(OBJ),Code=255")
  field(VAL , "255")
  field(TSE , "-2") # from device support
  field(FLNK, "$(P)$(R=)$(S=:)EvtBCnt-I")
  info(autosaveFields_pass0, "OUT VAL")
}

record(calc, "$(P)$(R=)$(S=:)EvtBCnt-I") {
  field(SDIS, "$(P)$(R=)$(S=:)EvtB-SP")
  field(DISV, "0")
  field(CALC, "A+1")
  field(INPA, "$(P)$(R=)$(S=:)EvtBCnt-I NPP")
  field(TSEL, "$(P)$(R=)$(S=:)EvtB-SP.TIME")
}
# Mapping between hardware event code and a software database event
#
# Macros:
#  EN = record name prefix
#  OBJ = EVR devObj name
#  CODE = Event code (hardware)
#  EVNT = Database event code (software)
#

# EVT  - Timing hardware event code
# ENUM - EPICS DB event number
record(longout, "$(P)$(R=)$(S=:)EvtC-SP") {
  field(DTYP, "EVR Event")
  field(SCAN, "I/O Intr")
  field(OUT , "@OBJ=$(OBJ),Code=255")
  field(VAL , "255")
  field(TSE , "-2") # from device support
  field(FLNK, "$(P)$(R=)$(S=:)EvtCCnt-I")
  info(autosaveFields_pass0, "OUT VAL")
}

record(calc, "$(P)$(R=)$(S=:)EvtCCnt-I") {
  field(SDIS, "$(P)$(R=)$(S=:)EvtC-SP")
  field(DISV, "0")
  field(CALC, "A+1")
  field(INPA, "$(P)$(R=)$(S=:)EvtCCnt-I NPP")
  field(TSEL, "$(P)$(R=)$(S=:)EvtC-SP.TIME")
}
# Mapping between hardware event code and a software database event
#
# Macros:
#  EN = record name prefix
#  OBJ = EVR devObj name
#  CODE = Event code (hardware)
#  EVNT = Database event code (software)
#

# EVT  - Timing hardware event code
# ENUM - EPICS DB event number
record(longout, "$(P)$(R=)$(S=:)EvtD-SP") {
  field(DTYP, "EVR Event")
  field(SCAN, "I/O Intr")
  field(OUT , "@OBJ=$(OBJ),Code=255")
  field(VAL , "255")
  field(TSE , "-2") # from device support
  field(FLNK, "$(P)$(R=)$(S=:)EvtDCnt-I")
  info(autosaveFields_pass0, "OUT VAL")
}

record(calc, "$(P)$(R=)$(S=:)EvtDCnt-I") {
  field(SDIS, "$(P)$(R=)$(S=:)EvtD-SP")
  field(DISV, "0")
  field(CALC, "A+1")
  field(INPA, "$(P)$(R=)$(S=:)EvtDCnt-I NPP")
  field(TSEL, "$(P)$(R=)$(S=:)EvtD-SP.TIME")
}
# Mapping between hardware event code and a software database event
#
# Macros:
#  EN = record name prefix
#  OBJ = EVR devObj name
#  CODE = Event code (hardware)
#  EVNT = Database event code (software)
#

# EVT  - Timing hardware event code
# ENUM - EPICS DB event number
record(longout, "$(P)$(R=)$(S=:)EvtE-SP") {
  field(DTYP, "EVR Event")
  field(SCAN, "I/O Intr")
  field(OUT , "@OBJ=$(OBJ),Code=255")
  field(VAL , "255")
  field(TSE , "-2") # from device support
  field(FLNK, "$(P)$(R=)$(S=:)EvtECnt-I")
  info(autosaveFields_pass0, "OUT VAL")
}

record(calc, "$(P)$(R=)$(S=:)EvtECnt-I") {
  field(SDIS, "$(P)$(R=)$(S=:)EvtE-SP")
  field(DISV, "0")
  field(CALC, "A+1")
  field(INPA, "$(P)$(R=)$(S=:)EvtECnt-I NPP")
  field(TSEL, "$(P)$(R=)$(S=:)EvtE-SP.TIME")
}
# Mapping between hardware event code and a software database event
#
# Macros:
#  EN = record name prefix
#  OBJ = EVR devObj name
#  CODE = Event code (hardware)
#  EVNT = Database event code (software)
#

# EVT  - Timing hardware event code
# ENUM - EPICS DB event number
record(longout, "$(P)$(R=)$(S=:)EvtF-SP") {
  field(DTYP, "EVR Event")
  field(SCAN, "I/O Intr")
  field(OUT , "@OBJ=$(OBJ),Code=255")
  field(VAL , "255")
  field(TSE , "-2") # from device support
  field(FLNK, "$(P)$(R=)$(S=:)EvtFCnt-I")
  info(autosaveFields_pass0, "OUT VAL")
}

record(calc, "$(P)$(R=)$(S=:)EvtFCnt-I") {
  field(SDIS, "$(P)$(R=)$(S=:)EvtF-SP")
  field(DISV, "0")
  field(CALC, "A+1")
  field(INPA, "$(P)$(R=)$(S=:)EvtFCnt-I NPP")
  field(TSEL, "$(P)$(R=)$(S=:)EvtF-SP.TIME")
}
# Mapping between hardware event code and a software database event
#
# Macros:
#  EN = record name prefix
#  OBJ = EVR devObj name
#  CODE = Event code (hardware)
#  EVNT = Database event code (software)
#

# EVT  - Timing hardware event code
# ENUM - EPICS DB event number
record(longout, "$(P)$(R=)$(S=:)EvtG-SP") {
  field(DTYP, "EVR Event")
  field(SCAN, "I/O Intr")
  field(OUT , "@OBJ=$(OBJ),Code=255")
  field(VAL , "255")
  field(TSE , "-2") # from device support
  field(FLNK, "$(P)$(R=)$(S=:)EvtGCnt-I")
  info(autosaveFields_pass0, "OUT VAL")
}

record(calc, "$(P)$(R=)$(S=:)EvtGCnt-I") {
  field(SDIS, "$(P)$(R=)$(S=:)EvtG-SP")
  field(DISV, "0")
  field(CALC, "A+1")
  field(INPA, "$(P)$(R=)$(S=:)EvtGCnt-I NPP")
  field(TSEL, "$(P)$(R=)$(S=:)EvtG-SP.TIME")
}
# Mapping between hardware event code and a software database event
#
# Macros:
#  EN = record name prefix
#  OBJ = EVR devObj name
#  CODE = Event code (hardware)
#  EVNT = Database event code (software)
#

# EVT  - Timing hardware event code
# ENUM - EPICS DB event number
record(longout, "$(P)$(R=)$(S=:)EvtH-SP") {
  field(DTYP, "EVR Event")
  field(SCAN, "I/O Intr")
  field(OUT , "@OBJ=$(OBJ),Code=255")
  field(VAL , "255")
  field(TSE , "-2") # from device support
  field(FLNK, "$(P)$(R=)$(S=:)EvtHCnt-I")
  info(autosaveFields_pass0, "OUT VAL")
}

record(calc, "$(P)$(R=)$(S=:)EvtHCnt-I") {
  field(SDIS, "$(P)$(R=)$(S=:)EvtH-SP")
  field(DISV, "0")
  field(CALC, "A+1")
  field(INPA, "$(P)$(R=)$(S=:)EvtHCnt-I NPP")
  field(TSEL, "$(P)$(R=)$(S=:)EvtH-SP.TIME")
}
# Record set for an EVR's programable frequency divider
#
# Macros:
#  SN = scaler record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  IDX = ID # corresponding to output mapping codes
#  MAX = Maximum division

record(longout, "$(P)$(R=)$(S=:)PS0-Div-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "Prescaler 0")
  field( OUT , "@OBJ=$(OBJ):PS0, PROP=Divide")
  field( PINI, "YES")
  field( VAL , "2")
  field( HOPR, "0xffffffff")
  field( LOPR, "2")
  field( DRVH, "0xffffffff")
  field( DRVL, "2")
  field( FLNK, "$(P)$(R=)$(S=:)PS0-Rate-I")
  info(autosaveFields_pass0, "VAL")
}

record(calc, "$(P)$(R=)$(S=:)PS0-Rate-I") {
  field(DESC, "Output frequency")
  field(INPA, "$(P)$(R=)$(S=:)PS0-Div-SP NPP")
  field(INPB, "$(P)$(R=)$(S=:)Link-Clk-I CP")
  field(CALC, "B/A")
  field(EGU, "MHz")
  field(PREC, "2")
}

record(waveform, "$(P)$(R=)$(S=:)PS0-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Record set for an EVR's programable frequency divider
#
# Macros:
#  SN = scaler record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  IDX = ID # corresponding to output mapping codes
#  MAX = Maximum division

record(longout, "$(P)$(R=)$(S=:)PS1-Div-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "Prescaler 1")
  field( OUT , "@OBJ=$(OBJ):PS1, PROP=Divide")
  field( PINI, "YES")
  field( VAL , "2")
  field( HOPR, "0xffffffff")
  field( LOPR, "2")
  field( DRVH, "0xffffffff")
  field( DRVL, "2")
  field( FLNK, "$(P)$(R=)$(S=:)PS1-Rate-I")
  info(autosaveFields_pass0, "VAL")
}

record(calc, "$(P)$(R=)$(S=:)PS1-Rate-I") {
  field(DESC, "Output frequency")
  field(INPA, "$(P)$(R=)$(S=:)PS1-Div-SP NPP")
  field(INPB, "$(P)$(R=)$(S=:)Link-Clk-I CP")
  field(CALC, "B/A")
  field(EGU, "MHz")
  field(PREC, "2")
}

record(waveform, "$(P)$(R=)$(S=:)PS1-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Record set for an EVR's programable frequency divider
#
# Macros:
#  SN = scaler record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  IDX = ID # corresponding to output mapping codes
#  MAX = Maximum division

record(longout, "$(P)$(R=)$(S=:)PS2-Div-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "Prescaler 2")
  field( OUT , "@OBJ=$(OBJ):PS2, PROP=Divide")
  field( PINI, "YES")
  field( VAL , "2")
  field( HOPR, "0xffffffff")
  field( LOPR, "2")
  field( DRVH, "0xffffffff")
  field( DRVL, "2")
  field( FLNK, "$(P)$(R=)$(S=:)PS2-Rate-I")
  info(autosaveFields_pass0, "VAL")
}

record(calc, "$(P)$(R=)$(S=:)PS2-Rate-I") {
  field(DESC, "Output frequency")
  field(INPA, "$(P)$(R=)$(S=:)PS2-Div-SP NPP")
  field(INPB, "$(P)$(R=)$(S=:)Link-Clk-I CP")
  field(CALC, "B/A")
  field(EGU, "MHz")
  field(PREC, "2")
}

record(waveform, "$(P)$(R=)$(S=:)PS2-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Record set for an EVR's programable frequency divider
#
# Macros:
#  SN = scaler record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  IDX = ID # corresponding to output mapping codes
#  MAX = Maximum division

record(longout, "$(P)$(R=)$(S=:)PS3-Div-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "Prescaler 3")
  field( OUT , "@OBJ=$(OBJ):PS3, PROP=Divide")
  field( PINI, "YES")
  field( VAL , "2")
  field( HOPR, "0xffffffff")
  field( LOPR, "2")
  field( DRVH, "0xffffffff")
  field( DRVL, "2")
  field( FLNK, "$(P)$(R=)$(S=:)PS3-Rate-I")
  info(autosaveFields_pass0, "VAL")
}

record(calc, "$(P)$(R=)$(S=:)PS3-Rate-I") {
  field(DESC, "Output frequency")
  field(INPA, "$(P)$(R=)$(S=:)PS3-Div-SP NPP")
  field(INPB, "$(P)$(R=)$(S=:)Link-Clk-I CP")
  field(CALC, "B/A")
  field(EGU, "MHz")
  field(PREC, "2")
}

record(waveform, "$(P)$(R=)$(S=:)PS3-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Record set for an EVR's programable frequency divider
#
# Macros:
#  SN = scaler record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  IDX = ID # corresponding to output mapping codes
#  MAX = Maximum division

record(longout, "$(P)$(R=)$(S=:)PS4-Div-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "Prescaler 4")
  field( OUT , "@OBJ=$(OBJ):PS4, PROP=Divide")
  field( PINI, "YES")
  field( VAL , "2")
  field( HOPR, "0xffffffff")
  field( LOPR, "2")
  field( DRVH, "0xffffffff")
  field( DRVL, "2")
  field( FLNK, "$(P)$(R=)$(S=:)PS4-Rate-I")
  info(autosaveFields_pass0, "VAL")
}

record(calc, "$(P)$(R=)$(S=:)PS4-Rate-I") {
  field(DESC, "Output frequency")
  field(INPA, "$(P)$(R=)$(S=:)PS4-Div-SP NPP")
  field(INPB, "$(P)$(R=)$(S=:)Link-Clk-I CP")
  field(CALC, "B/A")
  field(EGU, "MHz")
  field(PREC, "2")
}

record(waveform, "$(P)$(R=)$(S=:)PS4-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Record set for an EVR's programable frequency divider
#
# Macros:
#  SN = scaler record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  IDX = ID # corresponding to output mapping codes
#  MAX = Maximum division

record(longout, "$(P)$(R=)$(S=:)PS5-Div-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "Prescaler 5")
  field( OUT , "@OBJ=$(OBJ):PS5, PROP=Divide")
  field( PINI, "YES")
  field( VAL , "2")
  field( HOPR, "0xffffffff")
  field( LOPR, "2")
  field( DRVH, "0xffffffff")
  field( DRVL, "2")
  field( FLNK, "$(P)$(R=)$(S=:)PS5-Rate-I")
  info(autosaveFields_pass0, "VAL")
}

record(calc, "$(P)$(R=)$(S=:)PS5-Rate-I") {
  field(DESC, "Output frequency")
  field(INPA, "$(P)$(R=)$(S=:)PS5-Div-SP NPP")
  field(INPB, "$(P)$(R=)$(S=:)Link-Clk-I CP")
  field(CALC, "B/A")
  field(EGU, "MHz")
  field(PREC, "2")
}

record(waveform, "$(P)$(R=)$(S=:)PS5-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Record set for an EVR's programable frequency divider
#
# Macros:
#  SN = scaler record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  IDX = ID # corresponding to output mapping codes
#  MAX = Maximum division

record(longout, "$(P)$(R=)$(S=:)PS6-Div-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "Prescaler 6")
  field( OUT , "@OBJ=$(OBJ):PS6, PROP=Divide")
  field( PINI, "YES")
  field( VAL , "2")
  field( HOPR, "0xffffffff")
  field( LOPR, "2")
  field( DRVH, "0xffffffff")
  field( DRVL, "2")
  field( FLNK, "$(P)$(R=)$(S=:)PS6-Rate-I")
  info(autosaveFields_pass0, "VAL")
}

record(calc, "$(P)$(R=)$(S=:)PS6-Rate-I") {
  field(DESC, "Output frequency")
  field(INPA, "$(P)$(R=)$(S=:)PS6-Div-SP NPP")
  field(INPB, "$(P)$(R=)$(S=:)Link-Clk-I CP")
  field(CALC, "B/A")
  field(EGU, "MHz")
  field(PREC, "2")
}

record(waveform, "$(P)$(R=)$(S=:)PS6-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Record set for an EVR's programable frequency divider
#
# Macros:
#  SN = scaler record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  IDX = ID # corresponding to output mapping codes
#  MAX = Maximum division

record(longout, "$(P)$(R=)$(S=:)PS7-Div-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "Prescaler 7")
  field( OUT , "@OBJ=$(OBJ):PS7, PROP=Divide")
  field( PINI, "YES")
  field( VAL , "2")
  field( HOPR, "0xffffffff")
  field( LOPR, "2")
  field( DRVH, "0xffffffff")
  field( DRVL, "2")
  field( FLNK, "$(P)$(R=)$(S=:)PS7-Rate-I")
  info(autosaveFields_pass0, "VAL")
}

record(calc, "$(P)$(R=)$(S=:)PS7-Rate-I") {
  field(DESC, "Output frequency")
  field(INPA, "$(P)$(R=)$(S=:)PS7-Div-SP NPP")
  field(INPB, "$(P)$(R=)$(S=:)Link-Clk-I CP")
  field(CALC, "B/A")
  field(EGU, "MHz")
  field(PREC, "2")
}

record(waveform, "$(P)$(R=)$(S=:)PS7-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(P)$(R=)$(S=:)OutInt-Ena-SP") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Output Internal")
  field( OUT , "@OBJ=$(OBJ):Int, PROP=Enable")
  field( PINI, "YES")
  field( ZNAM, "Disabled")
  field( ONAM, "Enabled")
  field( VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)OutInt-Src-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "Internal")
  field( OUT , "@OBJ=$(OBJ):Int, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutInt-Src-RB_")
  field( PINI, "YES")
  field( VAL , "63") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(P)$(R=)$(S=:)OutInt-Src2-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "Internal")
  field( OUT , "@OBJ=$(OBJ):Int, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutInt-Src-RB_")
  field( PINI, "YES")
  field( VAL , "63") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(P)$(R=)$(S=:)OutInt-Src-Pulse-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutInt-Src-SP PP")
  field( ZRST, "Pulser 0")
  field( ONST, "Pulser 1")
  field( TWST, "Pulser 2")
  field( THST, "Pulser 3")
  field( FRST, "Pulser 4")
  field( FVST, "Pulser 5")
  field( SXST, "Pulser 6")
  field( SVST, "Pulser 7")
  field( EIST, "Pulser 8")
  field( NIST, "Pulser 9")
  field( TEST, "Pulser 10")
  field( ELST, "Pulser 11")
  field( TVST, "Pulser 12")
  field( TTST, "Pulser 13")
  field( FTST, "Pulser 14")
  field( FFST, "Pulser 15")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THVL, "3")
  field( FRVL, "4")
  field( FVVL, "5")
  field( SXVL, "6")
  field( SVVL, "7")
  field( EIVL, "8")
  field( NIVL, "9")
  field( TEVL, "10")
  field( ELVL, "11")
  field( TVVL, "12")
  field( TTVL, "13")
  field( FTVL, "14")
  field( FFVL, "15")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutInt-Src-DBus-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutInt-Src-SP PP")
  field( ZRST, "DBus 0")
  field( ONST, "DBus 1")
  field( TWST, "DBus 2")
  field( THST, "DBus 3")
  field( FRST, "DBus 4")
  field( FVST, "DBus 5")
  field( SXST, "DBus 6")
  field( SVST, "DBus 7")
  field( ZRVL, "32")
  field( ONVL, "33")
  field( TWVL, "34")
  field( THVL, "35")
  field( FRVL, "36")
  field( FVVL, "37")
  field( SXVL, "38")
  field( SVVL, "39")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutInt-Src-Scale-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutInt-Src-SP PP")
  field( ZRST, "Prescaler 0")
  field( ONST, "Prescaler 1")
  field( TWST, "Prescaler 2")
  field( THST, "Flip-flop 0")
  field( FRST, "Flip-flop 1")
  field( FVST, "Flip-flop 2")
  field( SXST, "Flip-flop 3")
  field( SVST, "Flip-flop 4")
  field( EIST, "Flip-flop 5")
  field( NIST, "Flip-flop 6")
  field( TEST, "Flip-flop 7")
  field( ELST, "Tri-state")
  field( TVST, "Force High")
  field( TTST, "Force Low")
  field( ZRVL, "40")
  field( ONVL, "41")
  field( TWVL, "42")
  field( THVL, "48")
  field( FRVL, "49")
  field( FVVL, "50")
  field( SXVL, "51")
  field( SVVL, "52")
  field( EIVL, "53")
  field( NIVL, "54")
  field( TEVL, "55")
  field( ELVL, "61")
  field( TVVL, "62")
  field( TTVL, "63")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(P)$(R=)$(S=:)OutInt-Src-RB_") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "Internal")
  field( INP , "@OBJ=$(OBJ):Int, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutInt-Src-RB")
}

record(stringin, "$(P)$(R=)$(S=:)OutInt-Src-RB")
{
  field( DTYP, "LUT uint32 -> string")
  field(  INP, "$(P)$(R=)$(S=:)OutInt-Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 32 = DBus 0")
  info(lutH , " 33 = DBus 1")
  info(lutI , " 34 = DBus 2")
  info(lutJ , " 35 = DBus 3")
  info(lutK , " 36 = DBus 4")
  info(lutL , " 37 = DBus 5")
  info(lutM , " 38 = DBus 6")
  info(lutN , " 39 = DBus 7")
  info(lutO , " 40 = Prescaler 0")
  info(lutP , " 41 = Prescaler 1")
  info(lutQ , " 42 = Prescaler 2")
  info(lutR , " 48 = Flip-flop 0")
  info(lutS , " 49 = Flip-flop 1")
  info(lutT , " 50 = Flip-flop 2")
  info(lutU , " 51 = Flip-flop 3")
  info(lutV , " 52 = Flip-flop 4")
  info(lutW , " 53 = Flip-flop 5")
  info(lutX , " 54 = Flip-flop 6")
  info(lutY , " 55 = Flip-flop 7")
  info(lutZ , " 61 = Tri-state")
  info(lutAA, " 62 = Force high")
  info(lutAB, " 63 = Force low")
}

record(longin, "$(P)$(R=)$(S=:)OutInt-Src2-RB") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "Internal")
  field( INP , "@OBJ=$(OBJ):Int, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutInt-Src-RB")
}

# Select which is displayed

record(waveform, "$(P)$(R=)$(S=:)OutInt-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)OutInt-User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(P)$(R=)$(S=:)OutFPUV00-Ena-SP") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Output UNIV0")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut0, PROP=Enable")
  field( PINI, "YES")
  field( ZNAM, "Disabled")
  field( ONAM, "Enabled")
  field( VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV00-Src-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV0")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut0, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV00-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV00-Src2-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV0")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut0, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV00-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV00-Src-Pulse-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV00-Src-SP PP")
  field( ZRST, "Pulser 0")
  field( ONST, "Pulser 1")
  field( TWST, "Pulser 2")
  field( THST, "Pulser 3")
  field( FRST, "Pulser 4")
  field( FVST, "Pulser 5")
  field( SXST, "Pulser 6")
  field( SVST, "Pulser 7")
  field( EIST, "Pulser 8")
  field( NIST, "Pulser 9")
  field( TEST, "Pulser 10")
  field( ELST, "Pulser 11")
  field( TVST, "Pulser 12")
  field( TTST, "Pulser 13")
  field( FTST, "Pulser 14")
  field( FFST, "Pulser 15")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THVL, "3")
  field( FRVL, "4")
  field( FVVL, "5")
  field( SXVL, "6")
  field( SVVL, "7")
  field( EIVL, "8")
  field( NIVL, "9")
  field( TEVL, "10")
  field( ELVL, "11")
  field( TVVL, "12")
  field( TTVL, "13")
  field( FTVL, "14")
  field( FFVL, "15")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV00-Src-DBus-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV00-Src-SP PP")
  field( ZRST, "DBus 0")
  field( ONST, "DBus 1")
  field( TWST, "DBus 2")
  field( THST, "DBus 3")
  field( FRST, "DBus 4")
  field( FVST, "DBus 5")
  field( SXST, "DBus 6")
  field( SVST, "DBus 7")
  field( ZRVL, "32")
  field( ONVL, "33")
  field( TWVL, "34")
  field( THVL, "35")
  field( FRVL, "36")
  field( FVVL, "37")
  field( SXVL, "38")
  field( SVVL, "39")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV00-Src-Scale-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV00-Src-SP PP")
  field( ZRST, "Prescaler 0")
  field( ONST, "Prescaler 1")
  field( TWST, "Prescaler 2")
  field( THST, "Flip-flop 0")
  field( FRST, "Flip-flop 1")
  field( FVST, "Flip-flop 2")
  field( SXST, "Flip-flop 3")
  field( SVST, "Flip-flop 4")
  field( EIST, "Flip-flop 5")
  field( NIST, "Flip-flop 6")
  field( TEST, "Flip-flop 7")
  field( ELST, "Tri-state")
  field( TVST, "Force High")
  field( TTST, "Force Low")
  field( ZRVL, "40")
  field( ONVL, "41")
  field( TWVL, "42")
  field( THVL, "48")
  field( FRVL, "49")
  field( FVVL, "50")
  field( SXVL, "51")
  field( SVVL, "52")
  field( EIVL, "53")
  field( NIVL, "54")
  field( TEVL, "55")
  field( ELVL, "61")
  field( TVVL, "62")
  field( TTVL, "63")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(P)$(R=)$(S=:)OutFPUV00-Src-RB_") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV0")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut0, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV00-Src-RB")
}

record(stringin, "$(P)$(R=)$(S=:)OutFPUV00-Src-RB")
{
  field( DTYP, "LUT uint32 -> string")
  field(  INP, "$(P)$(R=)$(S=:)OutFPUV00-Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 32 = DBus 0")
  info(lutH , " 33 = DBus 1")
  info(lutI , " 34 = DBus 2")
  info(lutJ , " 35 = DBus 3")
  info(lutK , " 36 = DBus 4")
  info(lutL , " 37 = DBus 5")
  info(lutM , " 38 = DBus 6")
  info(lutN , " 39 = DBus 7")
  info(lutO , " 40 = Prescaler 0")
  info(lutP , " 41 = Prescaler 1")
  info(lutQ , " 42 = Prescaler 2")
  info(lutR , " 48 = Flip-flop 0")
  info(lutS , " 49 = Flip-flop 1")
  info(lutT , " 50 = Flip-flop 2")
  info(lutU , " 51 = Flip-flop 3")
  info(lutV , " 52 = Flip-flop 4")
  info(lutW , " 53 = Flip-flop 5")
  info(lutX , " 54 = Flip-flop 6")
  info(lutY , " 55 = Flip-flop 7")
  info(lutZ , " 61 = Tri-state")
  info(lutAA, " 62 = Force high")
  info(lutAB, " 63 = Force low")
}

record(longin, "$(P)$(R=)$(S=:)OutFPUV00-Src2-RB") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV0")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut0, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV00-Src-RB")
}

# Select which is displayed

record(waveform, "$(P)$(R=)$(S=:)OutFPUV00-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)OutFPUV00-User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(P)$(R=)$(S=:)OutFPUV01-Ena-SP") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Output UNIV1")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut1, PROP=Enable")
  field( PINI, "YES")
  field( ZNAM, "Disabled")
  field( ONAM, "Enabled")
  field( VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV01-Src-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV1")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut1, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV01-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV01-Src2-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV1")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut1, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV01-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV01-Src-Pulse-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV01-Src-SP PP")
  field( ZRST, "Pulser 0")
  field( ONST, "Pulser 1")
  field( TWST, "Pulser 2")
  field( THST, "Pulser 3")
  field( FRST, "Pulser 4")
  field( FVST, "Pulser 5")
  field( SXST, "Pulser 6")
  field( SVST, "Pulser 7")
  field( EIST, "Pulser 8")
  field( NIST, "Pulser 9")
  field( TEST, "Pulser 10")
  field( ELST, "Pulser 11")
  field( TVST, "Pulser 12")
  field( TTST, "Pulser 13")
  field( FTST, "Pulser 14")
  field( FFST, "Pulser 15")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THVL, "3")
  field( FRVL, "4")
  field( FVVL, "5")
  field( SXVL, "6")
  field( SVVL, "7")
  field( EIVL, "8")
  field( NIVL, "9")
  field( TEVL, "10")
  field( ELVL, "11")
  field( TVVL, "12")
  field( TTVL, "13")
  field( FTVL, "14")
  field( FFVL, "15")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV01-Src-DBus-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV01-Src-SP PP")
  field( ZRST, "DBus 0")
  field( ONST, "DBus 1")
  field( TWST, "DBus 2")
  field( THST, "DBus 3")
  field( FRST, "DBus 4")
  field( FVST, "DBus 5")
  field( SXST, "DBus 6")
  field( SVST, "DBus 7")
  field( ZRVL, "32")
  field( ONVL, "33")
  field( TWVL, "34")
  field( THVL, "35")
  field( FRVL, "36")
  field( FVVL, "37")
  field( SXVL, "38")
  field( SVVL, "39")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV01-Src-Scale-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV01-Src-SP PP")
  field( ZRST, "Prescaler 0")
  field( ONST, "Prescaler 1")
  field( TWST, "Prescaler 2")
  field( THST, "Flip-flop 0")
  field( FRST, "Flip-flop 1")
  field( FVST, "Flip-flop 2")
  field( SXST, "Flip-flop 3")
  field( SVST, "Flip-flop 4")
  field( EIST, "Flip-flop 5")
  field( NIST, "Flip-flop 6")
  field( TEST, "Flip-flop 7")
  field( ELST, "Tri-state")
  field( TVST, "Force High")
  field( TTST, "Force Low")
  field( ZRVL, "40")
  field( ONVL, "41")
  field( TWVL, "42")
  field( THVL, "48")
  field( FRVL, "49")
  field( FVVL, "50")
  field( SXVL, "51")
  field( SVVL, "52")
  field( EIVL, "53")
  field( NIVL, "54")
  field( TEVL, "55")
  field( ELVL, "61")
  field( TVVL, "62")
  field( TTVL, "63")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(P)$(R=)$(S=:)OutFPUV01-Src-RB_") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV1")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut1, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV01-Src-RB")
}

record(stringin, "$(P)$(R=)$(S=:)OutFPUV01-Src-RB")
{
  field( DTYP, "LUT uint32 -> string")
  field(  INP, "$(P)$(R=)$(S=:)OutFPUV01-Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 32 = DBus 0")
  info(lutH , " 33 = DBus 1")
  info(lutI , " 34 = DBus 2")
  info(lutJ , " 35 = DBus 3")
  info(lutK , " 36 = DBus 4")
  info(lutL , " 37 = DBus 5")
  info(lutM , " 38 = DBus 6")
  info(lutN , " 39 = DBus 7")
  info(lutO , " 40 = Prescaler 0")
  info(lutP , " 41 = Prescaler 1")
  info(lutQ , " 42 = Prescaler 2")
  info(lutR , " 48 = Flip-flop 0")
  info(lutS , " 49 = Flip-flop 1")
  info(lutT , " 50 = Flip-flop 2")
  info(lutU , " 51 = Flip-flop 3")
  info(lutV , " 52 = Flip-flop 4")
  info(lutW , " 53 = Flip-flop 5")
  info(lutX , " 54 = Flip-flop 6")
  info(lutY , " 55 = Flip-flop 7")
  info(lutZ , " 61 = Tri-state")
  info(lutAA, " 62 = Force high")
  info(lutAB, " 63 = Force low")
}

record(longin, "$(P)$(R=)$(S=:)OutFPUV01-Src2-RB") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV1")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut1, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV01-Src-RB")
}

# Select which is displayed

record(waveform, "$(P)$(R=)$(S=:)OutFPUV01-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)OutFPUV01-User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(P)$(R=)$(S=:)OutFPUV02-Ena-SP") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Output UNIV2")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut2, PROP=Enable")
  field( PINI, "YES")
  field( ZNAM, "Disabled")
  field( ONAM, "Enabled")
  field( VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV02-Src-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV2")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut2, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV02-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV02-Src2-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV2")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut2, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV02-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV02-Src-Pulse-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV02-Src-SP PP")
  field( ZRST, "Pulser 0")
  field( ONST, "Pulser 1")
  field( TWST, "Pulser 2")
  field( THST, "Pulser 3")
  field( FRST, "Pulser 4")
  field( FVST, "Pulser 5")
  field( SXST, "Pulser 6")
  field( SVST, "Pulser 7")
  field( EIST, "Pulser 8")
  field( NIST, "Pulser 9")
  field( TEST, "Pulser 10")
  field( ELST, "Pulser 11")
  field( TVST, "Pulser 12")
  field( TTST, "Pulser 13")
  field( FTST, "Pulser 14")
  field( FFST, "Pulser 15")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THVL, "3")
  field( FRVL, "4")
  field( FVVL, "5")
  field( SXVL, "6")
  field( SVVL, "7")
  field( EIVL, "8")
  field( NIVL, "9")
  field( TEVL, "10")
  field( ELVL, "11")
  field( TVVL, "12")
  field( TTVL, "13")
  field( FTVL, "14")
  field( FFVL, "15")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV02-Src-DBus-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV02-Src-SP PP")
  field( ZRST, "DBus 0")
  field( ONST, "DBus 1")
  field( TWST, "DBus 2")
  field( THST, "DBus 3")
  field( FRST, "DBus 4")
  field( FVST, "DBus 5")
  field( SXST, "DBus 6")
  field( SVST, "DBus 7")
  field( ZRVL, "32")
  field( ONVL, "33")
  field( TWVL, "34")
  field( THVL, "35")
  field( FRVL, "36")
  field( FVVL, "37")
  field( SXVL, "38")
  field( SVVL, "39")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV02-Src-Scale-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV02-Src-SP PP")
  field( ZRST, "Prescaler 0")
  field( ONST, "Prescaler 1")
  field( TWST, "Prescaler 2")
  field( THST, "Flip-flop 0")
  field( FRST, "Flip-flop 1")
  field( FVST, "Flip-flop 2")
  field( SXST, "Flip-flop 3")
  field( SVST, "Flip-flop 4")
  field( EIST, "Flip-flop 5")
  field( NIST, "Flip-flop 6")
  field( TEST, "Flip-flop 7")
  field( ELST, "Tri-state")
  field( TVST, "Force High")
  field( TTST, "Force Low")
  field( ZRVL, "40")
  field( ONVL, "41")
  field( TWVL, "42")
  field( THVL, "48")
  field( FRVL, "49")
  field( FVVL, "50")
  field( SXVL, "51")
  field( SVVL, "52")
  field( EIVL, "53")
  field( NIVL, "54")
  field( TEVL, "55")
  field( ELVL, "61")
  field( TVVL, "62")
  field( TTVL, "63")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(P)$(R=)$(S=:)OutFPUV02-Src-RB_") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV2")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut2, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV02-Src-RB")
}

record(stringin, "$(P)$(R=)$(S=:)OutFPUV02-Src-RB")
{
  field( DTYP, "LUT uint32 -> string")
  field(  INP, "$(P)$(R=)$(S=:)OutFPUV02-Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 32 = DBus 0")
  info(lutH , " 33 = DBus 1")
  info(lutI , " 34 = DBus 2")
  info(lutJ , " 35 = DBus 3")
  info(lutK , " 36 = DBus 4")
  info(lutL , " 37 = DBus 5")
  info(lutM , " 38 = DBus 6")
  info(lutN , " 39 = DBus 7")
  info(lutO , " 40 = Prescaler 0")
  info(lutP , " 41 = Prescaler 1")
  info(lutQ , " 42 = Prescaler 2")
  info(lutR , " 48 = Flip-flop 0")
  info(lutS , " 49 = Flip-flop 1")
  info(lutT , " 50 = Flip-flop 2")
  info(lutU , " 51 = Flip-flop 3")
  info(lutV , " 52 = Flip-flop 4")
  info(lutW , " 53 = Flip-flop 5")
  info(lutX , " 54 = Flip-flop 6")
  info(lutY , " 55 = Flip-flop 7")
  info(lutZ , " 61 = Tri-state")
  info(lutAA, " 62 = Force high")
  info(lutAB, " 63 = Force low")
}

record(longin, "$(P)$(R=)$(S=:)OutFPUV02-Src2-RB") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV2")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut2, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV02-Src-RB")
}

# Select which is displayed

record(waveform, "$(P)$(R=)$(S=:)OutFPUV02-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)OutFPUV02-User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(P)$(R=)$(S=:)OutFPUV03-Ena-SP") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Output UNIV3")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut3, PROP=Enable")
  field( PINI, "YES")
  field( ZNAM, "Disabled")
  field( ONAM, "Enabled")
  field( VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV03-Src-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV3")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut3, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV03-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV03-Src2-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV3")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut3, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV03-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV03-Src-Pulse-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV03-Src-SP PP")
  field( ZRST, "Pulser 0")
  field( ONST, "Pulser 1")
  field( TWST, "Pulser 2")
  field( THST, "Pulser 3")
  field( FRST, "Pulser 4")
  field( FVST, "Pulser 5")
  field( SXST, "Pulser 6")
  field( SVST, "Pulser 7")
  field( EIST, "Pulser 8")
  field( NIST, "Pulser 9")
  field( TEST, "Pulser 10")
  field( ELST, "Pulser 11")
  field( TVST, "Pulser 12")
  field( TTST, "Pulser 13")
  field( FTST, "Pulser 14")
  field( FFST, "Pulser 15")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THVL, "3")
  field( FRVL, "4")
  field( FVVL, "5")
  field( SXVL, "6")
  field( SVVL, "7")
  field( EIVL, "8")
  field( NIVL, "9")
  field( TEVL, "10")
  field( ELVL, "11")
  field( TVVL, "12")
  field( TTVL, "13")
  field( FTVL, "14")
  field( FFVL, "15")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV03-Src-DBus-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV03-Src-SP PP")
  field( ZRST, "DBus 0")
  field( ONST, "DBus 1")
  field( TWST, "DBus 2")
  field( THST, "DBus 3")
  field( FRST, "DBus 4")
  field( FVST, "DBus 5")
  field( SXST, "DBus 6")
  field( SVST, "DBus 7")
  field( ZRVL, "32")
  field( ONVL, "33")
  field( TWVL, "34")
  field( THVL, "35")
  field( FRVL, "36")
  field( FVVL, "37")
  field( SXVL, "38")
  field( SVVL, "39")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV03-Src-Scale-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV03-Src-SP PP")
  field( ZRST, "Prescaler 0")
  field( ONST, "Prescaler 1")
  field( TWST, "Prescaler 2")
  field( THST, "Flip-flop 0")
  field( FRST, "Flip-flop 1")
  field( FVST, "Flip-flop 2")
  field( SXST, "Flip-flop 3")
  field( SVST, "Flip-flop 4")
  field( EIST, "Flip-flop 5")
  field( NIST, "Flip-flop 6")
  field( TEST, "Flip-flop 7")
  field( ELST, "Tri-state")
  field( TVST, "Force High")
  field( TTST, "Force Low")
  field( ZRVL, "40")
  field( ONVL, "41")
  field( TWVL, "42")
  field( THVL, "48")
  field( FRVL, "49")
  field( FVVL, "50")
  field( SXVL, "51")
  field( SVVL, "52")
  field( EIVL, "53")
  field( NIVL, "54")
  field( TEVL, "55")
  field( ELVL, "61")
  field( TVVL, "62")
  field( TTVL, "63")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(P)$(R=)$(S=:)OutFPUV03-Src-RB_") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV3")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut3, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV03-Src-RB")
}

record(stringin, "$(P)$(R=)$(S=:)OutFPUV03-Src-RB")
{
  field( DTYP, "LUT uint32 -> string")
  field(  INP, "$(P)$(R=)$(S=:)OutFPUV03-Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 32 = DBus 0")
  info(lutH , " 33 = DBus 1")
  info(lutI , " 34 = DBus 2")
  info(lutJ , " 35 = DBus 3")
  info(lutK , " 36 = DBus 4")
  info(lutL , " 37 = DBus 5")
  info(lutM , " 38 = DBus 6")
  info(lutN , " 39 = DBus 7")
  info(lutO , " 40 = Prescaler 0")
  info(lutP , " 41 = Prescaler 1")
  info(lutQ , " 42 = Prescaler 2")
  info(lutR , " 48 = Flip-flop 0")
  info(lutS , " 49 = Flip-flop 1")
  info(lutT , " 50 = Flip-flop 2")
  info(lutU , " 51 = Flip-flop 3")
  info(lutV , " 52 = Flip-flop 4")
  info(lutW , " 53 = Flip-flop 5")
  info(lutX , " 54 = Flip-flop 6")
  info(lutY , " 55 = Flip-flop 7")
  info(lutZ , " 61 = Tri-state")
  info(lutAA, " 62 = Force high")
  info(lutAB, " 63 = Force low")
}

record(longin, "$(P)$(R=)$(S=:)OutFPUV03-Src2-RB") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV3")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut3, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV03-Src-RB")
}

# Select which is displayed

record(waveform, "$(P)$(R=)$(S=:)OutFPUV03-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)OutFPUV03-User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(P)$(R=)$(S=:)OutFPUV04-Ena-SP") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Output UNIV4")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut4, PROP=Enable")
  field( PINI, "YES")
  field( ZNAM, "Disabled")
  field( ONAM, "Enabled")
  field( VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV04-Src-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV4")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut4, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV04-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV04-Src2-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV4")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut4, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV04-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV04-Src-Pulse-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV04-Src-SP PP")
  field( ZRST, "Pulser 0")
  field( ONST, "Pulser 1")
  field( TWST, "Pulser 2")
  field( THST, "Pulser 3")
  field( FRST, "Pulser 4")
  field( FVST, "Pulser 5")
  field( SXST, "Pulser 6")
  field( SVST, "Pulser 7")
  field( EIST, "Pulser 8")
  field( NIST, "Pulser 9")
  field( TEST, "Pulser 10")
  field( ELST, "Pulser 11")
  field( TVST, "Pulser 12")
  field( TTST, "Pulser 13")
  field( FTST, "Pulser 14")
  field( FFST, "Pulser 15")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THVL, "3")
  field( FRVL, "4")
  field( FVVL, "5")
  field( SXVL, "6")
  field( SVVL, "7")
  field( EIVL, "8")
  field( NIVL, "9")
  field( TEVL, "10")
  field( ELVL, "11")
  field( TVVL, "12")
  field( TTVL, "13")
  field( FTVL, "14")
  field( FFVL, "15")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV04-Src-DBus-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV04-Src-SP PP")
  field( ZRST, "DBus 0")
  field( ONST, "DBus 1")
  field( TWST, "DBus 2")
  field( THST, "DBus 3")
  field( FRST, "DBus 4")
  field( FVST, "DBus 5")
  field( SXST, "DBus 6")
  field( SVST, "DBus 7")
  field( ZRVL, "32")
  field( ONVL, "33")
  field( TWVL, "34")
  field( THVL, "35")
  field( FRVL, "36")
  field( FVVL, "37")
  field( SXVL, "38")
  field( SVVL, "39")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV04-Src-Scale-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV04-Src-SP PP")
  field( ZRST, "Prescaler 0")
  field( ONST, "Prescaler 1")
  field( TWST, "Prescaler 2")
  field( THST, "Flip-flop 0")
  field( FRST, "Flip-flop 1")
  field( FVST, "Flip-flop 2")
  field( SXST, "Flip-flop 3")
  field( SVST, "Flip-flop 4")
  field( EIST, "Flip-flop 5")
  field( NIST, "Flip-flop 6")
  field( TEST, "Flip-flop 7")
  field( ELST, "Tri-state")
  field( TVST, "Force High")
  field( TTST, "Force Low")
  field( ZRVL, "40")
  field( ONVL, "41")
  field( TWVL, "42")
  field( THVL, "48")
  field( FRVL, "49")
  field( FVVL, "50")
  field( SXVL, "51")
  field( SVVL, "52")
  field( EIVL, "53")
  field( NIVL, "54")
  field( TEVL, "55")
  field( ELVL, "61")
  field( TVVL, "62")
  field( TTVL, "63")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(P)$(R=)$(S=:)OutFPUV04-Src-RB_") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV4")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut4, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV04-Src-RB")
}

record(stringin, "$(P)$(R=)$(S=:)OutFPUV04-Src-RB")
{
  field( DTYP, "LUT uint32 -> string")
  field(  INP, "$(P)$(R=)$(S=:)OutFPUV04-Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 32 = DBus 0")
  info(lutH , " 33 = DBus 1")
  info(lutI , " 34 = DBus 2")
  info(lutJ , " 35 = DBus 3")
  info(lutK , " 36 = DBus 4")
  info(lutL , " 37 = DBus 5")
  info(lutM , " 38 = DBus 6")
  info(lutN , " 39 = DBus 7")
  info(lutO , " 40 = Prescaler 0")
  info(lutP , " 41 = Prescaler 1")
  info(lutQ , " 42 = Prescaler 2")
  info(lutR , " 48 = Flip-flop 0")
  info(lutS , " 49 = Flip-flop 1")
  info(lutT , " 50 = Flip-flop 2")
  info(lutU , " 51 = Flip-flop 3")
  info(lutV , " 52 = Flip-flop 4")
  info(lutW , " 53 = Flip-flop 5")
  info(lutX , " 54 = Flip-flop 6")
  info(lutY , " 55 = Flip-flop 7")
  info(lutZ , " 61 = Tri-state")
  info(lutAA, " 62 = Force high")
  info(lutAB, " 63 = Force low")
}

record(longin, "$(P)$(R=)$(S=:)OutFPUV04-Src2-RB") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV4")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut4, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV04-Src-RB")
}

# Select which is displayed

record(waveform, "$(P)$(R=)$(S=:)OutFPUV04-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)OutFPUV04-User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(P)$(R=)$(S=:)OutFPUV05-Ena-SP") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Output UNIV5")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut5, PROP=Enable")
  field( PINI, "YES")
  field( ZNAM, "Disabled")
  field( ONAM, "Enabled")
  field( VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV05-Src-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV5")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut5, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV05-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV05-Src2-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV5")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut5, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV05-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV05-Src-Pulse-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV05-Src-SP PP")
  field( ZRST, "Pulser 0")
  field( ONST, "Pulser 1")
  field( TWST, "Pulser 2")
  field( THST, "Pulser 3")
  field( FRST, "Pulser 4")
  field( FVST, "Pulser 5")
  field( SXST, "Pulser 6")
  field( SVST, "Pulser 7")
  field( EIST, "Pulser 8")
  field( NIST, "Pulser 9")
  field( TEST, "Pulser 10")
  field( ELST, "Pulser 11")
  field( TVST, "Pulser 12")
  field( TTST, "Pulser 13")
  field( FTST, "Pulser 14")
  field( FFST, "Pulser 15")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THVL, "3")
  field( FRVL, "4")
  field( FVVL, "5")
  field( SXVL, "6")
  field( SVVL, "7")
  field( EIVL, "8")
  field( NIVL, "9")
  field( TEVL, "10")
  field( ELVL, "11")
  field( TVVL, "12")
  field( TTVL, "13")
  field( FTVL, "14")
  field( FFVL, "15")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV05-Src-DBus-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV05-Src-SP PP")
  field( ZRST, "DBus 0")
  field( ONST, "DBus 1")
  field( TWST, "DBus 2")
  field( THST, "DBus 3")
  field( FRST, "DBus 4")
  field( FVST, "DBus 5")
  field( SXST, "DBus 6")
  field( SVST, "DBus 7")
  field( ZRVL, "32")
  field( ONVL, "33")
  field( TWVL, "34")
  field( THVL, "35")
  field( FRVL, "36")
  field( FVVL, "37")
  field( SXVL, "38")
  field( SVVL, "39")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV05-Src-Scale-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV05-Src-SP PP")
  field( ZRST, "Prescaler 0")
  field( ONST, "Prescaler 1")
  field( TWST, "Prescaler 2")
  field( THST, "Flip-flop 0")
  field( FRST, "Flip-flop 1")
  field( FVST, "Flip-flop 2")
  field( SXST, "Flip-flop 3")
  field( SVST, "Flip-flop 4")
  field( EIST, "Flip-flop 5")
  field( NIST, "Flip-flop 6")
  field( TEST, "Flip-flop 7")
  field( ELST, "Tri-state")
  field( TVST, "Force High")
  field( TTST, "Force Low")
  field( ZRVL, "40")
  field( ONVL, "41")
  field( TWVL, "42")
  field( THVL, "48")
  field( FRVL, "49")
  field( FVVL, "50")
  field( SXVL, "51")
  field( SVVL, "52")
  field( EIVL, "53")
  field( NIVL, "54")
  field( TEVL, "55")
  field( ELVL, "61")
  field( TVVL, "62")
  field( TTVL, "63")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(P)$(R=)$(S=:)OutFPUV05-Src-RB_") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV5")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut5, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV05-Src-RB")
}

record(stringin, "$(P)$(R=)$(S=:)OutFPUV05-Src-RB")
{
  field( DTYP, "LUT uint32 -> string")
  field(  INP, "$(P)$(R=)$(S=:)OutFPUV05-Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 32 = DBus 0")
  info(lutH , " 33 = DBus 1")
  info(lutI , " 34 = DBus 2")
  info(lutJ , " 35 = DBus 3")
  info(lutK , " 36 = DBus 4")
  info(lutL , " 37 = DBus 5")
  info(lutM , " 38 = DBus 6")
  info(lutN , " 39 = DBus 7")
  info(lutO , " 40 = Prescaler 0")
  info(lutP , " 41 = Prescaler 1")
  info(lutQ , " 42 = Prescaler 2")
  info(lutR , " 48 = Flip-flop 0")
  info(lutS , " 49 = Flip-flop 1")
  info(lutT , " 50 = Flip-flop 2")
  info(lutU , " 51 = Flip-flop 3")
  info(lutV , " 52 = Flip-flop 4")
  info(lutW , " 53 = Flip-flop 5")
  info(lutX , " 54 = Flip-flop 6")
  info(lutY , " 55 = Flip-flop 7")
  info(lutZ , " 61 = Tri-state")
  info(lutAA, " 62 = Force high")
  info(lutAB, " 63 = Force low")
}

record(longin, "$(P)$(R=)$(S=:)OutFPUV05-Src2-RB") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV5")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut5, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV05-Src-RB")
}

# Select which is displayed

record(waveform, "$(P)$(R=)$(S=:)OutFPUV05-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)OutFPUV05-User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(P)$(R=)$(S=:)OutFPUV06-Ena-SP") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Output UNIV6")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut6, PROP=Enable")
  field( PINI, "YES")
  field( ZNAM, "Disabled")
  field( ONAM, "Enabled")
  field( VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV06-Src-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV6")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut6, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV06-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV06-Src2-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV6")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut6, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV06-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV06-Src-Pulse-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV06-Src-SP PP")
  field( ZRST, "Pulser 0")
  field( ONST, "Pulser 1")
  field( TWST, "Pulser 2")
  field( THST, "Pulser 3")
  field( FRST, "Pulser 4")
  field( FVST, "Pulser 5")
  field( SXST, "Pulser 6")
  field( SVST, "Pulser 7")
  field( EIST, "Pulser 8")
  field( NIST, "Pulser 9")
  field( TEST, "Pulser 10")
  field( ELST, "Pulser 11")
  field( TVST, "Pulser 12")
  field( TTST, "Pulser 13")
  field( FTST, "Pulser 14")
  field( FFST, "Pulser 15")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THVL, "3")
  field( FRVL, "4")
  field( FVVL, "5")
  field( SXVL, "6")
  field( SVVL, "7")
  field( EIVL, "8")
  field( NIVL, "9")
  field( TEVL, "10")
  field( ELVL, "11")
  field( TVVL, "12")
  field( TTVL, "13")
  field( FTVL, "14")
  field( FFVL, "15")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV06-Src-DBus-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV06-Src-SP PP")
  field( ZRST, "DBus 0")
  field( ONST, "DBus 1")
  field( TWST, "DBus 2")
  field( THST, "DBus 3")
  field( FRST, "DBus 4")
  field( FVST, "DBus 5")
  field( SXST, "DBus 6")
  field( SVST, "DBus 7")
  field( ZRVL, "32")
  field( ONVL, "33")
  field( TWVL, "34")
  field( THVL, "35")
  field( FRVL, "36")
  field( FVVL, "37")
  field( SXVL, "38")
  field( SVVL, "39")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV06-Src-Scale-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV06-Src-SP PP")
  field( ZRST, "Prescaler 0")
  field( ONST, "Prescaler 1")
  field( TWST, "Prescaler 2")
  field( THST, "Flip-flop 0")
  field( FRST, "Flip-flop 1")
  field( FVST, "Flip-flop 2")
  field( SXST, "Flip-flop 3")
  field( SVST, "Flip-flop 4")
  field( EIST, "Flip-flop 5")
  field( NIST, "Flip-flop 6")
  field( TEST, "Flip-flop 7")
  field( ELST, "Tri-state")
  field( TVST, "Force High")
  field( TTST, "Force Low")
  field( ZRVL, "40")
  field( ONVL, "41")
  field( TWVL, "42")
  field( THVL, "48")
  field( FRVL, "49")
  field( FVVL, "50")
  field( SXVL, "51")
  field( SVVL, "52")
  field( EIVL, "53")
  field( NIVL, "54")
  field( TEVL, "55")
  field( ELVL, "61")
  field( TVVL, "62")
  field( TTVL, "63")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(P)$(R=)$(S=:)OutFPUV06-Src-RB_") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV6")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut6, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV06-Src-RB")
}

record(stringin, "$(P)$(R=)$(S=:)OutFPUV06-Src-RB")
{
  field( DTYP, "LUT uint32 -> string")
  field(  INP, "$(P)$(R=)$(S=:)OutFPUV06-Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 32 = DBus 0")
  info(lutH , " 33 = DBus 1")
  info(lutI , " 34 = DBus 2")
  info(lutJ , " 35 = DBus 3")
  info(lutK , " 36 = DBus 4")
  info(lutL , " 37 = DBus 5")
  info(lutM , " 38 = DBus 6")
  info(lutN , " 39 = DBus 7")
  info(lutO , " 40 = Prescaler 0")
  info(lutP , " 41 = Prescaler 1")
  info(lutQ , " 42 = Prescaler 2")
  info(lutR , " 48 = Flip-flop 0")
  info(lutS , " 49 = Flip-flop 1")
  info(lutT , " 50 = Flip-flop 2")
  info(lutU , " 51 = Flip-flop 3")
  info(lutV , " 52 = Flip-flop 4")
  info(lutW , " 53 = Flip-flop 5")
  info(lutX , " 54 = Flip-flop 6")
  info(lutY , " 55 = Flip-flop 7")
  info(lutZ , " 61 = Tri-state")
  info(lutAA, " 62 = Force high")
  info(lutAB, " 63 = Force low")
}

record(longin, "$(P)$(R=)$(S=:)OutFPUV06-Src2-RB") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV6")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut6, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV06-Src-RB")
}

# Select which is displayed

record(waveform, "$(P)$(R=)$(S=:)OutFPUV06-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)OutFPUV06-User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(P)$(R=)$(S=:)OutFPUV07-Ena-SP") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Output UNIV7")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut7, PROP=Enable")
  field( PINI, "YES")
  field( ZNAM, "Disabled")
  field( ONAM, "Enabled")
  field( VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV07-Src-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV7")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut7, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV07-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV07-Src2-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV7")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut7, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV07-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV07-Src-Pulse-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV07-Src-SP PP")
  field( ZRST, "Pulser 0")
  field( ONST, "Pulser 1")
  field( TWST, "Pulser 2")
  field( THST, "Pulser 3")
  field( FRST, "Pulser 4")
  field( FVST, "Pulser 5")
  field( SXST, "Pulser 6")
  field( SVST, "Pulser 7")
  field( EIST, "Pulser 8")
  field( NIST, "Pulser 9")
  field( TEST, "Pulser 10")
  field( ELST, "Pulser 11")
  field( TVST, "Pulser 12")
  field( TTST, "Pulser 13")
  field( FTST, "Pulser 14")
  field( FFST, "Pulser 15")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THVL, "3")
  field( FRVL, "4")
  field( FVVL, "5")
  field( SXVL, "6")
  field( SVVL, "7")
  field( EIVL, "8")
  field( NIVL, "9")
  field( TEVL, "10")
  field( ELVL, "11")
  field( TVVL, "12")
  field( TTVL, "13")
  field( FTVL, "14")
  field( FFVL, "15")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV07-Src-DBus-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV07-Src-SP PP")
  field( ZRST, "DBus 0")
  field( ONST, "DBus 1")
  field( TWST, "DBus 2")
  field( THST, "DBus 3")
  field( FRST, "DBus 4")
  field( FVST, "DBus 5")
  field( SXST, "DBus 6")
  field( SVST, "DBus 7")
  field( ZRVL, "32")
  field( ONVL, "33")
  field( TWVL, "34")
  field( THVL, "35")
  field( FRVL, "36")
  field( FVVL, "37")
  field( SXVL, "38")
  field( SVVL, "39")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV07-Src-Scale-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV07-Src-SP PP")
  field( ZRST, "Prescaler 0")
  field( ONST, "Prescaler 1")
  field( TWST, "Prescaler 2")
  field( THST, "Flip-flop 0")
  field( FRST, "Flip-flop 1")
  field( FVST, "Flip-flop 2")
  field( SXST, "Flip-flop 3")
  field( SVST, "Flip-flop 4")
  field( EIST, "Flip-flop 5")
  field( NIST, "Flip-flop 6")
  field( TEST, "Flip-flop 7")
  field( ELST, "Tri-state")
  field( TVST, "Force High")
  field( TTST, "Force Low")
  field( ZRVL, "40")
  field( ONVL, "41")
  field( TWVL, "42")
  field( THVL, "48")
  field( FRVL, "49")
  field( FVVL, "50")
  field( SXVL, "51")
  field( SVVL, "52")
  field( EIVL, "53")
  field( NIVL, "54")
  field( TEVL, "55")
  field( ELVL, "61")
  field( TVVL, "62")
  field( TTVL, "63")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(P)$(R=)$(S=:)OutFPUV07-Src-RB_") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV7")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut7, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV07-Src-RB")
}

record(stringin, "$(P)$(R=)$(S=:)OutFPUV07-Src-RB")
{
  field( DTYP, "LUT uint32 -> string")
  field(  INP, "$(P)$(R=)$(S=:)OutFPUV07-Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 32 = DBus 0")
  info(lutH , " 33 = DBus 1")
  info(lutI , " 34 = DBus 2")
  info(lutJ , " 35 = DBus 3")
  info(lutK , " 36 = DBus 4")
  info(lutL , " 37 = DBus 5")
  info(lutM , " 38 = DBus 6")
  info(lutN , " 39 = DBus 7")
  info(lutO , " 40 = Prescaler 0")
  info(lutP , " 41 = Prescaler 1")
  info(lutQ , " 42 = Prescaler 2")
  info(lutR , " 48 = Flip-flop 0")
  info(lutS , " 49 = Flip-flop 1")
  info(lutT , " 50 = Flip-flop 2")
  info(lutU , " 51 = Flip-flop 3")
  info(lutV , " 52 = Flip-flop 4")
  info(lutW , " 53 = Flip-flop 5")
  info(lutX , " 54 = Flip-flop 6")
  info(lutY , " 55 = Flip-flop 7")
  info(lutZ , " 61 = Tri-state")
  info(lutAA, " 62 = Force high")
  info(lutAB, " 63 = Force low")
}

record(longin, "$(P)$(R=)$(S=:)OutFPUV07-Src2-RB") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV7")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut7, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV07-Src-RB")
}

# Select which is displayed

record(waveform, "$(P)$(R=)$(S=:)OutFPUV07-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)OutFPUV07-User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(P)$(R=)$(S=:)OutFPUV08-Ena-SP") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Output UNIV8")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut8, PROP=Enable")
  field( PINI, "YES")
  field( ZNAM, "Disabled")
  field( ONAM, "Enabled")
  field( VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV08-Src-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV8")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut8, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV08-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV08-Src2-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV8")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut8, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV08-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV08-Src-Pulse-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV08-Src-SP PP")
  field( ZRST, "Pulser 0")
  field( ONST, "Pulser 1")
  field( TWST, "Pulser 2")
  field( THST, "Pulser 3")
  field( FRST, "Pulser 4")
  field( FVST, "Pulser 5")
  field( SXST, "Pulser 6")
  field( SVST, "Pulser 7")
  field( EIST, "Pulser 8")
  field( NIST, "Pulser 9")
  field( TEST, "Pulser 10")
  field( ELST, "Pulser 11")
  field( TVST, "Pulser 12")
  field( TTST, "Pulser 13")
  field( FTST, "Pulser 14")
  field( FFST, "Pulser 15")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THVL, "3")
  field( FRVL, "4")
  field( FVVL, "5")
  field( SXVL, "6")
  field( SVVL, "7")
  field( EIVL, "8")
  field( NIVL, "9")
  field( TEVL, "10")
  field( ELVL, "11")
  field( TVVL, "12")
  field( TTVL, "13")
  field( FTVL, "14")
  field( FFVL, "15")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV08-Src-DBus-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV08-Src-SP PP")
  field( ZRST, "DBus 0")
  field( ONST, "DBus 1")
  field( TWST, "DBus 2")
  field( THST, "DBus 3")
  field( FRST, "DBus 4")
  field( FVST, "DBus 5")
  field( SXST, "DBus 6")
  field( SVST, "DBus 7")
  field( ZRVL, "32")
  field( ONVL, "33")
  field( TWVL, "34")
  field( THVL, "35")
  field( FRVL, "36")
  field( FVVL, "37")
  field( SXVL, "38")
  field( SVVL, "39")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV08-Src-Scale-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV08-Src-SP PP")
  field( ZRST, "Prescaler 0")
  field( ONST, "Prescaler 1")
  field( TWST, "Prescaler 2")
  field( THST, "Flip-flop 0")
  field( FRST, "Flip-flop 1")
  field( FVST, "Flip-flop 2")
  field( SXST, "Flip-flop 3")
  field( SVST, "Flip-flop 4")
  field( EIST, "Flip-flop 5")
  field( NIST, "Flip-flop 6")
  field( TEST, "Flip-flop 7")
  field( ELST, "Tri-state")
  field( TVST, "Force High")
  field( TTST, "Force Low")
  field( ZRVL, "40")
  field( ONVL, "41")
  field( TWVL, "42")
  field( THVL, "48")
  field( FRVL, "49")
  field( FVVL, "50")
  field( SXVL, "51")
  field( SVVL, "52")
  field( EIVL, "53")
  field( NIVL, "54")
  field( TEVL, "55")
  field( ELVL, "61")
  field( TVVL, "62")
  field( TTVL, "63")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(P)$(R=)$(S=:)OutFPUV08-Src-RB_") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV8")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut8, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV08-Src-RB")
}

record(stringin, "$(P)$(R=)$(S=:)OutFPUV08-Src-RB")
{
  field( DTYP, "LUT uint32 -> string")
  field(  INP, "$(P)$(R=)$(S=:)OutFPUV08-Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 32 = DBus 0")
  info(lutH , " 33 = DBus 1")
  info(lutI , " 34 = DBus 2")
  info(lutJ , " 35 = DBus 3")
  info(lutK , " 36 = DBus 4")
  info(lutL , " 37 = DBus 5")
  info(lutM , " 38 = DBus 6")
  info(lutN , " 39 = DBus 7")
  info(lutO , " 40 = Prescaler 0")
  info(lutP , " 41 = Prescaler 1")
  info(lutQ , " 42 = Prescaler 2")
  info(lutR , " 48 = Flip-flop 0")
  info(lutS , " 49 = Flip-flop 1")
  info(lutT , " 50 = Flip-flop 2")
  info(lutU , " 51 = Flip-flop 3")
  info(lutV , " 52 = Flip-flop 4")
  info(lutW , " 53 = Flip-flop 5")
  info(lutX , " 54 = Flip-flop 6")
  info(lutY , " 55 = Flip-flop 7")
  info(lutZ , " 61 = Tri-state")
  info(lutAA, " 62 = Force high")
  info(lutAB, " 63 = Force low")
}

record(longin, "$(P)$(R=)$(S=:)OutFPUV08-Src2-RB") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV8")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut8, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV08-Src-RB")
}

# Select which is displayed

record(waveform, "$(P)$(R=)$(S=:)OutFPUV08-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)OutFPUV08-User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(P)$(R=)$(S=:)OutFPUV09-Ena-SP") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Output UNIV9")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut9, PROP=Enable")
  field( PINI, "YES")
  field( ZNAM, "Disabled")
  field( ONAM, "Enabled")
  field( VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV09-Src-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV9")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut9, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV09-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV09-Src2-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV9")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut9, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV09-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV09-Src-Pulse-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV09-Src-SP PP")
  field( ZRST, "Pulser 0")
  field( ONST, "Pulser 1")
  field( TWST, "Pulser 2")
  field( THST, "Pulser 3")
  field( FRST, "Pulser 4")
  field( FVST, "Pulser 5")
  field( SXST, "Pulser 6")
  field( SVST, "Pulser 7")
  field( EIST, "Pulser 8")
  field( NIST, "Pulser 9")
  field( TEST, "Pulser 10")
  field( ELST, "Pulser 11")
  field( TVST, "Pulser 12")
  field( TTST, "Pulser 13")
  field( FTST, "Pulser 14")
  field( FFST, "Pulser 15")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THVL, "3")
  field( FRVL, "4")
  field( FVVL, "5")
  field( SXVL, "6")
  field( SVVL, "7")
  field( EIVL, "8")
  field( NIVL, "9")
  field( TEVL, "10")
  field( ELVL, "11")
  field( TVVL, "12")
  field( TTVL, "13")
  field( FTVL, "14")
  field( FFVL, "15")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV09-Src-DBus-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV09-Src-SP PP")
  field( ZRST, "DBus 0")
  field( ONST, "DBus 1")
  field( TWST, "DBus 2")
  field( THST, "DBus 3")
  field( FRST, "DBus 4")
  field( FVST, "DBus 5")
  field( SXST, "DBus 6")
  field( SVST, "DBus 7")
  field( ZRVL, "32")
  field( ONVL, "33")
  field( TWVL, "34")
  field( THVL, "35")
  field( FRVL, "36")
  field( FVVL, "37")
  field( SXVL, "38")
  field( SVVL, "39")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV09-Src-Scale-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV09-Src-SP PP")
  field( ZRST, "Prescaler 0")
  field( ONST, "Prescaler 1")
  field( TWST, "Prescaler 2")
  field( THST, "Flip-flop 0")
  field( FRST, "Flip-flop 1")
  field( FVST, "Flip-flop 2")
  field( SXST, "Flip-flop 3")
  field( SVST, "Flip-flop 4")
  field( EIST, "Flip-flop 5")
  field( NIST, "Flip-flop 6")
  field( TEST, "Flip-flop 7")
  field( ELST, "Tri-state")
  field( TVST, "Force High")
  field( TTST, "Force Low")
  field( ZRVL, "40")
  field( ONVL, "41")
  field( TWVL, "42")
  field( THVL, "48")
  field( FRVL, "49")
  field( FVVL, "50")
  field( SXVL, "51")
  field( SVVL, "52")
  field( EIVL, "53")
  field( NIVL, "54")
  field( TEVL, "55")
  field( ELVL, "61")
  field( TVVL, "62")
  field( TTVL, "63")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(P)$(R=)$(S=:)OutFPUV09-Src-RB_") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV9")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut9, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV09-Src-RB")
}

record(stringin, "$(P)$(R=)$(S=:)OutFPUV09-Src-RB")
{
  field( DTYP, "LUT uint32 -> string")
  field(  INP, "$(P)$(R=)$(S=:)OutFPUV09-Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 32 = DBus 0")
  info(lutH , " 33 = DBus 1")
  info(lutI , " 34 = DBus 2")
  info(lutJ , " 35 = DBus 3")
  info(lutK , " 36 = DBus 4")
  info(lutL , " 37 = DBus 5")
  info(lutM , " 38 = DBus 6")
  info(lutN , " 39 = DBus 7")
  info(lutO , " 40 = Prescaler 0")
  info(lutP , " 41 = Prescaler 1")
  info(lutQ , " 42 = Prescaler 2")
  info(lutR , " 48 = Flip-flop 0")
  info(lutS , " 49 = Flip-flop 1")
  info(lutT , " 50 = Flip-flop 2")
  info(lutU , " 51 = Flip-flop 3")
  info(lutV , " 52 = Flip-flop 4")
  info(lutW , " 53 = Flip-flop 5")
  info(lutX , " 54 = Flip-flop 6")
  info(lutY , " 55 = Flip-flop 7")
  info(lutZ , " 61 = Tri-state")
  info(lutAA, " 62 = Force high")
  info(lutAB, " 63 = Force low")
}

record(longin, "$(P)$(R=)$(S=:)OutFPUV09-Src2-RB") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV9")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut9, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV09-Src-RB")
}

# Select which is displayed

record(waveform, "$(P)$(R=)$(S=:)OutFPUV09-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)OutFPUV09-User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(P)$(R=)$(S=:)OutFPUV10-Ena-SP") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Output UNIV10")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut10, PROP=Enable")
  field( PINI, "YES")
  field( ZNAM, "Disabled")
  field( ONAM, "Enabled")
  field( VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV10-Src-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV10")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut10, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV10-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV10-Src2-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV10")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut10, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV10-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV10-Src-Pulse-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV10-Src-SP PP")
  field( ZRST, "Pulser 0")
  field( ONST, "Pulser 1")
  field( TWST, "Pulser 2")
  field( THST, "Pulser 3")
  field( FRST, "Pulser 4")
  field( FVST, "Pulser 5")
  field( SXST, "Pulser 6")
  field( SVST, "Pulser 7")
  field( EIST, "Pulser 8")
  field( NIST, "Pulser 9")
  field( TEST, "Pulser 10")
  field( ELST, "Pulser 11")
  field( TVST, "Pulser 12")
  field( TTST, "Pulser 13")
  field( FTST, "Pulser 14")
  field( FFST, "Pulser 15")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THVL, "3")
  field( FRVL, "4")
  field( FVVL, "5")
  field( SXVL, "6")
  field( SVVL, "7")
  field( EIVL, "8")
  field( NIVL, "9")
  field( TEVL, "10")
  field( ELVL, "11")
  field( TVVL, "12")
  field( TTVL, "13")
  field( FTVL, "14")
  field( FFVL, "15")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV10-Src-DBus-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV10-Src-SP PP")
  field( ZRST, "DBus 0")
  field( ONST, "DBus 1")
  field( TWST, "DBus 2")
  field( THST, "DBus 3")
  field( FRST, "DBus 4")
  field( FVST, "DBus 5")
  field( SXST, "DBus 6")
  field( SVST, "DBus 7")
  field( ZRVL, "32")
  field( ONVL, "33")
  field( TWVL, "34")
  field( THVL, "35")
  field( FRVL, "36")
  field( FVVL, "37")
  field( SXVL, "38")
  field( SVVL, "39")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV10-Src-Scale-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV10-Src-SP PP")
  field( ZRST, "Prescaler 0")
  field( ONST, "Prescaler 1")
  field( TWST, "Prescaler 2")
  field( THST, "Flip-flop 0")
  field( FRST, "Flip-flop 1")
  field( FVST, "Flip-flop 2")
  field( SXST, "Flip-flop 3")
  field( SVST, "Flip-flop 4")
  field( EIST, "Flip-flop 5")
  field( NIST, "Flip-flop 6")
  field( TEST, "Flip-flop 7")
  field( ELST, "Tri-state")
  field( TVST, "Force High")
  field( TTST, "Force Low")
  field( ZRVL, "40")
  field( ONVL, "41")
  field( TWVL, "42")
  field( THVL, "48")
  field( FRVL, "49")
  field( FVVL, "50")
  field( SXVL, "51")
  field( SVVL, "52")
  field( EIVL, "53")
  field( NIVL, "54")
  field( TEVL, "55")
  field( ELVL, "61")
  field( TVVL, "62")
  field( TTVL, "63")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(P)$(R=)$(S=:)OutFPUV10-Src-RB_") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV10")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut10, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV10-Src-RB")
}

record(stringin, "$(P)$(R=)$(S=:)OutFPUV10-Src-RB")
{
  field( DTYP, "LUT uint32 -> string")
  field(  INP, "$(P)$(R=)$(S=:)OutFPUV10-Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 32 = DBus 0")
  info(lutH , " 33 = DBus 1")
  info(lutI , " 34 = DBus 2")
  info(lutJ , " 35 = DBus 3")
  info(lutK , " 36 = DBus 4")
  info(lutL , " 37 = DBus 5")
  info(lutM , " 38 = DBus 6")
  info(lutN , " 39 = DBus 7")
  info(lutO , " 40 = Prescaler 0")
  info(lutP , " 41 = Prescaler 1")
  info(lutQ , " 42 = Prescaler 2")
  info(lutR , " 48 = Flip-flop 0")
  info(lutS , " 49 = Flip-flop 1")
  info(lutT , " 50 = Flip-flop 2")
  info(lutU , " 51 = Flip-flop 3")
  info(lutV , " 52 = Flip-flop 4")
  info(lutW , " 53 = Flip-flop 5")
  info(lutX , " 54 = Flip-flop 6")
  info(lutY , " 55 = Flip-flop 7")
  info(lutZ , " 61 = Tri-state")
  info(lutAA, " 62 = Force high")
  info(lutAB, " 63 = Force low")
}

record(longin, "$(P)$(R=)$(S=:)OutFPUV10-Src2-RB") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV10")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut10, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV10-Src-RB")
}

# Select which is displayed

record(waveform, "$(P)$(R=)$(S=:)OutFPUV10-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)OutFPUV10-User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(P)$(R=)$(S=:)OutFPUV11-Ena-SP") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Output UNIV11")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut11, PROP=Enable")
  field( PINI, "YES")
  field( ZNAM, "Disabled")
  field( ONAM, "Enabled")
  field( VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV11-Src-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV11")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut11, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV11-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV11-Src2-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV11")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut11, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV11-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV11-Src-Pulse-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV11-Src-SP PP")
  field( ZRST, "Pulser 0")
  field( ONST, "Pulser 1")
  field( TWST, "Pulser 2")
  field( THST, "Pulser 3")
  field( FRST, "Pulser 4")
  field( FVST, "Pulser 5")
  field( SXST, "Pulser 6")
  field( SVST, "Pulser 7")
  field( EIST, "Pulser 8")
  field( NIST, "Pulser 9")
  field( TEST, "Pulser 10")
  field( ELST, "Pulser 11")
  field( TVST, "Pulser 12")
  field( TTST, "Pulser 13")
  field( FTST, "Pulser 14")
  field( FFST, "Pulser 15")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THVL, "3")
  field( FRVL, "4")
  field( FVVL, "5")
  field( SXVL, "6")
  field( SVVL, "7")
  field( EIVL, "8")
  field( NIVL, "9")
  field( TEVL, "10")
  field( ELVL, "11")
  field( TVVL, "12")
  field( TTVL, "13")
  field( FTVL, "14")
  field( FFVL, "15")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV11-Src-DBus-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV11-Src-SP PP")
  field( ZRST, "DBus 0")
  field( ONST, "DBus 1")
  field( TWST, "DBus 2")
  field( THST, "DBus 3")
  field( FRST, "DBus 4")
  field( FVST, "DBus 5")
  field( SXST, "DBus 6")
  field( SVST, "DBus 7")
  field( ZRVL, "32")
  field( ONVL, "33")
  field( TWVL, "34")
  field( THVL, "35")
  field( FRVL, "36")
  field( FVVL, "37")
  field( SXVL, "38")
  field( SVVL, "39")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV11-Src-Scale-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV11-Src-SP PP")
  field( ZRST, "Prescaler 0")
  field( ONST, "Prescaler 1")
  field( TWST, "Prescaler 2")
  field( THST, "Flip-flop 0")
  field( FRST, "Flip-flop 1")
  field( FVST, "Flip-flop 2")
  field( SXST, "Flip-flop 3")
  field( SVST, "Flip-flop 4")
  field( EIST, "Flip-flop 5")
  field( NIST, "Flip-flop 6")
  field( TEST, "Flip-flop 7")
  field( ELST, "Tri-state")
  field( TVST, "Force High")
  field( TTST, "Force Low")
  field( ZRVL, "40")
  field( ONVL, "41")
  field( TWVL, "42")
  field( THVL, "48")
  field( FRVL, "49")
  field( FVVL, "50")
  field( SXVL, "51")
  field( SVVL, "52")
  field( EIVL, "53")
  field( NIVL, "54")
  field( TEVL, "55")
  field( ELVL, "61")
  field( TVVL, "62")
  field( TTVL, "63")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(P)$(R=)$(S=:)OutFPUV11-Src-RB_") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV11")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut11, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV11-Src-RB")
}

record(stringin, "$(P)$(R=)$(S=:)OutFPUV11-Src-RB")
{
  field( DTYP, "LUT uint32 -> string")
  field(  INP, "$(P)$(R=)$(S=:)OutFPUV11-Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 32 = DBus 0")
  info(lutH , " 33 = DBus 1")
  info(lutI , " 34 = DBus 2")
  info(lutJ , " 35 = DBus 3")
  info(lutK , " 36 = DBus 4")
  info(lutL , " 37 = DBus 5")
  info(lutM , " 38 = DBus 6")
  info(lutN , " 39 = DBus 7")
  info(lutO , " 40 = Prescaler 0")
  info(lutP , " 41 = Prescaler 1")
  info(lutQ , " 42 = Prescaler 2")
  info(lutR , " 48 = Flip-flop 0")
  info(lutS , " 49 = Flip-flop 1")
  info(lutT , " 50 = Flip-flop 2")
  info(lutU , " 51 = Flip-flop 3")
  info(lutV , " 52 = Flip-flop 4")
  info(lutW , " 53 = Flip-flop 5")
  info(lutX , " 54 = Flip-flop 6")
  info(lutY , " 55 = Flip-flop 7")
  info(lutZ , " 61 = Tri-state")
  info(lutAA, " 62 = Force high")
  info(lutAB, " 63 = Force low")
}

record(longin, "$(P)$(R=)$(S=:)OutFPUV11-Src2-RB") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV11")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut11, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV11-Src-RB")
}

# Select which is displayed

record(waveform, "$(P)$(R=)$(S=:)OutFPUV11-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)OutFPUV11-User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(P)$(R=)$(S=:)OutFPUV12-Ena-SP") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Output UNIV12")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut12, PROP=Enable")
  field( PINI, "YES")
  field( ZNAM, "Disabled")
  field( ONAM, "Enabled")
  field( VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV12-Src-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV12")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut12, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV12-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV12-Src2-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV12")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut12, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV12-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV12-Src-Pulse-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV12-Src-SP PP")
  field( ZRST, "Pulser 0")
  field( ONST, "Pulser 1")
  field( TWST, "Pulser 2")
  field( THST, "Pulser 3")
  field( FRST, "Pulser 4")
  field( FVST, "Pulser 5")
  field( SXST, "Pulser 6")
  field( SVST, "Pulser 7")
  field( EIST, "Pulser 8")
  field( NIST, "Pulser 9")
  field( TEST, "Pulser 10")
  field( ELST, "Pulser 11")
  field( TVST, "Pulser 12")
  field( TTST, "Pulser 13")
  field( FTST, "Pulser 14")
  field( FFST, "Pulser 15")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THVL, "3")
  field( FRVL, "4")
  field( FVVL, "5")
  field( SXVL, "6")
  field( SVVL, "7")
  field( EIVL, "8")
  field( NIVL, "9")
  field( TEVL, "10")
  field( ELVL, "11")
  field( TVVL, "12")
  field( TTVL, "13")
  field( FTVL, "14")
  field( FFVL, "15")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV12-Src-DBus-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV12-Src-SP PP")
  field( ZRST, "DBus 0")
  field( ONST, "DBus 1")
  field( TWST, "DBus 2")
  field( THST, "DBus 3")
  field( FRST, "DBus 4")
  field( FVST, "DBus 5")
  field( SXST, "DBus 6")
  field( SVST, "DBus 7")
  field( ZRVL, "32")
  field( ONVL, "33")
  field( TWVL, "34")
  field( THVL, "35")
  field( FRVL, "36")
  field( FVVL, "37")
  field( SXVL, "38")
  field( SVVL, "39")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV12-Src-Scale-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV12-Src-SP PP")
  field( ZRST, "Prescaler 0")
  field( ONST, "Prescaler 1")
  field( TWST, "Prescaler 2")
  field( THST, "Flip-flop 0")
  field( FRST, "Flip-flop 1")
  field( FVST, "Flip-flop 2")
  field( SXST, "Flip-flop 3")
  field( SVST, "Flip-flop 4")
  field( EIST, "Flip-flop 5")
  field( NIST, "Flip-flop 6")
  field( TEST, "Flip-flop 7")
  field( ELST, "Tri-state")
  field( TVST, "Force High")
  field( TTST, "Force Low")
  field( ZRVL, "40")
  field( ONVL, "41")
  field( TWVL, "42")
  field( THVL, "48")
  field( FRVL, "49")
  field( FVVL, "50")
  field( SXVL, "51")
  field( SVVL, "52")
  field( EIVL, "53")
  field( NIVL, "54")
  field( TEVL, "55")
  field( ELVL, "61")
  field( TVVL, "62")
  field( TTVL, "63")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(P)$(R=)$(S=:)OutFPUV12-Src-RB_") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV12")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut12, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV12-Src-RB")
}

record(stringin, "$(P)$(R=)$(S=:)OutFPUV12-Src-RB")
{
  field( DTYP, "LUT uint32 -> string")
  field(  INP, "$(P)$(R=)$(S=:)OutFPUV12-Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 32 = DBus 0")
  info(lutH , " 33 = DBus 1")
  info(lutI , " 34 = DBus 2")
  info(lutJ , " 35 = DBus 3")
  info(lutK , " 36 = DBus 4")
  info(lutL , " 37 = DBus 5")
  info(lutM , " 38 = DBus 6")
  info(lutN , " 39 = DBus 7")
  info(lutO , " 40 = Prescaler 0")
  info(lutP , " 41 = Prescaler 1")
  info(lutQ , " 42 = Prescaler 2")
  info(lutR , " 48 = Flip-flop 0")
  info(lutS , " 49 = Flip-flop 1")
  info(lutT , " 50 = Flip-flop 2")
  info(lutU , " 51 = Flip-flop 3")
  info(lutV , " 52 = Flip-flop 4")
  info(lutW , " 53 = Flip-flop 5")
  info(lutX , " 54 = Flip-flop 6")
  info(lutY , " 55 = Flip-flop 7")
  info(lutZ , " 61 = Tri-state")
  info(lutAA, " 62 = Force high")
  info(lutAB, " 63 = Force low")
}

record(longin, "$(P)$(R=)$(S=:)OutFPUV12-Src2-RB") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV12")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut12, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV12-Src-RB")
}

# Select which is displayed

record(waveform, "$(P)$(R=)$(S=:)OutFPUV12-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)OutFPUV12-User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(P)$(R=)$(S=:)OutFPUV13-Ena-SP") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Output UNIV13")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut13, PROP=Enable")
  field( PINI, "YES")
  field( ZNAM, "Disabled")
  field( ONAM, "Enabled")
  field( VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV13-Src-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV13")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut13, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV13-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV13-Src2-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV13")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut13, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV13-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV13-Src-Pulse-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV13-Src-SP PP")
  field( ZRST, "Pulser 0")
  field( ONST, "Pulser 1")
  field( TWST, "Pulser 2")
  field( THST, "Pulser 3")
  field( FRST, "Pulser 4")
  field( FVST, "Pulser 5")
  field( SXST, "Pulser 6")
  field( SVST, "Pulser 7")
  field( EIST, "Pulser 8")
  field( NIST, "Pulser 9")
  field( TEST, "Pulser 10")
  field( ELST, "Pulser 11")
  field( TVST, "Pulser 12")
  field( TTST, "Pulser 13")
  field( FTST, "Pulser 14")
  field( FFST, "Pulser 15")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THVL, "3")
  field( FRVL, "4")
  field( FVVL, "5")
  field( SXVL, "6")
  field( SVVL, "7")
  field( EIVL, "8")
  field( NIVL, "9")
  field( TEVL, "10")
  field( ELVL, "11")
  field( TVVL, "12")
  field( TTVL, "13")
  field( FTVL, "14")
  field( FFVL, "15")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV13-Src-DBus-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV13-Src-SP PP")
  field( ZRST, "DBus 0")
  field( ONST, "DBus 1")
  field( TWST, "DBus 2")
  field( THST, "DBus 3")
  field( FRST, "DBus 4")
  field( FVST, "DBus 5")
  field( SXST, "DBus 6")
  field( SVST, "DBus 7")
  field( ZRVL, "32")
  field( ONVL, "33")
  field( TWVL, "34")
  field( THVL, "35")
  field( FRVL, "36")
  field( FVVL, "37")
  field( SXVL, "38")
  field( SVVL, "39")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV13-Src-Scale-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV13-Src-SP PP")
  field( ZRST, "Prescaler 0")
  field( ONST, "Prescaler 1")
  field( TWST, "Prescaler 2")
  field( THST, "Flip-flop 0")
  field( FRST, "Flip-flop 1")
  field( FVST, "Flip-flop 2")
  field( SXST, "Flip-flop 3")
  field( SVST, "Flip-flop 4")
  field( EIST, "Flip-flop 5")
  field( NIST, "Flip-flop 6")
  field( TEST, "Flip-flop 7")
  field( ELST, "Tri-state")
  field( TVST, "Force High")
  field( TTST, "Force Low")
  field( ZRVL, "40")
  field( ONVL, "41")
  field( TWVL, "42")
  field( THVL, "48")
  field( FRVL, "49")
  field( FVVL, "50")
  field( SXVL, "51")
  field( SVVL, "52")
  field( EIVL, "53")
  field( NIVL, "54")
  field( TEVL, "55")
  field( ELVL, "61")
  field( TVVL, "62")
  field( TTVL, "63")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(P)$(R=)$(S=:)OutFPUV13-Src-RB_") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV13")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut13, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV13-Src-RB")
}

record(stringin, "$(P)$(R=)$(S=:)OutFPUV13-Src-RB")
{
  field( DTYP, "LUT uint32 -> string")
  field(  INP, "$(P)$(R=)$(S=:)OutFPUV13-Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 32 = DBus 0")
  info(lutH , " 33 = DBus 1")
  info(lutI , " 34 = DBus 2")
  info(lutJ , " 35 = DBus 3")
  info(lutK , " 36 = DBus 4")
  info(lutL , " 37 = DBus 5")
  info(lutM , " 38 = DBus 6")
  info(lutN , " 39 = DBus 7")
  info(lutO , " 40 = Prescaler 0")
  info(lutP , " 41 = Prescaler 1")
  info(lutQ , " 42 = Prescaler 2")
  info(lutR , " 48 = Flip-flop 0")
  info(lutS , " 49 = Flip-flop 1")
  info(lutT , " 50 = Flip-flop 2")
  info(lutU , " 51 = Flip-flop 3")
  info(lutV , " 52 = Flip-flop 4")
  info(lutW , " 53 = Flip-flop 5")
  info(lutX , " 54 = Flip-flop 6")
  info(lutY , " 55 = Flip-flop 7")
  info(lutZ , " 61 = Tri-state")
  info(lutAA, " 62 = Force high")
  info(lutAB, " 63 = Force low")
}

record(longin, "$(P)$(R=)$(S=:)OutFPUV13-Src2-RB") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV13")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut13, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV13-Src-RB")
}

# Select which is displayed

record(waveform, "$(P)$(R=)$(S=:)OutFPUV13-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)OutFPUV13-User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(P)$(R=)$(S=:)OutFPUV14-Ena-SP") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Output UNIV14")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut14, PROP=Enable")
  field( PINI, "YES")
  field( ZNAM, "Disabled")
  field( ONAM, "Enabled")
  field( VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV14-Src-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV14")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut14, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV14-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV14-Src2-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV14")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut14, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV14-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV14-Src-Pulse-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV14-Src-SP PP")
  field( ZRST, "Pulser 0")
  field( ONST, "Pulser 1")
  field( TWST, "Pulser 2")
  field( THST, "Pulser 3")
  field( FRST, "Pulser 4")
  field( FVST, "Pulser 5")
  field( SXST, "Pulser 6")
  field( SVST, "Pulser 7")
  field( EIST, "Pulser 8")
  field( NIST, "Pulser 9")
  field( TEST, "Pulser 10")
  field( ELST, "Pulser 11")
  field( TVST, "Pulser 12")
  field( TTST, "Pulser 13")
  field( FTST, "Pulser 14")
  field( FFST, "Pulser 15")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THVL, "3")
  field( FRVL, "4")
  field( FVVL, "5")
  field( SXVL, "6")
  field( SVVL, "7")
  field( EIVL, "8")
  field( NIVL, "9")
  field( TEVL, "10")
  field( ELVL, "11")
  field( TVVL, "12")
  field( TTVL, "13")
  field( FTVL, "14")
  field( FFVL, "15")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV14-Src-DBus-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV14-Src-SP PP")
  field( ZRST, "DBus 0")
  field( ONST, "DBus 1")
  field( TWST, "DBus 2")
  field( THST, "DBus 3")
  field( FRST, "DBus 4")
  field( FVST, "DBus 5")
  field( SXST, "DBus 6")
  field( SVST, "DBus 7")
  field( ZRVL, "32")
  field( ONVL, "33")
  field( TWVL, "34")
  field( THVL, "35")
  field( FRVL, "36")
  field( FVVL, "37")
  field( SXVL, "38")
  field( SVVL, "39")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV14-Src-Scale-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV14-Src-SP PP")
  field( ZRST, "Prescaler 0")
  field( ONST, "Prescaler 1")
  field( TWST, "Prescaler 2")
  field( THST, "Flip-flop 0")
  field( FRST, "Flip-flop 1")
  field( FVST, "Flip-flop 2")
  field( SXST, "Flip-flop 3")
  field( SVST, "Flip-flop 4")
  field( EIST, "Flip-flop 5")
  field( NIST, "Flip-flop 6")
  field( TEST, "Flip-flop 7")
  field( ELST, "Tri-state")
  field( TVST, "Force High")
  field( TTST, "Force Low")
  field( ZRVL, "40")
  field( ONVL, "41")
  field( TWVL, "42")
  field( THVL, "48")
  field( FRVL, "49")
  field( FVVL, "50")
  field( SXVL, "51")
  field( SVVL, "52")
  field( EIVL, "53")
  field( NIVL, "54")
  field( TEVL, "55")
  field( ELVL, "61")
  field( TVVL, "62")
  field( TTVL, "63")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(P)$(R=)$(S=:)OutFPUV14-Src-RB_") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV14")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut14, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV14-Src-RB")
}

record(stringin, "$(P)$(R=)$(S=:)OutFPUV14-Src-RB")
{
  field( DTYP, "LUT uint32 -> string")
  field(  INP, "$(P)$(R=)$(S=:)OutFPUV14-Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 32 = DBus 0")
  info(lutH , " 33 = DBus 1")
  info(lutI , " 34 = DBus 2")
  info(lutJ , " 35 = DBus 3")
  info(lutK , " 36 = DBus 4")
  info(lutL , " 37 = DBus 5")
  info(lutM , " 38 = DBus 6")
  info(lutN , " 39 = DBus 7")
  info(lutO , " 40 = Prescaler 0")
  info(lutP , " 41 = Prescaler 1")
  info(lutQ , " 42 = Prescaler 2")
  info(lutR , " 48 = Flip-flop 0")
  info(lutS , " 49 = Flip-flop 1")
  info(lutT , " 50 = Flip-flop 2")
  info(lutU , " 51 = Flip-flop 3")
  info(lutV , " 52 = Flip-flop 4")
  info(lutW , " 53 = Flip-flop 5")
  info(lutX , " 54 = Flip-flop 6")
  info(lutY , " 55 = Flip-flop 7")
  info(lutZ , " 61 = Tri-state")
  info(lutAA, " 62 = Force high")
  info(lutAB, " 63 = Force low")
}

record(longin, "$(P)$(R=)$(S=:)OutFPUV14-Src2-RB") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV14")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut14, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV14-Src-RB")
}

# Select which is displayed

record(waveform, "$(P)$(R=)$(S=:)OutFPUV14-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)OutFPUV14-User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(P)$(R=)$(S=:)OutFPUV15-Ena-SP") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Output UNIV15")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut15, PROP=Enable")
  field( PINI, "YES")
  field( ZNAM, "Disabled")
  field( ONAM, "Enabled")
  field( VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV15-Src-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV15")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut15, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV15-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(P)$(R=)$(S=:)OutFPUV15-Src2-SP") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV15")
  field( OUT , "@OBJ=$(OBJ):FrontUnivOut15, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV15-Src-RB_")
  field( PINI, "YES")
  field( VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV15-Src-Pulse-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV15-Src-SP PP")
  field( ZRST, "Pulser 0")
  field( ONST, "Pulser 1")
  field( TWST, "Pulser 2")
  field( THST, "Pulser 3")
  field( FRST, "Pulser 4")
  field( FVST, "Pulser 5")
  field( SXST, "Pulser 6")
  field( SVST, "Pulser 7")
  field( EIST, "Pulser 8")
  field( NIST, "Pulser 9")
  field( TEST, "Pulser 10")
  field( ELST, "Pulser 11")
  field( TVST, "Pulser 12")
  field( TTST, "Pulser 13")
  field( FTST, "Pulser 14")
  field( FFST, "Pulser 15")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THVL, "3")
  field( FRVL, "4")
  field( FVVL, "5")
  field( SXVL, "6")
  field( SVVL, "7")
  field( EIVL, "8")
  field( NIVL, "9")
  field( TEVL, "10")
  field( ELVL, "11")
  field( TVVL, "12")
  field( TTVL, "13")
  field( FTVL, "14")
  field( FFVL, "15")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV15-Src-DBus-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV15-Src-SP PP")
  field( ZRST, "DBus 0")
  field( ONST, "DBus 1")
  field( TWST, "DBus 2")
  field( THST, "DBus 3")
  field( FRST, "DBus 4")
  field( FVST, "DBus 5")
  field( SXST, "DBus 6")
  field( SVST, "DBus 7")
  field( ZRVL, "32")
  field( ONVL, "33")
  field( TWVL, "34")
  field( THVL, "35")
  field( FRVL, "36")
  field( FVVL, "37")
  field( SXVL, "38")
  field( SVVL, "39")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)OutFPUV15-Src-Scale-SP") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(P)$(R=)$(S=:)OutFPUV15-Src-SP PP")
  field( ZRST, "Prescaler 0")
  field( ONST, "Prescaler 1")
  field( TWST, "Prescaler 2")
  field( THST, "Flip-flop 0")
  field( FRST, "Flip-flop 1")
  field( FVST, "Flip-flop 2")
  field( SXST, "Flip-flop 3")
  field( SVST, "Flip-flop 4")
  field( EIST, "Flip-flop 5")
  field( NIST, "Flip-flop 6")
  field( TEST, "Flip-flop 7")
  field( ELST, "Tri-state")
  field( TVST, "Force High")
  field( TTST, "Force Low")
  field( ZRVL, "40")
  field( ONVL, "41")
  field( TWVL, "42")
  field( THVL, "48")
  field( FRVL, "49")
  field( FVVL, "50")
  field( SXVL, "51")
  field( SVVL, "52")
  field( EIVL, "53")
  field( NIVL, "54")
  field( TEVL, "55")
  field( ELVL, "61")
  field( TVVL, "62")
  field( TTVL, "63")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(P)$(R=)$(S=:)OutFPUV15-Src-RB_") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV15")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut15, PROP=Map")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV15-Src-RB")
}

record(stringin, "$(P)$(R=)$(S=:)OutFPUV15-Src-RB")
{
  field( DTYP, "LUT uint32 -> string")
  field(  INP, "$(P)$(R=)$(S=:)OutFPUV15-Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 32 = DBus 0")
  info(lutH , " 33 = DBus 1")
  info(lutI , " 34 = DBus 2")
  info(lutJ , " 35 = DBus 3")
  info(lutK , " 36 = DBus 4")
  info(lutL , " 37 = DBus 5")
  info(lutM , " 38 = DBus 6")
  info(lutN , " 39 = DBus 7")
  info(lutO , " 40 = Prescaler 0")
  info(lutP , " 41 = Prescaler 1")
  info(lutQ , " 42 = Prescaler 2")
  info(lutR , " 48 = Flip-flop 0")
  info(lutS , " 49 = Flip-flop 1")
  info(lutT , " 50 = Flip-flop 2")
  info(lutU , " 51 = Flip-flop 3")
  info(lutV , " 52 = Flip-flop 4")
  info(lutW , " 53 = Flip-flop 5")
  info(lutX , " 54 = Flip-flop 6")
  info(lutY , " 55 = Flip-flop 7")
  info(lutZ , " 61 = Tri-state")
  info(lutAA, " 62 = Force high")
  info(lutAB, " 63 = Force low")
}

record(longin, "$(P)$(R=)$(S=:)OutFPUV15-Src2-RB") {
  field( DTYP, "Obj Prop uint32")
  field( DESC, "UNIV15")
  field( INP , "@OBJ=$(OBJ):FrontUnivOut15, PROP=Map2")
  field( FLNK, "$(P)$(R=)$(S=:)OutFPUV15-Src-RB")
}

# Select which is displayed

record(waveform, "$(P)$(R=)$(S=:)OutFPUV15-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)OutFPUV15-User-SP")
}
# EVR "internal" (software) mapped output state

record(bi, "$(P)$(R=)$(S=:)OutInt-State-Sts") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Output State")
  field( INP , "@OBJ=$(OBJ), PROP=SW Output status")
  field( SCAN, ".1 second")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

record(bo, "$(P)$(R=)$(S=:)DlyGen0-Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul0, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)DlyGen0-Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul0, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen0-Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul0, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 0")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen0-Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen0-Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul0, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen0-Delay-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen0-Delay-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul0, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field( HSV, "MAJOR")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen0-Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul0, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen0-Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen0-Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul0, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen0-Width-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen0-Width-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul0, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field( HSV, "MAJOR")
}

record(longout, "$(P)$(R=)$(S=:)DlyGen0-Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul0, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "1")
  field(DRVH, "0xffff")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen0-Prescaler-RB")
  field(DISP, "0")
  field(DISA, "0")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen0-Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul0, PROP=Prescaler")
  field(HOPR, "0xffff")
  field(LOPR, "1")
  field(HIGH, "0xffff")
  field( HSV, "MAJOR")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen0-Res-I")
}

record(calc, "$(P)$(R=)$(S=:)DlyGen0-Res-I") {
  field(DESC, "Resolution")
  field(INPA, "$(P)$(R=)$(S=:)DlyGen0-Prescaler-RB MS")
  field(INPB, "$(P)$(R=)$(S=:)Link-ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen0-Res-FO_")
}

record(fanout, "$(P)$(R=)$(S=:)DlyGen0-Res-FO_") {
  field(DESC, "Clock change resync")
  field(LNK1, "$(P)$(R=)$(S=:)DlyGen0-Delay-SP")
  field(LNK2, "$(P)$(R=)$(S=:)DlyGen0-Width-SP")
}

record(waveform, "$(P)$(R=)$(S=:)DlyGen0-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

record(bo, "$(P)$(R=)$(S=:)DlyGen1-Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul1, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)DlyGen1-Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul1, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen1-Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul1, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 1")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen1-Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen1-Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul1, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen1-Delay-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen1-Delay-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul1, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field( HSV, "MAJOR")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen1-Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul1, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen1-Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen1-Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul1, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen1-Width-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen1-Width-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul1, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field( HSV, "MAJOR")
}

record(longout, "$(P)$(R=)$(S=:)DlyGen1-Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul1, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "1")
  field(DRVH, "0xffff")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen1-Prescaler-RB")
  field(DISP, "0")
  field(DISA, "0")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen1-Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul1, PROP=Prescaler")
  field(HOPR, "0xffff")
  field(LOPR, "1")
  field(HIGH, "0xffff")
  field( HSV, "MAJOR")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen1-Res-I")
}

record(calc, "$(P)$(R=)$(S=:)DlyGen1-Res-I") {
  field(DESC, "Resolution")
  field(INPA, "$(P)$(R=)$(S=:)DlyGen1-Prescaler-RB MS")
  field(INPB, "$(P)$(R=)$(S=:)Link-ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen1-Res-FO_")
}

record(fanout, "$(P)$(R=)$(S=:)DlyGen1-Res-FO_") {
  field(DESC, "Clock change resync")
  field(LNK1, "$(P)$(R=)$(S=:)DlyGen1-Delay-SP")
  field(LNK2, "$(P)$(R=)$(S=:)DlyGen1-Width-SP")
}

record(waveform, "$(P)$(R=)$(S=:)DlyGen1-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

record(bo, "$(P)$(R=)$(S=:)DlyGen2-Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul2, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)DlyGen2-Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul2, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen2-Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul2, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 2")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen2-Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen2-Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul2, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen2-Delay-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen2-Delay-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul2, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field( HSV, "MAJOR")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen2-Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul2, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen2-Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen2-Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul2, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen2-Width-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen2-Width-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul2, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field( HSV, "MAJOR")
}

record(longout, "$(P)$(R=)$(S=:)DlyGen2-Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul2, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "1")
  field(DRVH, "0xffff")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen2-Prescaler-RB")
  field(DISP, "0")
  field(DISA, "0")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen2-Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul2, PROP=Prescaler")
  field(HOPR, "0xffff")
  field(LOPR, "1")
  field(HIGH, "0xffff")
  field( HSV, "MAJOR")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen2-Res-I")
}

record(calc, "$(P)$(R=)$(S=:)DlyGen2-Res-I") {
  field(DESC, "Resolution")
  field(INPA, "$(P)$(R=)$(S=:)DlyGen2-Prescaler-RB MS")
  field(INPB, "$(P)$(R=)$(S=:)Link-ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen2-Res-FO_")
}

record(fanout, "$(P)$(R=)$(S=:)DlyGen2-Res-FO_") {
  field(DESC, "Clock change resync")
  field(LNK1, "$(P)$(R=)$(S=:)DlyGen2-Delay-SP")
  field(LNK2, "$(P)$(R=)$(S=:)DlyGen2-Width-SP")
}

record(waveform, "$(P)$(R=)$(S=:)DlyGen2-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

record(bo, "$(P)$(R=)$(S=:)DlyGen3-Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul3, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)DlyGen3-Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul3, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen3-Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul3, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 3")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen3-Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen3-Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul3, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen3-Delay-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen3-Delay-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul3, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field( HSV, "MAJOR")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen3-Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul3, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen3-Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen3-Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul3, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen3-Width-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen3-Width-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul3, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field( HSV, "MAJOR")
}

record(longout, "$(P)$(R=)$(S=:)DlyGen3-Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul3, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "1")
  field(DRVH, "0xffff")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen3-Prescaler-RB")
  field(DISP, "0")
  field(DISA, "0")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen3-Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul3, PROP=Prescaler")
  field(HOPR, "0xffff")
  field(LOPR, "1")
  field(HIGH, "0xffff")
  field( HSV, "MAJOR")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen3-Res-I")
}

record(calc, "$(P)$(R=)$(S=:)DlyGen3-Res-I") {
  field(DESC, "Resolution")
  field(INPA, "$(P)$(R=)$(S=:)DlyGen3-Prescaler-RB MS")
  field(INPB, "$(P)$(R=)$(S=:)Link-ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen3-Res-FO_")
}

record(fanout, "$(P)$(R=)$(S=:)DlyGen3-Res-FO_") {
  field(DESC, "Clock change resync")
  field(LNK1, "$(P)$(R=)$(S=:)DlyGen3-Delay-SP")
  field(LNK2, "$(P)$(R=)$(S=:)DlyGen3-Width-SP")
}

record(waveform, "$(P)$(R=)$(S=:)DlyGen3-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

record(bo, "$(P)$(R=)$(S=:)DlyGen4-Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul4, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)DlyGen4-Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul4, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen4-Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul4, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 4")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen4-Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen4-Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul4, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen4-Delay-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen4-Delay-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul4, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field( HSV, "MAJOR")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen4-Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul4, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen4-Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen4-Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul4, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen4-Width-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen4-Width-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul4, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field( HSV, "MAJOR")
}

record(longout, "$(P)$(R=)$(S=:)DlyGen4-Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul4, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen4-Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen4-Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul4, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field( HSV, "MAJOR")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen4-Res-I")
}

record(calc, "$(P)$(R=)$(S=:)DlyGen4-Res-I") {
  field(DESC, "Resolution")
  field(INPA, "$(P)$(R=)$(S=:)DlyGen4-Prescaler-RB MS")
  field(INPB, "$(P)$(R=)$(S=:)Link-ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen4-Res-FO_")
}

record(fanout, "$(P)$(R=)$(S=:)DlyGen4-Res-FO_") {
  field(DESC, "Clock change resync")
  field(LNK1, "$(P)$(R=)$(S=:)DlyGen4-Delay-SP")
  field(LNK2, "$(P)$(R=)$(S=:)DlyGen4-Width-SP")
}

record(waveform, "$(P)$(R=)$(S=:)DlyGen4-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

record(bo, "$(P)$(R=)$(S=:)DlyGen5-Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul5, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)DlyGen5-Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul5, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen5-Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul5, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 5")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen5-Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen5-Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul5, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen5-Delay-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen5-Delay-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul5, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field( HSV, "MAJOR")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen5-Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul5, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen5-Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen5-Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul5, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen5-Width-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen5-Width-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul5, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field( HSV, "MAJOR")
}

record(longout, "$(P)$(R=)$(S=:)DlyGen5-Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul5, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen5-Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen5-Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul5, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field( HSV, "MAJOR")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen5-Res-I")
}

record(calc, "$(P)$(R=)$(S=:)DlyGen5-Res-I") {
  field(DESC, "Resolution")
  field(INPA, "$(P)$(R=)$(S=:)DlyGen5-Prescaler-RB MS")
  field(INPB, "$(P)$(R=)$(S=:)Link-ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen5-Res-FO_")
}

record(fanout, "$(P)$(R=)$(S=:)DlyGen5-Res-FO_") {
  field(DESC, "Clock change resync")
  field(LNK1, "$(P)$(R=)$(S=:)DlyGen5-Delay-SP")
  field(LNK2, "$(P)$(R=)$(S=:)DlyGen5-Width-SP")
}

record(waveform, "$(P)$(R=)$(S=:)DlyGen5-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

record(bo, "$(P)$(R=)$(S=:)DlyGen6-Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul6, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)DlyGen6-Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul6, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen6-Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul6, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 6")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen6-Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen6-Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul6, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen6-Delay-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen6-Delay-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul6, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field( HSV, "MAJOR")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen6-Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul6, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen6-Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen6-Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul6, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen6-Width-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen6-Width-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul6, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field( HSV, "MAJOR")
}

record(longout, "$(P)$(R=)$(S=:)DlyGen6-Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul6, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen6-Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen6-Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul6, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field( HSV, "MAJOR")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen6-Res-I")
}

record(calc, "$(P)$(R=)$(S=:)DlyGen6-Res-I") {
  field(DESC, "Resolution")
  field(INPA, "$(P)$(R=)$(S=:)DlyGen6-Prescaler-RB MS")
  field(INPB, "$(P)$(R=)$(S=:)Link-ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen6-Res-FO_")
}

record(fanout, "$(P)$(R=)$(S=:)DlyGen6-Res-FO_") {
  field(DESC, "Clock change resync")
  field(LNK1, "$(P)$(R=)$(S=:)DlyGen6-Delay-SP")
  field(LNK2, "$(P)$(R=)$(S=:)DlyGen6-Width-SP")
}

record(waveform, "$(P)$(R=)$(S=:)DlyGen6-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

record(bo, "$(P)$(R=)$(S=:)DlyGen7-Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul7, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)DlyGen7-Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul7, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen7-Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul7, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 7")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen7-Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen7-Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul7, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen7-Delay-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen7-Delay-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul7, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field( HSV, "MAJOR")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen7-Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul7, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen7-Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen7-Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul7, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen7-Width-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen7-Width-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul7, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field( HSV, "MAJOR")
}

record(longout, "$(P)$(R=)$(S=:)DlyGen7-Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul7, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen7-Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen7-Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul7, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field( HSV, "MAJOR")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen7-Res-I")
}

record(calc, "$(P)$(R=)$(S=:)DlyGen7-Res-I") {
  field(DESC, "Resolution")
  field(INPA, "$(P)$(R=)$(S=:)DlyGen7-Prescaler-RB MS")
  field(INPB, "$(P)$(R=)$(S=:)Link-ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen7-Res-FO_")
}

record(fanout, "$(P)$(R=)$(S=:)DlyGen7-Res-FO_") {
  field(DESC, "Clock change resync")
  field(LNK1, "$(P)$(R=)$(S=:)DlyGen7-Delay-SP")
  field(LNK2, "$(P)$(R=)$(S=:)DlyGen7-Width-SP")
}

record(waveform, "$(P)$(R=)$(S=:)DlyGen7-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

record(bo, "$(P)$(R=)$(S=:)DlyGen8-Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul8, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)DlyGen8-Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul8, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen8-Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul8, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 8")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen8-Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen8-Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul8, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen8-Delay-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen8-Delay-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul8, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field( HSV, "MAJOR")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen8-Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul8, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen8-Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen8-Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul8, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen8-Width-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen8-Width-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul8, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field( HSV, "MAJOR")
}

record(longout, "$(P)$(R=)$(S=:)DlyGen8-Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul8, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen8-Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen8-Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul8, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field( HSV, "MAJOR")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen8-Res-I")
}

record(calc, "$(P)$(R=)$(S=:)DlyGen8-Res-I") {
  field(DESC, "Resolution")
  field(INPA, "$(P)$(R=)$(S=:)DlyGen8-Prescaler-RB MS")
  field(INPB, "$(P)$(R=)$(S=:)Link-ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen8-Res-FO_")
}

record(fanout, "$(P)$(R=)$(S=:)DlyGen8-Res-FO_") {
  field(DESC, "Clock change resync")
  field(LNK1, "$(P)$(R=)$(S=:)DlyGen8-Delay-SP")
  field(LNK2, "$(P)$(R=)$(S=:)DlyGen8-Width-SP")
}

record(waveform, "$(P)$(R=)$(S=:)DlyGen8-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

record(bo, "$(P)$(R=)$(S=:)DlyGen9-Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul9, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)DlyGen9-Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul9, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen9-Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul9, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 9")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen9-Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen9-Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul9, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen9-Delay-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen9-Delay-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul9, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field( HSV, "MAJOR")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen9-Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul9, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen9-Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen9-Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul9, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen9-Width-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen9-Width-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul9, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field( HSV, "MAJOR")
}

record(longout, "$(P)$(R=)$(S=:)DlyGen9-Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul9, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen9-Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen9-Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul9, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field( HSV, "MAJOR")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen9-Res-I")
}

record(calc, "$(P)$(R=)$(S=:)DlyGen9-Res-I") {
  field(DESC, "Resolution")
  field(INPA, "$(P)$(R=)$(S=:)DlyGen9-Prescaler-RB MS")
  field(INPB, "$(P)$(R=)$(S=:)Link-ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen9-Res-FO_")
}

record(fanout, "$(P)$(R=)$(S=:)DlyGen9-Res-FO_") {
  field(DESC, "Clock change resync")
  field(LNK1, "$(P)$(R=)$(S=:)DlyGen9-Delay-SP")
  field(LNK2, "$(P)$(R=)$(S=:)DlyGen9-Width-SP")
}

record(waveform, "$(P)$(R=)$(S=:)DlyGen9-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

record(bo, "$(P)$(R=)$(S=:)DlyGen10-Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul10, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)DlyGen10-Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul10, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen10-Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul10, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 10")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen10-Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen10-Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul10, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen10-Delay-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen10-Delay-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul10, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field( HSV, "MAJOR")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen10-Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul10, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen10-Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen10-Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul10, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen10-Width-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen10-Width-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul10, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field( HSV, "MAJOR")
}

record(longout, "$(P)$(R=)$(S=:)DlyGen10-Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul10, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen10-Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen10-Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul10, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field( HSV, "MAJOR")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen10-Res-I")
}

record(calc, "$(P)$(R=)$(S=:)DlyGen10-Res-I") {
  field(DESC, "Resolution")
  field(INPA, "$(P)$(R=)$(S=:)DlyGen10-Prescaler-RB MS")
  field(INPB, "$(P)$(R=)$(S=:)Link-ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen10-Res-FO_")
}

record(fanout, "$(P)$(R=)$(S=:)DlyGen10-Res-FO_") {
  field(DESC, "Clock change resync")
  field(LNK1, "$(P)$(R=)$(S=:)DlyGen10-Delay-SP")
  field(LNK2, "$(P)$(R=)$(S=:)DlyGen10-Width-SP")
}

record(waveform, "$(P)$(R=)$(S=:)DlyGen10-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

record(bo, "$(P)$(R=)$(S=:)DlyGen11-Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul11, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)DlyGen11-Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul11, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen11-Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul11, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 11")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen11-Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen11-Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul11, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen11-Delay-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen11-Delay-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul11, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field( HSV, "MAJOR")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen11-Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul11, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen11-Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen11-Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul11, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen11-Width-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen11-Width-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul11, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field( HSV, "MAJOR")
}

record(longout, "$(P)$(R=)$(S=:)DlyGen11-Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul11, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen11-Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen11-Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul11, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field( HSV, "MAJOR")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen11-Res-I")
}

record(calc, "$(P)$(R=)$(S=:)DlyGen11-Res-I") {
  field(DESC, "Resolution")
  field(INPA, "$(P)$(R=)$(S=:)DlyGen11-Prescaler-RB MS")
  field(INPB, "$(P)$(R=)$(S=:)Link-ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen11-Res-FO_")
}

record(fanout, "$(P)$(R=)$(S=:)DlyGen11-Res-FO_") {
  field(DESC, "Clock change resync")
  field(LNK1, "$(P)$(R=)$(S=:)DlyGen11-Delay-SP")
  field(LNK2, "$(P)$(R=)$(S=:)DlyGen11-Width-SP")
}

record(waveform, "$(P)$(R=)$(S=:)DlyGen11-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

record(bo, "$(P)$(R=)$(S=:)DlyGen12-Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul12, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)DlyGen12-Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul12, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen12-Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul12, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 12")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen12-Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen12-Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul12, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen12-Delay-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen12-Delay-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul12, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field( HSV, "MAJOR")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen12-Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul12, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen12-Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen12-Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul12, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen12-Width-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen12-Width-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul12, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field( HSV, "MAJOR")
}

record(longout, "$(P)$(R=)$(S=:)DlyGen12-Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul12, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen12-Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen12-Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul12, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field( HSV, "MAJOR")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen12-Res-I")
}

record(calc, "$(P)$(R=)$(S=:)DlyGen12-Res-I") {
  field(DESC, "Resolution")
  field(INPA, "$(P)$(R=)$(S=:)DlyGen12-Prescaler-RB MS")
  field(INPB, "$(P)$(R=)$(S=:)Link-ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen12-Res-FO_")
}

record(fanout, "$(P)$(R=)$(S=:)DlyGen12-Res-FO_") {
  field(DESC, "Clock change resync")
  field(LNK1, "$(P)$(R=)$(S=:)DlyGen12-Delay-SP")
  field(LNK2, "$(P)$(R=)$(S=:)DlyGen12-Width-SP")
}

record(waveform, "$(P)$(R=)$(S=:)DlyGen12-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

record(bo, "$(P)$(R=)$(S=:)DlyGen13-Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul13, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)DlyGen13-Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul13, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen13-Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul13, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 13")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen13-Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen13-Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul13, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen13-Delay-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen13-Delay-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul13, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field( HSV, "MAJOR")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen13-Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul13, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen13-Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen13-Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul13, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen13-Width-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen13-Width-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul13, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field( HSV, "MAJOR")
}

record(longout, "$(P)$(R=)$(S=:)DlyGen13-Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul13, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen13-Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen13-Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul13, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field( HSV, "MAJOR")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen13-Res-I")
}

record(calc, "$(P)$(R=)$(S=:)DlyGen13-Res-I") {
  field(DESC, "Resolution")
  field(INPA, "$(P)$(R=)$(S=:)DlyGen13-Prescaler-RB MS")
  field(INPB, "$(P)$(R=)$(S=:)Link-ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen13-Res-FO_")
}

record(fanout, "$(P)$(R=)$(S=:)DlyGen13-Res-FO_") {
  field(DESC, "Clock change resync")
  field(LNK1, "$(P)$(R=)$(S=:)DlyGen13-Delay-SP")
  field(LNK2, "$(P)$(R=)$(S=:)DlyGen13-Width-SP")
}

record(waveform, "$(P)$(R=)$(S=:)DlyGen13-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

record(bo, "$(P)$(R=)$(S=:)DlyGen14-Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul14, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)DlyGen14-Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul14, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen14-Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul14, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 14")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen14-Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen14-Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul14, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen14-Delay-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen14-Delay-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul14, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field( HSV, "MAJOR")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen14-Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul14, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen14-Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen14-Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul14, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen14-Width-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen14-Width-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul14, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field( HSV, "MAJOR")
}

record(longout, "$(P)$(R=)$(S=:)DlyGen14-Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul14, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen14-Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen14-Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul14, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field( HSV, "MAJOR")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen14-Res-I")
}

record(calc, "$(P)$(R=)$(S=:)DlyGen14-Res-I") {
  field(DESC, "Resolution")
  field(INPA, "$(P)$(R=)$(S=:)DlyGen14-Prescaler-RB MS")
  field(INPB, "$(P)$(R=)$(S=:)Link-ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen14-Res-FO_")
}

record(fanout, "$(P)$(R=)$(S=:)DlyGen14-Res-FO_") {
  field(DESC, "Clock change resync")
  field(LNK1, "$(P)$(R=)$(S=:)DlyGen14-Delay-SP")
  field(LNK2, "$(P)$(R=)$(S=:)DlyGen14-Width-SP")
}

record(waveform, "$(P)$(R=)$(S=:)DlyGen14-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

record(bo, "$(P)$(R=)$(S=:)DlyGen15-Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul15, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)DlyGen15-Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul15, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen15-Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul15, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 15")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen15-Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen15-Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul15, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen15-Delay-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen15-Delay-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul15, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field( HSV, "MAJOR")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen15-Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul15, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen15-Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen15-Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul15, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen15-Width-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen15-Width-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul15, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field( HSV, "MAJOR")
}

record(longout, "$(P)$(R=)$(S=:)DlyGen15-Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul15, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen15-Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen15-Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul15, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field( HSV, "MAJOR")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen15-Res-I")
}

record(calc, "$(P)$(R=)$(S=:)DlyGen15-Res-I") {
  field(DESC, "Resolution")
  field(INPA, "$(P)$(R=)$(S=:)DlyGen15-Prescaler-RB MS")
  field(INPB, "$(P)$(R=)$(S=:)Link-ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen15-Res-FO_")
}

record(fanout, "$(P)$(R=)$(S=:)DlyGen15-Res-FO_") {
  field(DESC, "Clock change resync")
  field(LNK1, "$(P)$(R=)$(S=:)DlyGen15-Delay-SP")
  field(LNK2, "$(P)$(R=)$(S=:)DlyGen15-Width-SP")
}

record(waveform, "$(P)$(R=)$(S=:)DlyGen15-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

record(bo, "$(P)$(R=)$(S=:)DlyGen28-Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul28, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)DlyGen28-Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul28, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen28-Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul28, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 28")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen28-Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen28-Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul28, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen28-Delay-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen28-Delay-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul28, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field( HSV, "MAJOR")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen28-Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul28, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen28-Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen28-Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul28, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen28-Width-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen28-Width-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul28, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field( HSV, "MAJOR")
}

record(longout, "$(P)$(R=)$(S=:)DlyGen28-Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul28, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen28-Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen28-Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul28, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field( HSV, "MAJOR")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen28-Res-I")
}

record(calc, "$(P)$(R=)$(S=:)DlyGen28-Res-I") {
  field(DESC, "Resolution")
  field(INPA, "$(P)$(R=)$(S=:)DlyGen28-Prescaler-RB MS")
  field(INPB, "$(P)$(R=)$(S=:)Link-ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen28-Res-FO_")
}

record(fanout, "$(P)$(R=)$(S=:)DlyGen28-Res-FO_") {
  field(DESC, "Clock change resync")
  field(LNK1, "$(P)$(R=)$(S=:)DlyGen28-Delay-SP")
  field(LNK2, "$(P)$(R=)$(S=:)DlyGen28-Width-SP")
}

record(waveform, "$(P)$(R=)$(S=:)DlyGen28-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

record(bo, "$(P)$(R=)$(S=:)DlyGen29-Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul29, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)DlyGen29-Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul29, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen29-Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul29, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 29")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen29-Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen29-Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul29, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen29-Delay-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen29-Delay-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul29, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field( HSV, "MAJOR")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen29-Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul29, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen29-Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen29-Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul29, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen29-Width-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen29-Width-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul29, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field( HSV, "MAJOR")
}

record(longout, "$(P)$(R=)$(S=:)DlyGen29-Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul29, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen29-Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen29-Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul29, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field( HSV, "MAJOR")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen29-Res-I")
}

record(calc, "$(P)$(R=)$(S=:)DlyGen29-Res-I") {
  field(DESC, "Resolution")
  field(INPA, "$(P)$(R=)$(S=:)DlyGen29-Prescaler-RB MS")
  field(INPB, "$(P)$(R=)$(S=:)Link-ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen29-Res-FO_")
}

record(fanout, "$(P)$(R=)$(S=:)DlyGen29-Res-FO_") {
  field(DESC, "Clock change resync")
  field(LNK1, "$(P)$(R=)$(S=:)DlyGen29-Delay-SP")
  field(LNK2, "$(P)$(R=)$(S=:)DlyGen29-Width-SP")
}

record(waveform, "$(P)$(R=)$(S=:)DlyGen29-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

record(bo, "$(P)$(R=)$(S=:)DlyGen30-Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul30, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)DlyGen30-Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul30, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen30-Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul30, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 30")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen30-Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen30-Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul30, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen30-Delay-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen30-Delay-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul30, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field( HSV, "MAJOR")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen30-Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul30, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen30-Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen30-Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul30, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen30-Width-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen30-Width-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul30, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field( HSV, "MAJOR")
}

record(longout, "$(P)$(R=)$(S=:)DlyGen30-Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul30, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen30-Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen30-Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul30, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field( HSV, "MAJOR")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen30-Res-I")
}

record(calc, "$(P)$(R=)$(S=:)DlyGen30-Res-I") {
  field(DESC, "Resolution")
  field(INPA, "$(P)$(R=)$(S=:)DlyGen30-Prescaler-RB MS")
  field(INPB, "$(P)$(R=)$(S=:)Link-ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen30-Res-FO_")
}

record(fanout, "$(P)$(R=)$(S=:)DlyGen30-Res-FO_") {
  field(DESC, "Clock change resync")
  field(LNK1, "$(P)$(R=)$(S=:)DlyGen30-Delay-SP")
  field(LNK2, "$(P)$(R=)$(S=:)DlyGen30-Width-SP")
}

record(waveform, "$(P)$(R=)$(S=:)DlyGen30-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

record(bo, "$(P)$(R=)$(S=:)DlyGen31-Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul31, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)DlyGen31-Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(OBJ):Pul31, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen31-Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul31, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 31")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen31-Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen31-Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul31, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen31-Delay-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen31-Delay-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul31, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field( HSV, "MAJOR")
}

record(ao, "$(P)$(R=)$(S=:)DlyGen31-Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(OBJ):Pul31, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen31-Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(P)$(R=)$(S=:)DlyGen31-Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(OBJ):Pul31, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen31-Width-Raw-RB")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen31-Width-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul31, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field( HSV, "MAJOR")
}

record(longout, "$(P)$(R=)$(S=:)DlyGen31-Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul31, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen31-Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(P)$(R=)$(S=:)DlyGen31-Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul31, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field( HSV, "MAJOR")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen31-Res-I")
}

record(calc, "$(P)$(R=)$(S=:)DlyGen31-Res-I") {
  field(DESC, "Resolution")
  field(INPA, "$(P)$(R=)$(S=:)DlyGen31-Prescaler-RB MS")
  field(INPB, "$(P)$(R=)$(S=:)Link-ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen31-Res-FO_")
}

record(fanout, "$(P)$(R=)$(S=:)DlyGen31-Res-FO_") {
  field(DESC, "Clock change resync")
  field(LNK1, "$(P)$(R=)$(S=:)DlyGen31-Delay-SP")
  field(LNK2, "$(P)$(R=)$(S=:)DlyGen31-Width-SP")
}

record(waveform, "$(P)$(R=)$(S=:)DlyGen31-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen0-Evt-Trig0-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul0, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 0")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen0-Evt-Trig1-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul0, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 0")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen0-Evt-Trig2-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul0, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 0")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen1-Evt-Trig0-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul1, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 1")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen1-Evt-Trig1-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul1, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 1")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen1-Evt-Trig2-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul1, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 1")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen2-Evt-Trig0-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul2, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 2")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen2-Evt-Trig1-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul2, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 2")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen2-Evt-Trig2-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul2, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 2")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen3-Evt-Trig0-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul3, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 3")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen3-Evt-Trig1-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul3, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 3")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen3-Evt-Trig2-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul3, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 3")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen4-Evt-Trig0-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul4, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 4")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen4-Evt-Trig1-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul4, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 4")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen4-Evt-Trig2-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul4, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 4")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen5-Evt-Trig0-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul5, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 5")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen5-Evt-Trig1-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul5, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 5")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen5-Evt-Trig2-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul5, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 5")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen6-Evt-Trig0-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul6, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 6")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen6-Evt-Trig1-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul6, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 6")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen6-Evt-Trig2-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul6, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 6")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen7-Evt-Trig0-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul7, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 7")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen7-Evt-Trig1-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul7, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 7")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen7-Evt-Trig2-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul7, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 7")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen8-Evt-Trig0-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul8, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 8")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen8-Evt-Trig1-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul8, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 8")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen8-Evt-Trig2-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul8, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 8")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen9-Evt-Trig0-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul9, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 9")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen9-Evt-Trig1-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul9, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 9")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen9-Evt-Trig2-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul9, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 9")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen10-Evt-Trig0-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul10, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 10")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen10-Evt-Trig1-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul10, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 10")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen10-Evt-Trig2-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul10, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 10")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen11-Evt-Trig0-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul11, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 11")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen11-Evt-Trig1-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul11, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 11")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen11-Evt-Trig2-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul11, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 11")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen12-Evt-Trig0-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul12, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 12")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen12-Evt-Trig1-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul12, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 12")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen12-Evt-Trig2-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul12, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 12")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen13-Evt-Trig0-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul13, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 13")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen13-Evt-Trig1-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul13, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 13")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen13-Evt-Trig2-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul13, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 13")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen14-Evt-Trig0-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul14, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 14")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen14-Evt-Trig1-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul14, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 14")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen14-Evt-Trig2-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul14, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 14")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen15-Evt-Trig0-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul15, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 15")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen15-Evt-Trig1-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul15, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 15")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen15-Evt-Trig2-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul15, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 15")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen28-Evt-Trig0-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul28, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 28")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen28-Evt-Trig1-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul28, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 28")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen28-Evt-Trig2-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul28, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 28")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen29-Evt-Trig0-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul29, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 29")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen29-Evt-Trig1-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul29, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 29")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen29-Evt-Trig2-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul29, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 29")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen30-Evt-Trig0-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul30, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 30")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen30-Evt-Trig1-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul30, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 30")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen30-Evt-Trig2-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul30, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 30")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen31-Evt-Trig0-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul31, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 31")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen31-Evt-Trig1-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul31, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 31")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(P)$(R=)$(S=:)DlyGen31-Evt-Trig2-SP") {
  field( DTYP, "EVR Pulser Mapping" )
  field( OUT , "@OBJ=$(OBJ):Pul31, Func=Trig")
  field( PINI, "YES")
  field( DESC, "Mapping for Pulser 31")
  field( VAL , "0")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
record(mbboDirect, "$(P)$(R=)$(S=:)DlyGen0-Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul0, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen0-Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(P)$(R=)$(S=:)DlyGen0-Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul0, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
record(mbboDirect, "$(P)$(R=)$(S=:)DlyGen1-Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul1, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen1-Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(P)$(R=)$(S=:)DlyGen1-Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul1, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
record(mbboDirect, "$(P)$(R=)$(S=:)DlyGen2-Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul2, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen2-Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(P)$(R=)$(S=:)DlyGen2-Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul2, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
record(mbboDirect, "$(P)$(R=)$(S=:)DlyGen3-Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul3, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen3-Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(P)$(R=)$(S=:)DlyGen3-Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul3, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
record(mbboDirect, "$(P)$(R=)$(S=:)DlyGen4-Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul4, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen4-Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(P)$(R=)$(S=:)DlyGen4-Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul4, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
record(mbboDirect, "$(P)$(R=)$(S=:)DlyGen5-Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul5, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen5-Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(P)$(R=)$(S=:)DlyGen5-Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul5, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
record(mbboDirect, "$(P)$(R=)$(S=:)DlyGen6-Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul6, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen6-Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(P)$(R=)$(S=:)DlyGen6-Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul6, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
record(mbboDirect, "$(P)$(R=)$(S=:)DlyGen7-Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul7, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen7-Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(P)$(R=)$(S=:)DlyGen7-Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul7, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
record(mbboDirect, "$(P)$(R=)$(S=:)DlyGen8-Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul8, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen8-Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(P)$(R=)$(S=:)DlyGen8-Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul8, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
record(mbboDirect, "$(P)$(R=)$(S=:)DlyGen9-Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul9, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen9-Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(P)$(R=)$(S=:)DlyGen9-Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul9, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
record(mbboDirect, "$(P)$(R=)$(S=:)DlyGen10-Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul10, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen10-Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(P)$(R=)$(S=:)DlyGen10-Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul10, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
record(mbboDirect, "$(P)$(R=)$(S=:)DlyGen11-Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul11, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen11-Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(P)$(R=)$(S=:)DlyGen11-Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul11, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
record(mbboDirect, "$(P)$(R=)$(S=:)DlyGen12-Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul12, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen12-Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(P)$(R=)$(S=:)DlyGen12-Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul12, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
record(mbboDirect, "$(P)$(R=)$(S=:)DlyGen13-Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul13, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen13-Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(P)$(R=)$(S=:)DlyGen13-Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul13, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
record(mbboDirect, "$(P)$(R=)$(S=:)DlyGen14-Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul14, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen14-Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(P)$(R=)$(S=:)DlyGen14-Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul14, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
record(mbboDirect, "$(P)$(R=)$(S=:)DlyGen15-Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(OBJ):Pul15, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(P)$(R=)$(S=:)DlyGen15-Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(P)$(R=)$(S=:)DlyGen15-Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(OBJ):Pul15, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(P)$(R=)$(S=:)In0-Lvl-Sel") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Input FPIN0 (TTL)")
  field( OUT , "@OBJ=$(OBJ):FPIn0, PROP=Active Level")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Low")
  field( ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)In0-Edge-Sel") {
  field( DTYP, "Obj Prop bool")
  field( OUT , "@OBJ=$(OBJ):FPIn0, PROP=Active Edge")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Falling")
  field( ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)In0-Trig-Ext-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn0, PROP=External Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)In0-Code-Ext-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn0, PROP=External Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)In0-Trig-Back-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn0, PROP=Backwards Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)In0-Code-Back-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn0, PROP=Backwards Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)In0-DBus-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn0, PROP=DBus Mask")
  field( PINI, "YES")
  field( ZRST, "Bit 0")
  field( ONST, "Bit 1")
  field( TWST, "Bit 2")
  field( THST, "Bit 3")
  field( FRST, "Bit 4")
  field( FVST, "Bit 5")
  field( SXST, "Bit 6")
  field( SVST, "Bit 7")
  field( ZRVL, "0x1")
  field( ONVL, "0x2")
  field( TWVL, "0x4")
  field( THVL, "0x8")
  field( FRVL, "0x10")
  field( FVVL, "0x20")
  field( SXVL, "0x40")
  field( SVVL, "0x80")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(P)$(R=)$(S=:)In0-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)In0-User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(P)$(R=)$(S=:)In1-Lvl-Sel") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Input FPIN1 (TTL)")
  field( OUT , "@OBJ=$(OBJ):FPIn1, PROP=Active Level")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Low")
  field( ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)In1-Edge-Sel") {
  field( DTYP, "Obj Prop bool")
  field( OUT , "@OBJ=$(OBJ):FPIn1, PROP=Active Edge")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Falling")
  field( ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)In1-Trig-Ext-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn1, PROP=External Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)In1-Code-Ext-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn1, PROP=External Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)In1-Trig-Back-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn1, PROP=Backwards Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)In1-Code-Back-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn1, PROP=Backwards Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)In1-DBus-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn1, PROP=DBus Mask")
  field( PINI, "YES")
  field( ZRST, "Bit 0")
  field( ONST, "Bit 1")
  field( TWST, "Bit 2")
  field( THST, "Bit 3")
  field( FRST, "Bit 4")
  field( FVST, "Bit 5")
  field( SXST, "Bit 6")
  field( SVST, "Bit 7")
  field( ZRVL, "0x1")
  field( ONVL, "0x2")
  field( TWVL, "0x4")
  field( THVL, "0x8")
  field( FRVL, "0x10")
  field( FVVL, "0x20")
  field( SXVL, "0x40")
  field( SVVL, "0x80")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(P)$(R=)$(S=:)In1-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)In1-User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(P)$(R=)$(S=:)In2-Lvl-Sel") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Input FPIN2 (TTL)")
  field( OUT , "@OBJ=$(OBJ):FPIn2, PROP=Active Level")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Low")
  field( ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)In2-Edge-Sel") {
  field( DTYP, "Obj Prop bool")
  field( OUT , "@OBJ=$(OBJ):FPIn2, PROP=Active Edge")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Falling")
  field( ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)In2-Trig-Ext-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn2, PROP=External Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)In2-Code-Ext-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn2, PROP=External Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)In2-Trig-Back-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn2, PROP=Backwards Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)In2-Code-Back-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn2, PROP=Backwards Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)In2-DBus-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn2, PROP=DBus Mask")
  field( PINI, "YES")
  field( ZRST, "Bit 0")
  field( ONST, "Bit 1")
  field( TWST, "Bit 2")
  field( THST, "Bit 3")
  field( FRST, "Bit 4")
  field( FVST, "Bit 5")
  field( SXST, "Bit 6")
  field( SVST, "Bit 7")
  field( ZRVL, "0x1")
  field( ONVL, "0x2")
  field( TWVL, "0x4")
  field( THVL, "0x8")
  field( FRVL, "0x10")
  field( FVVL, "0x20")
  field( SXVL, "0x40")
  field( SVVL, "0x80")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(P)$(R=)$(S=:)In2-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)In2-User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(P)$(R=)$(S=:)In3-Lvl-Sel") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Input FPIN3 (TTL)")
  field( OUT , "@OBJ=$(OBJ):FPIn3, PROP=Active Level")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Low")
  field( ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)In3-Edge-Sel") {
  field( DTYP, "Obj Prop bool")
  field( OUT , "@OBJ=$(OBJ):FPIn3, PROP=Active Edge")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Falling")
  field( ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)In3-Trig-Ext-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn3, PROP=External Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)In3-Code-Ext-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn3, PROP=External Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)In3-Trig-Back-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn3, PROP=Backwards Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)In3-Code-Back-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn3, PROP=Backwards Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)In3-DBus-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn3, PROP=DBus Mask")
  field( PINI, "YES")
  field( ZRST, "Bit 0")
  field( ONST, "Bit 1")
  field( TWST, "Bit 2")
  field( THST, "Bit 3")
  field( FRST, "Bit 4")
  field( FVST, "Bit 5")
  field( SXST, "Bit 6")
  field( SVST, "Bit 7")
  field( ZRVL, "0x1")
  field( ONVL, "0x2")
  field( TWVL, "0x4")
  field( THVL, "0x8")
  field( FRVL, "0x10")
  field( FVVL, "0x20")
  field( SXVL, "0x40")
  field( SVVL, "0x80")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(P)$(R=)$(S=:)In3-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)In3-User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(P)$(R=)$(S=:)UnivIn0-Lvl-Sel") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Input UnivIN0 (TTL)")
  field( OUT , "@OBJ=$(OBJ):FPIn4, PROP=Active Level")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Low")
  field( ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)UnivIn0-Edge-Sel") {
  field( DTYP, "Obj Prop bool")
  field( OUT , "@OBJ=$(OBJ):FPIn4, PROP=Active Edge")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Falling")
  field( ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn0-Trig-Ext-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn4, PROP=External Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn0-Code-Ext-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn4, PROP=External Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn0-Trig-Back-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn4, PROP=Backwards Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn0-Code-Back-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn4, PROP=Backwards Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn0-DBus-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn4, PROP=DBus Mask")
  field( PINI, "YES")
  field( ZRST, "Bit 0")
  field( ONST, "Bit 1")
  field( TWST, "Bit 2")
  field( THST, "Bit 3")
  field( FRST, "Bit 4")
  field( FVST, "Bit 5")
  field( SXST, "Bit 6")
  field( SVST, "Bit 7")
  field( ZRVL, "0x1")
  field( ONVL, "0x2")
  field( TWVL, "0x4")
  field( THVL, "0x8")
  field( FRVL, "0x10")
  field( FVVL, "0x20")
  field( SXVL, "0x40")
  field( SVVL, "0x80")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(P)$(R=)$(S=:)UnivIn0-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)UnivIn0-User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(P)$(R=)$(S=:)UnivIn1-Lvl-Sel") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Input UnivIN1 (TTL)")
  field( OUT , "@OBJ=$(OBJ):FPIn5, PROP=Active Level")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Low")
  field( ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)UnivIn1-Edge-Sel") {
  field( DTYP, "Obj Prop bool")
  field( OUT , "@OBJ=$(OBJ):FPIn5, PROP=Active Edge")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Falling")
  field( ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn1-Trig-Ext-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn5, PROP=External Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn1-Code-Ext-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn5, PROP=External Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn1-Trig-Back-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn5, PROP=Backwards Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn1-Code-Back-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn5, PROP=Backwards Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn1-DBus-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn5, PROP=DBus Mask")
  field( PINI, "YES")
  field( ZRST, "Bit 0")
  field( ONST, "Bit 1")
  field( TWST, "Bit 2")
  field( THST, "Bit 3")
  field( FRST, "Bit 4")
  field( FVST, "Bit 5")
  field( SXST, "Bit 6")
  field( SVST, "Bit 7")
  field( ZRVL, "0x1")
  field( ONVL, "0x2")
  field( TWVL, "0x4")
  field( THVL, "0x8")
  field( FRVL, "0x10")
  field( FVVL, "0x20")
  field( SXVL, "0x40")
  field( SVVL, "0x80")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(P)$(R=)$(S=:)UnivIn1-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)UnivIn1-User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(P)$(R=)$(S=:)UnivIn2-Lvl-Sel") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Input UnivIN2 (TTL)")
  field( OUT , "@OBJ=$(OBJ):FPIn6, PROP=Active Level")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Low")
  field( ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)UnivIn2-Edge-Sel") {
  field( DTYP, "Obj Prop bool")
  field( OUT , "@OBJ=$(OBJ):FPIn6, PROP=Active Edge")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Falling")
  field( ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn2-Trig-Ext-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn6, PROP=External Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn2-Code-Ext-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn6, PROP=External Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn2-Trig-Back-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn6, PROP=Backwards Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn2-Code-Back-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn6, PROP=Backwards Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn2-DBus-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn6, PROP=DBus Mask")
  field( PINI, "YES")
  field( ZRST, "Bit 0")
  field( ONST, "Bit 1")
  field( TWST, "Bit 2")
  field( THST, "Bit 3")
  field( FRST, "Bit 4")
  field( FVST, "Bit 5")
  field( SXST, "Bit 6")
  field( SVST, "Bit 7")
  field( ZRVL, "0x1")
  field( ONVL, "0x2")
  field( TWVL, "0x4")
  field( THVL, "0x8")
  field( FRVL, "0x10")
  field( FVVL, "0x20")
  field( SXVL, "0x40")
  field( SVVL, "0x80")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(P)$(R=)$(S=:)UnivIn2-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)UnivIn2-User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(P)$(R=)$(S=:)UnivIn3-Lvl-Sel") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Input UnivIN3 (TTL)")
  field( OUT , "@OBJ=$(OBJ):FPIn7, PROP=Active Level")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Low")
  field( ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)UnivIn3-Edge-Sel") {
  field( DTYP, "Obj Prop bool")
  field( OUT , "@OBJ=$(OBJ):FPIn7, PROP=Active Edge")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Falling")
  field( ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn3-Trig-Ext-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn7, PROP=External Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn3-Code-Ext-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn7, PROP=External Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn3-Trig-Back-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn7, PROP=Backwards Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn3-Code-Back-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn7, PROP=Backwards Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn3-DBus-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn7, PROP=DBus Mask")
  field( PINI, "YES")
  field( ZRST, "Bit 0")
  field( ONST, "Bit 1")
  field( TWST, "Bit 2")
  field( THST, "Bit 3")
  field( FRST, "Bit 4")
  field( FVST, "Bit 5")
  field( SXST, "Bit 6")
  field( SVST, "Bit 7")
  field( ZRVL, "0x1")
  field( ONVL, "0x2")
  field( TWVL, "0x4")
  field( THVL, "0x8")
  field( FRVL, "0x10")
  field( FVVL, "0x20")
  field( SXVL, "0x40")
  field( SVVL, "0x80")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(P)$(R=)$(S=:)UnivIn3-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)UnivIn3-User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(P)$(R=)$(S=:)UnivIn4-Lvl-Sel") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Input UnivIN4 (TTL)")
  field( OUT , "@OBJ=$(OBJ):FPIn8, PROP=Active Level")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Low")
  field( ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)UnivIn4-Edge-Sel") {
  field( DTYP, "Obj Prop bool")
  field( OUT , "@OBJ=$(OBJ):FPIn8, PROP=Active Edge")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Falling")
  field( ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn4-Trig-Ext-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn8, PROP=External Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn4-Code-Ext-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn8, PROP=External Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn4-Trig-Back-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn8, PROP=Backwards Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn4-Code-Back-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn8, PROP=Backwards Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn4-DBus-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn8, PROP=DBus Mask")
  field( PINI, "YES")
  field( ZRST, "Bit 0")
  field( ONST, "Bit 1")
  field( TWST, "Bit 2")
  field( THST, "Bit 3")
  field( FRST, "Bit 4")
  field( FVST, "Bit 5")
  field( SXST, "Bit 6")
  field( SVST, "Bit 7")
  field( ZRVL, "0x1")
  field( ONVL, "0x2")
  field( TWVL, "0x4")
  field( THVL, "0x8")
  field( FRVL, "0x10")
  field( FVVL, "0x20")
  field( SXVL, "0x40")
  field( SVVL, "0x80")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(P)$(R=)$(S=:)UnivIn4-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)UnivIn4-User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(P)$(R=)$(S=:)UnivIn5-Lvl-Sel") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Input UnivIN5 (TTL)")
  field( OUT , "@OBJ=$(OBJ):FPIn9, PROP=Active Level")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Low")
  field( ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)UnivIn5-Edge-Sel") {
  field( DTYP, "Obj Prop bool")
  field( OUT , "@OBJ=$(OBJ):FPIn9, PROP=Active Edge")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Falling")
  field( ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn5-Trig-Ext-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn9, PROP=External Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn5-Code-Ext-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn9, PROP=External Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn5-Trig-Back-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn9, PROP=Backwards Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn5-Code-Back-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn9, PROP=Backwards Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn5-DBus-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn9, PROP=DBus Mask")
  field( PINI, "YES")
  field( ZRST, "Bit 0")
  field( ONST, "Bit 1")
  field( TWST, "Bit 2")
  field( THST, "Bit 3")
  field( FRST, "Bit 4")
  field( FVST, "Bit 5")
  field( SXST, "Bit 6")
  field( SVST, "Bit 7")
  field( ZRVL, "0x1")
  field( ONVL, "0x2")
  field( TWVL, "0x4")
  field( THVL, "0x8")
  field( FRVL, "0x10")
  field( FVVL, "0x20")
  field( SXVL, "0x40")
  field( SVVL, "0x80")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(P)$(R=)$(S=:)UnivIn5-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)UnivIn5-User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(P)$(R=)$(S=:)UnivIn6-Lvl-Sel") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Input UnivIN6 (TTL)")
  field( OUT , "@OBJ=$(OBJ):FPIn10, PROP=Active Level")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Low")
  field( ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)UnivIn6-Edge-Sel") {
  field( DTYP, "Obj Prop bool")
  field( OUT , "@OBJ=$(OBJ):FPIn10, PROP=Active Edge")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Falling")
  field( ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn6-Trig-Ext-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn10, PROP=External Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn6-Code-Ext-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn10, PROP=External Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn6-Trig-Back-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn10, PROP=Backwards Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn6-Code-Back-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn10, PROP=Backwards Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn6-DBus-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn10, PROP=DBus Mask")
  field( PINI, "YES")
  field( ZRST, "Bit 0")
  field( ONST, "Bit 1")
  field( TWST, "Bit 2")
  field( THST, "Bit 3")
  field( FRST, "Bit 4")
  field( FVST, "Bit 5")
  field( SXST, "Bit 6")
  field( SVST, "Bit 7")
  field( ZRVL, "0x1")
  field( ONVL, "0x2")
  field( TWVL, "0x4")
  field( THVL, "0x8")
  field( FRVL, "0x10")
  field( FVVL, "0x20")
  field( SXVL, "0x40")
  field( SVVL, "0x80")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(P)$(R=)$(S=:)UnivIn6-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)UnivIn6-User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(P)$(R=)$(S=:)UnivIn7-Lvl-Sel") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Input UnivIN7 (TTL)")
  field( OUT , "@OBJ=$(OBJ):FPIn11, PROP=Active Level")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Low")
  field( ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)UnivIn7-Edge-Sel") {
  field( DTYP, "Obj Prop bool")
  field( OUT , "@OBJ=$(OBJ):FPIn11, PROP=Active Edge")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Falling")
  field( ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn7-Trig-Ext-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn11, PROP=External Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn7-Code-Ext-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn11, PROP=External Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn7-Trig-Back-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn11, PROP=Backwards Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn7-Code-Back-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn11, PROP=Backwards Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn7-DBus-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn11, PROP=DBus Mask")
  field( PINI, "YES")
  field( ZRST, "Bit 0")
  field( ONST, "Bit 1")
  field( TWST, "Bit 2")
  field( THST, "Bit 3")
  field( FRST, "Bit 4")
  field( FVST, "Bit 5")
  field( SXST, "Bit 6")
  field( SVST, "Bit 7")
  field( ZRVL, "0x1")
  field( ONVL, "0x2")
  field( TWVL, "0x4")
  field( THVL, "0x8")
  field( FRVL, "0x10")
  field( FVVL, "0x20")
  field( SXVL, "0x40")
  field( SVVL, "0x80")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(P)$(R=)$(S=:)UnivIn7-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)UnivIn7-User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(P)$(R=)$(S=:)UnivIn8-Lvl-Sel") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Input UnivIN8 (TTL)")
  field( OUT , "@OBJ=$(OBJ):FPIn12, PROP=Active Level")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Low")
  field( ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)UnivIn8-Edge-Sel") {
  field( DTYP, "Obj Prop bool")
  field( OUT , "@OBJ=$(OBJ):FPIn12, PROP=Active Edge")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Falling")
  field( ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn8-Trig-Ext-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn12, PROP=External Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn8-Code-Ext-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn12, PROP=External Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn8-Trig-Back-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn12, PROP=Backwards Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn8-Code-Back-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn12, PROP=Backwards Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn8-DBus-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn12, PROP=DBus Mask")
  field( PINI, "YES")
  field( ZRST, "Bit 0")
  field( ONST, "Bit 1")
  field( TWST, "Bit 2")
  field( THST, "Bit 3")
  field( FRST, "Bit 4")
  field( FVST, "Bit 5")
  field( SXST, "Bit 6")
  field( SVST, "Bit 7")
  field( ZRVL, "0x1")
  field( ONVL, "0x2")
  field( TWVL, "0x4")
  field( THVL, "0x8")
  field( FRVL, "0x10")
  field( FVVL, "0x20")
  field( SXVL, "0x40")
  field( SVVL, "0x80")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(P)$(R=)$(S=:)UnivIn8-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)UnivIn8-User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(P)$(R=)$(S=:)UnivIn9-Lvl-Sel") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Input UnivIN9 (TTL)")
  field( OUT , "@OBJ=$(OBJ):FPIn13, PROP=Active Level")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Low")
  field( ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)UnivIn9-Edge-Sel") {
  field( DTYP, "Obj Prop bool")
  field( OUT , "@OBJ=$(OBJ):FPIn13, PROP=Active Edge")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Falling")
  field( ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn9-Trig-Ext-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn13, PROP=External Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn9-Code-Ext-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn13, PROP=External Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn9-Trig-Back-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn13, PROP=Backwards Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn9-Code-Back-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn13, PROP=Backwards Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn9-DBus-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn13, PROP=DBus Mask")
  field( PINI, "YES")
  field( ZRST, "Bit 0")
  field( ONST, "Bit 1")
  field( TWST, "Bit 2")
  field( THST, "Bit 3")
  field( FRST, "Bit 4")
  field( FVST, "Bit 5")
  field( SXST, "Bit 6")
  field( SVST, "Bit 7")
  field( ZRVL, "0x1")
  field( ONVL, "0x2")
  field( TWVL, "0x4")
  field( THVL, "0x8")
  field( FRVL, "0x10")
  field( FVVL, "0x20")
  field( SXVL, "0x40")
  field( SVVL, "0x80")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(P)$(R=)$(S=:)UnivIn9-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)UnivIn9-User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(P)$(R=)$(S=:)UnivIn10-Lvl-Sel") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Input UnivIN10 (TTL)")
  field( OUT , "@OBJ=$(OBJ):FPIn14, PROP=Active Level")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Low")
  field( ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)UnivIn10-Edge-Sel") {
  field( DTYP, "Obj Prop bool")
  field( OUT , "@OBJ=$(OBJ):FPIn14, PROP=Active Edge")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Falling")
  field( ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn10-Trig-Ext-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn14, PROP=External Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn10-Code-Ext-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn14, PROP=External Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn10-Trig-Back-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn14, PROP=Backwards Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn10-Code-Back-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn14, PROP=Backwards Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn10-DBus-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn14, PROP=DBus Mask")
  field( PINI, "YES")
  field( ZRST, "Bit 0")
  field( ONST, "Bit 1")
  field( TWST, "Bit 2")
  field( THST, "Bit 3")
  field( FRST, "Bit 4")
  field( FVST, "Bit 5")
  field( SXST, "Bit 6")
  field( SVST, "Bit 7")
  field( ZRVL, "0x1")
  field( ONVL, "0x2")
  field( TWVL, "0x4")
  field( THVL, "0x8")
  field( FRVL, "0x10")
  field( FVVL, "0x20")
  field( SXVL, "0x40")
  field( SVVL, "0x80")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(P)$(R=)$(S=:)UnivIn10-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)UnivIn10-User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(P)$(R=)$(S=:)UnivIn11-Lvl-Sel") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Input UnivIN11 (TTL)")
  field( OUT , "@OBJ=$(OBJ):FPIn15, PROP=Active Level")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Low")
  field( ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)UnivIn11-Edge-Sel") {
  field( DTYP, "Obj Prop bool")
  field( OUT , "@OBJ=$(OBJ):FPIn15, PROP=Active Edge")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Falling")
  field( ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn11-Trig-Ext-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn15, PROP=External Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn11-Code-Ext-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn15, PROP=External Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn11-Trig-Back-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn15, PROP=Backwards Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn11-Code-Back-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn15, PROP=Backwards Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn11-DBus-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn15, PROP=DBus Mask")
  field( PINI, "YES")
  field( ZRST, "Bit 0")
  field( ONST, "Bit 1")
  field( TWST, "Bit 2")
  field( THST, "Bit 3")
  field( FRST, "Bit 4")
  field( FVST, "Bit 5")
  field( SXST, "Bit 6")
  field( SVST, "Bit 7")
  field( ZRVL, "0x1")
  field( ONVL, "0x2")
  field( TWVL, "0x4")
  field( THVL, "0x8")
  field( FRVL, "0x10")
  field( FVVL, "0x20")
  field( SXVL, "0x40")
  field( SVVL, "0x80")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(P)$(R=)$(S=:)UnivIn11-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)UnivIn11-User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(P)$(R=)$(S=:)UnivIn12-Lvl-Sel") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Input UnivIN12 (TTL)")
  field( OUT , "@OBJ=$(OBJ):FPIn16, PROP=Active Level")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Low")
  field( ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)UnivIn12-Edge-Sel") {
  field( DTYP, "Obj Prop bool")
  field( OUT , "@OBJ=$(OBJ):FPIn16, PROP=Active Edge")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Falling")
  field( ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn12-Trig-Ext-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn16, PROP=External Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn12-Code-Ext-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn16, PROP=External Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn12-Trig-Back-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn16, PROP=Backwards Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn12-Code-Back-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn16, PROP=Backwards Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn12-DBus-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn16, PROP=DBus Mask")
  field( PINI, "YES")
  field( ZRST, "Bit 0")
  field( ONST, "Bit 1")
  field( TWST, "Bit 2")
  field( THST, "Bit 3")
  field( FRST, "Bit 4")
  field( FVST, "Bit 5")
  field( SXST, "Bit 6")
  field( SVST, "Bit 7")
  field( ZRVL, "0x1")
  field( ONVL, "0x2")
  field( TWVL, "0x4")
  field( THVL, "0x8")
  field( FRVL, "0x10")
  field( FVVL, "0x20")
  field( SXVL, "0x40")
  field( SVVL, "0x80")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(P)$(R=)$(S=:)UnivIn12-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)UnivIn12-User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(P)$(R=)$(S=:)UnivIn13-Lvl-Sel") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Input UnivIN13 (TTL)")
  field( OUT , "@OBJ=$(OBJ):FPIn17, PROP=Active Level")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Low")
  field( ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)UnivIn13-Edge-Sel") {
  field( DTYP, "Obj Prop bool")
  field( OUT , "@OBJ=$(OBJ):FPIn17, PROP=Active Edge")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Falling")
  field( ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn13-Trig-Ext-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn17, PROP=External Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn13-Code-Ext-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn17, PROP=External Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn13-Trig-Back-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn17, PROP=Backwards Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn13-Code-Back-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn17, PROP=Backwards Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn13-DBus-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn17, PROP=DBus Mask")
  field( PINI, "YES")
  field( ZRST, "Bit 0")
  field( ONST, "Bit 1")
  field( TWST, "Bit 2")
  field( THST, "Bit 3")
  field( FRST, "Bit 4")
  field( FVST, "Bit 5")
  field( SXST, "Bit 6")
  field( SVST, "Bit 7")
  field( ZRVL, "0x1")
  field( ONVL, "0x2")
  field( TWVL, "0x4")
  field( THVL, "0x8")
  field( FRVL, "0x10")
  field( FVVL, "0x20")
  field( SXVL, "0x40")
  field( SVVL, "0x80")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(P)$(R=)$(S=:)UnivIn13-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)UnivIn13-User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(P)$(R=)$(S=:)UnivIn14-Lvl-Sel") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Input UnivIN14 (TTL)")
  field( OUT , "@OBJ=$(OBJ):FPIn18, PROP=Active Level")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Low")
  field( ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)UnivIn14-Edge-Sel") {
  field( DTYP, "Obj Prop bool")
  field( OUT , "@OBJ=$(OBJ):FPIn18, PROP=Active Edge")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Falling")
  field( ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn14-Trig-Ext-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn18, PROP=External Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn14-Code-Ext-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn18, PROP=External Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn14-Trig-Back-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn18, PROP=Backwards Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn14-Code-Back-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn18, PROP=Backwards Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn14-DBus-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn18, PROP=DBus Mask")
  field( PINI, "YES")
  field( ZRST, "Bit 0")
  field( ONST, "Bit 1")
  field( TWST, "Bit 2")
  field( THST, "Bit 3")
  field( FRST, "Bit 4")
  field( FVST, "Bit 5")
  field( SXST, "Bit 6")
  field( SVST, "Bit 7")
  field( ZRVL, "0x1")
  field( ONVL, "0x2")
  field( TWVL, "0x4")
  field( THVL, "0x8")
  field( FRVL, "0x10")
  field( FVVL, "0x20")
  field( SXVL, "0x40")
  field( SVVL, "0x80")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(P)$(R=)$(S=:)UnivIn14-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)UnivIn14-User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(P)$(R=)$(S=:)UnivIn15-Lvl-Sel") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Input UnivIN15 (TTL)")
  field( OUT , "@OBJ=$(OBJ):FPIn19, PROP=Active Level")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Low")
  field( ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)UnivIn15-Edge-Sel") {
  field( DTYP, "Obj Prop bool")
  field( OUT , "@OBJ=$(OBJ):FPIn19, PROP=Active Edge")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Falling")
  field( ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn15-Trig-Ext-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn19, PROP=External Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn15-Code-Ext-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn19, PROP=External Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn15-Trig-Back-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn19, PROP=Backwards Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn15-Code-Back-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn19, PROP=Backwards Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn15-DBus-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn19, PROP=DBus Mask")
  field( PINI, "YES")
  field( ZRST, "Bit 0")
  field( ONST, "Bit 1")
  field( TWST, "Bit 2")
  field( THST, "Bit 3")
  field( FRST, "Bit 4")
  field( FVST, "Bit 5")
  field( SXST, "Bit 6")
  field( SVST, "Bit 7")
  field( ZRVL, "0x1")
  field( ONVL, "0x2")
  field( TWVL, "0x4")
  field( THVL, "0x8")
  field( FRVL, "0x10")
  field( FVVL, "0x20")
  field( SXVL, "0x40")
  field( SVVL, "0x80")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(P)$(R=)$(S=:)UnivIn15-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)UnivIn15-User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(P)$(R=)$(S=:)UnivIn16-Lvl-Sel") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Input UnivIN16 (TTL)")
  field( OUT , "@OBJ=$(OBJ):FPIn20, PROP=Active Level")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Low")
  field( ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)UnivIn16-Edge-Sel") {
  field( DTYP, "Obj Prop bool")
  field( OUT , "@OBJ=$(OBJ):FPIn20, PROP=Active Edge")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Falling")
  field( ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn16-Trig-Ext-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn20, PROP=External Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn16-Code-Ext-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn20, PROP=External Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn16-Trig-Back-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn20, PROP=Backwards Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn16-Code-Back-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn20, PROP=Backwards Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn16-DBus-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn20, PROP=DBus Mask")
  field( PINI, "YES")
  field( ZRST, "Bit 0")
  field( ONST, "Bit 1")
  field( TWST, "Bit 2")
  field( THST, "Bit 3")
  field( FRST, "Bit 4")
  field( FVST, "Bit 5")
  field( SXST, "Bit 6")
  field( SVST, "Bit 7")
  field( ZRVL, "0x1")
  field( ONVL, "0x2")
  field( TWVL, "0x4")
  field( THVL, "0x8")
  field( FRVL, "0x10")
  field( FVVL, "0x20")
  field( SXVL, "0x40")
  field( SVVL, "0x80")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(P)$(R=)$(S=:)UnivIn16-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)UnivIn16-User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(P)$(R=)$(S=:)UnivIn17-Lvl-Sel") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Input UnivIN17 (TTL)")
  field( OUT , "@OBJ=$(OBJ):FPIn21, PROP=Active Level")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Low")
  field( ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)UnivIn17-Edge-Sel") {
  field( DTYP, "Obj Prop bool")
  field( OUT , "@OBJ=$(OBJ):FPIn21, PROP=Active Edge")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Falling")
  field( ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn17-Trig-Ext-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn21, PROP=External Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn17-Code-Ext-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn21, PROP=External Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn17-Trig-Back-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn21, PROP=Backwards Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn17-Code-Back-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn21, PROP=Backwards Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn17-DBus-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn21, PROP=DBus Mask")
  field( PINI, "YES")
  field( ZRST, "Bit 0")
  field( ONST, "Bit 1")
  field( TWST, "Bit 2")
  field( THST, "Bit 3")
  field( FRST, "Bit 4")
  field( FVST, "Bit 5")
  field( SXST, "Bit 6")
  field( SVST, "Bit 7")
  field( ZRVL, "0x1")
  field( ONVL, "0x2")
  field( TWVL, "0x4")
  field( THVL, "0x8")
  field( FRVL, "0x10")
  field( FVVL, "0x20")
  field( SXVL, "0x40")
  field( SVVL, "0x80")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(P)$(R=)$(S=:)UnivIn17-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)UnivIn17-User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(P)$(R=)$(S=:)UnivIn18-Lvl-Sel") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Input UnivIN18 (TTL)")
  field( OUT , "@OBJ=$(OBJ):FPIn22, PROP=Active Level")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Low")
  field( ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)UnivIn18-Edge-Sel") {
  field( DTYP, "Obj Prop bool")
  field( OUT , "@OBJ=$(OBJ):FPIn22, PROP=Active Edge")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Falling")
  field( ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn18-Trig-Ext-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn22, PROP=External Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn18-Code-Ext-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn22, PROP=External Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn18-Trig-Back-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn22, PROP=Backwards Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn18-Code-Back-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn22, PROP=Backwards Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn18-DBus-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn22, PROP=DBus Mask")
  field( PINI, "YES")
  field( ZRST, "Bit 0")
  field( ONST, "Bit 1")
  field( TWST, "Bit 2")
  field( THST, "Bit 3")
  field( FRST, "Bit 4")
  field( FVST, "Bit 5")
  field( SXST, "Bit 6")
  field( SVST, "Bit 7")
  field( ZRVL, "0x1")
  field( ONVL, "0x2")
  field( TWVL, "0x4")
  field( THVL, "0x8")
  field( FRVL, "0x10")
  field( FVVL, "0x20")
  field( SXVL, "0x40")
  field( SVVL, "0x80")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(P)$(R=)$(S=:)UnivIn18-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)UnivIn18-User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(P)$(R=)$(S=:)UnivIn19-Lvl-Sel") {
  field( DTYP, "Obj Prop bool")
  field( DESC, "Input UnivIN19 (TTL)")
  field( OUT , "@OBJ=$(OBJ):FPIn23, PROP=Active Level")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Low")
  field( ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R=)$(S=:)UnivIn19-Edge-Sel") {
  field( DTYP, "Obj Prop bool")
  field( OUT , "@OBJ=$(OBJ):FPIn23, PROP=Active Edge")
  field( PINI, "YES")
  field( VAL , "1")
  field( ZNAM, "Active Falling")
  field( ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn19-Trig-Ext-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn23, PROP=External Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn19-Code-Ext-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn23, PROP=External Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn19-Trig-Back-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn23, PROP=Backwards Mode")
  field( PINI, "YES")
  field( ZRST, "Off")
  field( ONST, "Level")
  field( TWST, "Edge")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(P)$(R=)$(S=:)UnivIn19-Code-Back-SP") {
  field( DTYP, "Obj Prop uint32")
  field( OUT , "@OBJ=$(OBJ):FPIn23, PROP=Backwards Code")
  field( PINI, "YES")
  field( LOPR, "0")
  field( HOPR, "255")
  field( DRVL, "0")
  field( DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(P)$(R=)$(S=:)UnivIn19-DBus-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(OBJ):FPIn23, PROP=DBus Mask")
  field( PINI, "YES")
  field( ZRST, "Bit 0")
  field( ONST, "Bit 1")
  field( TWST, "Bit 2")
  field( THST, "Bit 3")
  field( FRST, "Bit 4")
  field( FVST, "Bit 5")
  field( SXST, "Bit 6")
  field( SVST, "Bit 7")
  field( ZRVL, "0x1")
  field( ONVL, "0x2")
  field( TWVL, "0x4")
  field( THVL, "0x8")
  field( FRVL, "0x10")
  field( FVVL, "0x20")
  field( SXVL, "0x40")
  field( SVVL, "0x80")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(P)$(R=)$(S=:)UnivIn19-Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(P)$(R=)$(S=:)UnivIn19-User-SP")
}
