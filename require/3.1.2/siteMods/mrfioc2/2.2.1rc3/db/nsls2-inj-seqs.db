#! Generated by VisualDCT v2.6
#! DBDSTART
#! DBD("../../dbd/mrf.dbd")
#! DBDEND


# User Control
record(mbboDirect, "$(LN){}Mode:Prmt-Sel") {
  field(DESC, "LN Permitted TS Modes")
  field(ASG, "OPERATOR")
  field(DTYP, "Soft and restore")
  field(NOBT, "10")
  field(FLNK, "$(INJ){}Mode-Calc_")
  info(autosaveFields_pass0, "VAL")
}

# User Control
record(mbbo, "$(LN){}Mode-Sel") {
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "3")
  field(THVL, "0x21")
  field(FRVL, "0x155")
  field(FVVL, "0x3ff")
  field(ZRST, "Off")
  field(ONST, "1 Hz")
  field(TWST, "Stack")
  field(THST, "2 Hz")
  field(FRST, "5 Hz")
  field(FVST, "10 Hz")
  field(ASG, "OPERATOR")
  field(FLNK, "$(INJ){}Mode-Calc_")
  info(autosaveFields_pass0, "VAL")
}

# User Control
record(mbbo, "$(BR){}Mode-Sel") {
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "0xc")
  field(ZRST, "Off")
  field(ONST, "1 Hz")
  field(TWST, "Stack")
  field(THST, "2 Hz")
  field(ASG, "OPERATOR")
  field(FLNK, "$(INJ){}Mode-Calc_")
  info(autosaveFields_pass0, "VAL")
}

# User Control
record(mbboDirect, "$(BR){}Mode:Prmt-Sel") {
  field(DESC, "BR Permitted TS Modes")
  field(ASG, "OPERATOR")
  field(NOBT, "4")
  field(DTYP, "Soft and restore")
  field(FLNK, "$(INJ){}Mode-Calc_")
  info(autosaveFields_pass0, "VAL")
}

record(mbbiDirect, "$(INJ){}Mode-RB") {
  field(NOBT, "14")
}

# User Control
record(bo, "$(INJ){}Mode:Prmt-Sel") {
  field(ZNAM, "Allow any")
  field(ONAM, "Require BR Inject")
  field(ASG, "OPERATOR")
  field(PINI, "YES")
  info(autosaveFields_pass0, "VAL")
}

# User Control
record(bo, "$(INJ){}Mode:Commit-Cmd") {
  field(FLNK, "$(INJ){}Mode:Commit-FO_")
  field(ZNAM, "Commit")
  field(ONAM, "Commit")
  field(ASG, "OPERATOR")
  field(SDIS, "$(INJ){}Mode:Prmt-RB")
  field(DISV, "0")
}

record(fanout, "$(INJ){}Mode:Commit-FO_") {
  field(LNK4, "$(INJ){$(EVG)-$(SEQN)}Commit-Cmd")
  field(LNK5, "$(INJ){$(EVG)-$(SEQB)}Commit-Cmd")
  field(FLNK, "$(INJ){}Mode:Commit2-FO_")
}

record(fanout, "$(INJ){}Mode:Commit2-FO_") {
  field(LNK1, "$(INJ){}Mode-I")
  field(LNK2, "$(INJ){}Mode:Allw-Sts")
  field(LNK3, "$(BR){}Mode-Sts")
  field(LNK4, "$(LN){}Mode-Sts")
  field(LNK5, "$(INJ){}BucketMod-I")
  field(LNK6, "$(INJ){}Bucket-I")
  field(FLNK, "$(LN){ACMI}Mode-I")
}

record(mbbiDirect, "$(INJ){}Mode-I") {
  field(NOBT, "14")
  field(INP, "$(INJ){}Mode-RB")
}

record(bi, "$(INJ){}Mode:Prmt-RB") {
  field(ZSV, "MAJOR")
  field(ZNAM, "Incompatible modes")
  field(ONAM, "OK")
}

record(mbbi, "$(BR){}Mode-Sts") {
  field(ZRST, "Off")
  field(ONST, "1 Hz")
  field(TWST, "Stack")
  field(THST, "2 Hz")
  field(INP, "$(BR){}Mode-Sel NPP")
}

record(mbbi, "$(LN){}Mode-Sts") {
  field(ZRST, "Off")
  field(ONST, "1 Hz")
  field(TWST, "Stack")
  field(THST, "2 Hz")
  field(FRST, "5 Hz")
  field(FVST, "10 Hz")
  field(INP, "$(LN){}Mode-Sel NPP")
}

record(bi, "$(INJ){}Mode:Allw-RB") {
  field(DESC, "TS modes permits inject")
  field(ZSV, "MINOR")
  field(ZNAM, "BR Inj Denied")
  field(ONAM, "BR Inj Allowed")
}

record(bi, "$(INJ){}Mode:Allw-Sts") {
  field(DESC, "TS modes permits inject")
  field(INP, "$(INJ){}Mode:Allw-RB.VAL NPP MS")
  field(ZSV, "MINOR")
  field(ZNAM, "BR Inj Denied")
  field(ONAM, "BR Inj Allowed")
}

record(fanout, "$(INJ){}Mode:Init-FO_") {
  field(PINI, "RUNNING")
  field(PHAS, "1")
  field(LNK1, "$(LN){}Mode:Prmt-Sel")
  field(LNK2, "$(BR){}Mode:Prmt-Sel")
  field(LNK3, "$(LN){}Mode-Sel")
  field(LNK4, "$(BR){}Mode-Sel")
  field(LNK6, "$(INJ){}Mode:Commit-Cmd")
  field(LNK5, "$(INJ){}Bucket-SP PP")
}

# User Control
record(longout, "$(INJ){}Bucket-SP") {
  field(DESC, "Injection bucket")
  field(ASG, "OPERATOR")
  field(OUT, "$(INJ){}Bucket-Calc_.A PP")
  field(EGU, "Buckets")
  field(HOPR, "1319")
  field(LOPR, "0")
  field(HIGH, "1320")
  field(LOW, "-1")
  field(HSV, "INVALID")
  field(LSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  field(UDF, "0")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(INJ){}Bucket-I") {
  field(INP, "$(INJ){}Bucket-SP")
  field(EGU, "Buckets")
  field(HOPR, "1319")
  field(LOPR, "0")
}

record(longin, "$(INJ){}BucketMod-RB") {
  field(DESC, "Bkt mod evt period")
  field(INP, "$(INJ){}Bucket-Calc_.B")
  field(EGU, "Buckets")
  field(HOPR, "3")
  field(LOPR, "0")
}

record(longin, "$(INJ){}BucketMod-I") {
  field(DESC, "Bkt mod evt period")
  field(INP, "$(INJ){}BucketMod-RB")
  field(EGU, "Buckets")
  field(HOPR, "3")
  field(LOPR, "0")
}

record(aSub, "$(INJ){}Mode-Calc_") {
  field(FLNK, "$(INJ){}Mode:Prmt-Calc_")
  field(SNAM, "NSLS2SeqMask")
  field(INPA, "$(LN){}Mode-Sel.RVAL")
  field(INPB, "$(BR){}Mode-Sel.RVAL")
  field(INPC, "$(LN){}Mode:Prmt-Sel")
  field(INPD, "$(BR){}Mode:Prmt-Sel")
  field(FTA, "ULONG")
  field(FTB, "ULONG")
  field(FTC, "ULONG")
  field(FTD, "ULONG")
  field(OUTA, "$(INJ){}Mode:Allw-RB PP")
  field(OUTB, "$(INJ){}Mode-RB PP")
  field(OUTC, "$(LN){Seq}Mask:Rep-FOut_ PP")
  field(OUTD, "$(BR){Seq:1Hz}Mask:Rep-FOut_ PP")
  field(OUTE, "$(BR){Seq:2Hz}Mask:Rep-FOut_ PP")
  field(OUTF, "$(BR){Seq:Stk}Mask:Rep-FOut_ PP")
  field(FTVA, "ULONG")
  field(FTVB, "ULONG")
  field(FTVC, "ULONG")
  field(FTVD, "ULONG")
  field(FTVE, "ULONG")
  field(FTVF, "ULONG")
  field(OUTG, "INJ-TS{Seq}Mask:Rep-FOut_.PROC")
}

record(dfanout, "$(LN){Seq}Mask:Rep-FOut_") {
  field(OUTA, "$(LN){Seq:N}Mask:Rep-SP PP MS")
  field(OUTB, "$(LN){Seq:B}Mask:Rep-SP PP MS")
}

record(dfanout, "$(BR){Seq:1Hz}Mask:Rep-FOut_") {
  field(OUTA, "$(BR){Seq:N1Hz}Mask:Rep-SP PP MS")
  field(OUTB, "$(BR){Seq:B1Hz}Mask:Rep-SP PP MS")
}

record(dfanout, "$(BR){Seq:2Hz}Mask:Rep-FOut_") {
  field(OUTA, "$(BR){Seq:N2Hz}Mask:Rep-SP PP MS")
  field(OUTB, "$(BR){Seq:B2Hz}Mask:Rep-SP PP MS")
}

record(dfanout, "$(BR){Seq:Stk}Mask:Rep-FOut_") {
  field(OUTA, "$(BR){Seq:NStk}Mask:Rep-SP PP MS")
  field(OUTB, "$(BR){Seq:BStk}Mask:Rep-SP PP MS")
}

record(calcout, "$(INJ){}Mode:Prmt-Calc_") {
  field(CALC, "A?B:1")
  field(INPB, "$(INJ){}Mode:Allw-RB")
  field(OUT, "$(INJ){}Mode:Prmt-RB PP")
  field(INPA, "$(INJ){}Mode:Prmt-Sel")
}

record(calcout, "$(INJ){}Bucket-Calc_") {
  field(FLNK, "$(INJ){}Bucket-FOut_")
  field(CALC, "B:=A&3;C:=B+1;FLOOR(A/4)")
  field(OUT, "$(INJ){}Bucket:0-FOut_.VAL")
}

record(fanout, "INJ-TS{Seq}Mask:Rep-FOut_") {
  field(LNK1, "$(INJ){Seq:F}Rep-Calc_")
  field(LNK2, "$(INJ){Seq:NOut}Rep-Calc_")
  field(LNK3, "$(INJ){Seq:BOut}Rep-Calc_")
  field(LNK4, "$(INJ){Seq:InjOut}Rep-Calc_")
}

record(fanout, "$(INJ){}Bucket-FOut_") {
  field(LNK1, "$(INJ){}BucketMod-RB")
  field(LNK2, "$(INJ){}Bucket:0-FOut_")
  field(LNK3, "$(INJ){}Bucket:1-FOut_")
  field(LNK4, "$(INJ){}Bucket:2-FOut_")
  field(LNK5, "INJ-TS{Seq}Mask:Rep-FOut_")
}

record(dfanout, "$(INJ){}Bucket:1-FOut_") {
  field(DESC, "Clear all four fine delays")
  field(VAL, "0")
  field(OUTA, "$(INJ){Seq:F0}Mask:Rep-SP PP MS")
  field(OUTB, "$(INJ){Seq:F2}Mask:Rep-SP PP MS")
  field(OUTC, "$(INJ){Seq:F4}Mask:Rep-SP PP MS")
  field(OUTD, "$(INJ){Seq:F6}Mask:Rep-SP PP MS")
}

record(dfanout, "$(INJ){}Bucket:2-FOut_") {
  field(DESC, "Set appropriate fine delay")
  field(VAL, "1")
  field(SELM, "Specified")
  field(SELL, "$(INJ){}Bucket-Calc_.C")
  field(OUTA, "$(INJ){Seq:F0}Mask:Rep-SP PP MS")
  field(OUTB, "$(INJ){Seq:F2}Mask:Rep-SP PP MS")
  field(OUTC, "$(INJ){Seq:F4}Mask:Rep-SP PP MS")
  field(OUTD, "$(INJ){Seq:F6}Mask:Rep-SP PP MS")
}

record(dfanout, "$(INJ){}Bucket:0-FOut_") {
  field(OUTA, "$(INJ){Seq:Out}Shift-Calc_.A")
  field(OUTB, "$(INJ){Seq:NOut}Shift-Calc_.A")
  field(DESC, "Apply coarse delay")
}


record(mbbo, "$(LN){ACMI}Mode-Sel") {
  field(DESC, "ACMI Test Mode")
  field(FLNK, "INJ-TS{Seq}Mask:Rep-FOut_")
  field(ZRVL, "5")
  field(ONVL, "7")
  field(TWVL, "1")
  field(THVL, "0")
  field(ZRST, "Normal")
  field(ONST, "Too High")
  field(TWST, "Too Low")
  field(THST, "Disable")
  field(ASG, "OPERATOR")
}

record(mbbi, "$(LN){ACMI}Mode-I") {
  field(DESC, "ACMI Test Mode")
  field(INP, "$(LN){ACMI}Mode-Sel.VAL")
  field(ZRVL, "5")
  field(ONVL, "7")
  field(TWVL, "1")
  field(THVL, "0")
  field(ZRST, "Normal")
  field(ONST, "Too High")
  field(TWST, "Too Low")
  field(THST, "Disable")
}

#! Further lines contain data used by VisualDCT
#! View(2460,3275,1.0)
#! Record("$(LN){}Mode:Prmt-Sel",2620,1954,0,0,"$(LN){}Mode:Prmt-Sel")
#! Field("$(LN){}Mode:Prmt-Sel.VAL",16777215,1,"$(LN){}Mode:Prmt-Sel.VAL")
#! Field("$(LN){}Mode:Prmt-Sel.FLNK",16777215,1,"$(LN){}Mode:Prmt-Sel.FLNK")
#! Link("$(LN){}Mode:Prmt-Sel.FLNK","$(INJ){}Mode-Calc_")
#! Record("$(LN){}Mode-Sel",2340,2089,0,0,"$(LN){}Mode-Sel")
#! Field("$(LN){}Mode-Sel.VAL",16777215,0,"$(LN){}Mode-Sel.VAL")
#! Field("$(LN){}Mode-Sel.FLNK",16777215,1,"$(LN){}Mode-Sel.FLNK")
#! Link("$(LN){}Mode-Sel.FLNK","$(INJ){}Mode-Calc_")
#! Field("$(LN){}Mode-Sel.RVAL",16777215,1,"$(LN){}Mode-Sel.RVAL")
#! Record("$(BR){}Mode-Sel",2340,2645,0,0,"$(BR){}Mode-Sel")
#! Field("$(BR){}Mode-Sel.VAL",16777215,0,"$(BR){}Mode-Sel.VAL")
#! Field("$(BR){}Mode-Sel.FLNK",16777215,1,"$(BR){}Mode-Sel.FLNK")
#! Link("$(BR){}Mode-Sel.FLNK","$(INJ){}Mode-Calc_")
#! Field("$(BR){}Mode-Sel.RVAL",16777215,1,"$(BR){}Mode-Sel.RVAL")
#! Record("$(BR){}Mode:Prmt-Sel",2620,2514,0,0,"$(BR){}Mode:Prmt-Sel")
#! Field("$(BR){}Mode:Prmt-Sel.VAL",16777215,1,"$(BR){}Mode:Prmt-Sel.VAL")
#! Field("$(BR){}Mode:Prmt-Sel.FLNK",16777215,1,"$(BR){}Mode:Prmt-Sel.FLNK")
#! Link("$(BR){}Mode:Prmt-Sel.FLNK","$(INJ){}Mode-Calc_")
#! Record("$(INJ){}Mode-RB",3340,2590,0,0,"$(INJ){}Mode-RB")
#! Field("$(INJ){}Mode-RB.VAL",16777215,1,"$(INJ){}Mode-RB.VAL")
#! Record("$(INJ){}Mode:Prmt-Sel",3960,2128,0,0,"$(INJ){}Mode:Prmt-Sel")
#! Field("$(INJ){}Mode:Prmt-Sel.VAL",16777215,0,"$(INJ){}Mode:Prmt-Sel.VAL")
#! Record("$(INJ){}Mode:Commit-Cmd",4220,2680,0,0,"$(INJ){}Mode:Commit-Cmd")
#! Field("$(INJ){}Mode:Commit-Cmd.SDIS",16777215,0,"$(INJ){}Mode:Commit-Cmd.SDIS")
#! Link("$(INJ){}Mode:Commit-Cmd.SDIS","$(INJ){}Mode:Prmt-RB.VAL")
#! Field("$(INJ){}Mode:Commit-Cmd.FLNK",16777215,0,"$(INJ){}Mode:Commit-Cmd.FLNK")
#! Link("$(INJ){}Mode:Commit-Cmd.FLNK","$(INJ){}Mode:Commit-FO_")
#! Record("$(INJ){}Mode:Commit-FO_",4060,3082,0,0,"$(INJ){}Mode:Commit-FO_")
#! Field("$(INJ){}Mode:Commit-FO_.LNK4",16777215,0,"$(INJ){}Mode:Commit-FO_.LNK4")
#! Field("$(INJ){}Mode:Commit-FO_.LNK5",16777215,0,"$(INJ){}Mode:Commit-FO_.LNK5")
#! Field("$(INJ){}Mode:Commit-FO_.FLNK",16777215,0,"$(INJ){}Mode:Commit-FO_.FLNK")
#! Link("$(INJ){}Mode:Commit-FO_.FLNK","$(INJ){}Mode:Commit2-FO_")
#! Record("$(INJ){}Mode:Commit2-FO_",4060,3426,0,0,"$(INJ){}Mode:Commit2-FO_")
#! Field("$(INJ){}Mode:Commit2-FO_.LNK1",16777215,0,"$(INJ){}Mode:Commit2-FO_.LNK1")
#! Link("$(INJ){}Mode:Commit2-FO_.LNK1","$(INJ){}Mode-I")
#! Field("$(INJ){}Mode:Commit2-FO_.LNK2",16777215,0,"$(INJ){}Mode:Commit2-FO_.LNK2")
#! Link("$(INJ){}Mode:Commit2-FO_.LNK2","$(INJ){}Mode:Allw-Sts")
#! Field("$(INJ){}Mode:Commit2-FO_.LNK3",16777215,0,"$(INJ){}Mode:Commit2-FO_.LNK3")
#! Link("$(INJ){}Mode:Commit2-FO_.LNK3","$(BR){}Mode-Sts")
#! Field("$(INJ){}Mode:Commit2-FO_.LNK4",16777215,0,"$(INJ){}Mode:Commit2-FO_.LNK4")
#! Link("$(INJ){}Mode:Commit2-FO_.LNK4","$(LN){}Mode-Sts")
#! Field("$(INJ){}Mode:Commit2-FO_.LNK5",16777215,0,"$(INJ){}Mode:Commit2-FO_.LNK5")
#! Link("$(INJ){}Mode:Commit2-FO_.LNK5","$(INJ){}BucketMod-I")
#! Field("$(INJ){}Mode:Commit2-FO_.LNK6",16777215,0,"$(INJ){}Mode:Commit2-FO_.LNK6")
#! Link("$(INJ){}Mode:Commit2-FO_.LNK6","$(INJ){}Bucket-I")
#! Field("$(INJ){}Mode:Commit2-FO_.FLNK",16777215,1,"$(INJ){}Mode:Commit2-FO_.FLNK")
#! Link("$(INJ){}Mode:Commit2-FO_.FLNK","$(LN){ACMI}Mode-I")
#! Record("$(INJ){}Mode-I",3760,2836,0,1,"$(INJ){}Mode-I")
#! Field("$(INJ){}Mode-I.INP",16777215,0,"$(INJ){}Mode-I.INP")
#! Link("$(INJ){}Mode-I.INP","$(INJ){}Mode-RB.VAL")
#! Record("$(INJ){}Mode:Prmt-RB",3760,2542,0,1,"$(INJ){}Mode:Prmt-RB")
#! Field("$(INJ){}Mode:Prmt-RB.VAL",16777215,1,"$(INJ){}Mode:Prmt-RB.VAL")
#! Record("$(BR){}Mode-Sts",2340,3054,0,1,"$(BR){}Mode-Sts")
#! Field("$(BR){}Mode-Sts.INP",16777215,0,"$(BR){}Mode-Sts.INP")
#! Link("$(BR){}Mode-Sts.INP","$(BR){}Mode-Sel.VAL")
#! Record("$(LN){}Mode-Sts",2340,3326,0,1,"$(LN){}Mode-Sts")
#! Field("$(LN){}Mode-Sts.INP",16777215,0,"$(LN){}Mode-Sts.INP")
#! Link("$(LN){}Mode-Sts.INP","$(LN){}Mode-Sts/INP")
#! Connector("$(LN){}Mode-Sts/INP","$(LN){}Mode-Sel.VAL",2100,2920,16777215,"",0)
#! Record("$(INJ){}Mode:Allw-RB",3360,2428,0,0,"$(INJ){}Mode:Allw-RB")
#! Field("$(INJ){}Mode:Allw-RB.VAL",16777215,1,"$(INJ){}Mode:Allw-RB.VAL")
#! Record("$(INJ){}Mode:Allw-Sts",3740,3034,0,1,"$(INJ){}Mode:Allw-Sts")
#! Field("$(INJ){}Mode:Allw-Sts.INP",16777215,0,"$(INJ){}Mode:Allw-Sts.INP")
#! Link("$(INJ){}Mode:Allw-Sts.INP","$(INJ){}Mode:Allw-RB.VAL")
#! Record("$(INJ){}Mode:Init-FO_",1620,1932,0,1,"$(INJ){}Mode:Init-FO_")
#! Field("$(INJ){}Mode:Init-FO_.LNK1",16777215,1,"$(INJ){}Mode:Init-FO_.LNK1")
#! Link("$(INJ){}Mode:Init-FO_.LNK1","$(INJ){}Mode:Init-FO_/LNK1")
#! Field("$(INJ){}Mode:Init-FO_.LNK2",16777215,1,"$(INJ){}Mode:Init-FO_.LNK2")
#! Link("$(INJ){}Mode:Init-FO_.LNK2","$(INJ){}Mode:Init-FO_/LNK22")
#! Field("$(INJ){}Mode:Init-FO_.LNK3",16777215,1,"$(INJ){}Mode:Init-FO_.LNK3")
#! Link("$(INJ){}Mode:Init-FO_.LNK3","$(INJ){}Mode:Init-FO_/LNK31")
#! Field("$(INJ){}Mode:Init-FO_.LNK4",16777215,1,"$(INJ){}Mode:Init-FO_.LNK4")
#! Link("$(INJ){}Mode:Init-FO_.LNK4","$(INJ){}Mode:Init-FO_/LNK4")
#! Field("$(INJ){}Mode:Init-FO_.LNK5",16777215,1,"$(INJ){}Mode:Init-FO_.LNK5")
#! Link("$(INJ){}Mode:Init-FO_.LNK5","$(INJ){}Mode:Init-FO_/LNK5")
#! Field("$(INJ){}Mode:Init-FO_.LNK6",16777215,1,"$(INJ){}Mode:Init-FO_.LNK6")
#! Link("$(INJ){}Mode:Init-FO_.LNK6","$(INJ){}Mode:Init-FO_/LNK6")
#! Connector("$(INJ){}Mode:Init-FO_/LNK22","$(INJ){}Mode:Init-FO_/LNK2",1960,2040,16777215,"",1)
#! Connector("$(INJ){}Mode:Init-FO_/LNK2","$(BR){}Mode:Prmt-Sel",2560,2540,16777215,"",0)
#! Connector("$(INJ){}Mode:Init-FO_/LNK1","$(INJ){}Mode:Init-FO_/LNK12",1920,2060,16777215,"",1)
#! Connector("$(INJ){}Mode:Init-FO_/LNK12","$(LN){}Mode:Prmt-Sel",2560,2020,16777215,"",0)
#! Connector("$(INJ){}Mode:Init-FO_/LNK6","$(INJ){}Mode:Init-FO_/LNK61",1860,2240,16777215,"",1)
#! Connector("$(INJ){}Mode:Init-FO_/LNK61","$(INJ){}Mode:Commit-Cmd",4180,2700,16777215,"",0)
#! Connector("$(INJ){}Mode:Init-FO_/LNK5","$(INJ){}Bucket-SP",1900,2260,16777215,"",1)
#! Connector("$(INJ){}Mode:Init-FO_/LNK4","$(INJ){}Mode:Init-FO_/LNK41",1940,2280,16777215,"",1)
#! Connector("$(INJ){}Mode:Init-FO_/LNK41","$(BR){}Mode-Sel",2340,2580,16777215,"",0)
#! Connector("$(INJ){}Mode:Init-FO_/LNK31","$(INJ){}Mode:Init-FO_/LNK3",2000,2020,16777215,"",1)
#! Connector("$(INJ){}Mode:Init-FO_/LNK3","$(LN){}Mode-Sel",2240,2220,16777215,"",0)
#! Record("$(INJ){}Bucket-SP",2760,3657,0,0,"$(INJ){}Bucket-SP")
#! Field("$(INJ){}Bucket-SP.VAL",16777215,1,"$(INJ){}Bucket-SP.VAL")
#! Field("$(INJ){}Bucket-SP.OUT",16777215,1,"$(INJ){}Bucket-SP.OUT")
#! Link("$(INJ){}Bucket-SP.OUT","$(INJ){}Bucket-Calc_.A")
#! Record("$(INJ){}Bucket-I",3180,3628,0,1,"$(INJ){}Bucket-I")
#! Field("$(INJ){}Bucket-I.INP",16777215,0,"$(INJ){}Bucket-I.INP")
#! Link("$(INJ){}Bucket-I.INP","$(INJ){}Bucket-SP.VAL")
#! Record("$(INJ){}BucketMod-RB",2820,4014,0,1,"$(INJ){}BucketMod-RB")
#! Field("$(INJ){}BucketMod-RB.INP",16777215,1,"$(INJ){}BucketMod-RB.INP")
#! Link("$(INJ){}BucketMod-RB.INP","$(INJ){}Bucket-Calc_.B")
#! Field("$(INJ){}BucketMod-RB.VAL",16777215,1,"$(INJ){}BucketMod-RB.VAL")
#! Record("$(INJ){}BucketMod-I",3180,4034,0,1,"$(INJ){}BucketMod-I")
#! Field("$(INJ){}BucketMod-I.INP",16777215,0,"$(INJ){}BucketMod-I.INP")
#! Link("$(INJ){}BucketMod-I.INP","$(INJ){}BucketMod-RB.VAL")
#! Record("$(INJ){}Mode-Calc_",2940,2024,0,1,"$(INJ){}Mode-Calc_")
#! Field("$(INJ){}Mode-Calc_.FLNK",16777215,1,"$(INJ){}Mode-Calc_.FLNK")
#! Link("$(INJ){}Mode-Calc_.FLNK","$(INJ){}Mode:Prmt-Calc_")
#! Field("$(INJ){}Mode-Calc_.INPA",16777215,0,"$(INJ){}Mode-Calc_.INPA")
#! Link("$(INJ){}Mode-Calc_.INPA","$(LN){}Mode-Sel.RVAL")
#! Field("$(INJ){}Mode-Calc_.INPB",16777215,0,"$(INJ){}Mode-Calc_.INPB")
#! Link("$(INJ){}Mode-Calc_.INPB","$(BR){}Mode-Sel.RVAL")
#! Field("$(INJ){}Mode-Calc_.INPC",16777215,0,"$(INJ){}Mode-Calc_.INPC")
#! Link("$(INJ){}Mode-Calc_.INPC","$(LN){}Mode:Prmt-Sel.VAL")
#! Field("$(INJ){}Mode-Calc_.INPD",16777215,0,"$(INJ){}Mode-Calc_.INPD")
#! Link("$(INJ){}Mode-Calc_.INPD","$(BR){}Mode:Prmt-Sel.VAL")
#! Field("$(INJ){}Mode-Calc_.OUTA",16777215,1,"$(INJ){}Mode-Calc_.OUTA")
#! Link("$(INJ){}Mode-Calc_.OUTA","$(INJ){}Mode:Allw-RB.VAL")
#! Field("$(INJ){}Mode-Calc_.OUTB",16777215,1,"$(INJ){}Mode-Calc_.OUTB")
#! Link("$(INJ){}Mode-Calc_.OUTB","$(INJ){}Mode-RB.VAL")
#! Field("$(INJ){}Mode-Calc_.OUTC",16777215,1,"$(INJ){}Mode-Calc_.OUTC")
#! Link("$(INJ){}Mode-Calc_.OUTC","$(LN){Seq}Mask:Rep-FOut_.VAL")
#! Field("$(INJ){}Mode-Calc_.OUTD",16777215,1,"$(INJ){}Mode-Calc_.OUTD")
#! Link("$(INJ){}Mode-Calc_.OUTD","$(BR){Seq:1Hz}Mask:Rep-FOut_.VAL")
#! Field("$(INJ){}Mode-Calc_.OUTE",16777215,1,"$(INJ){}Mode-Calc_.OUTE")
#! Link("$(INJ){}Mode-Calc_.OUTE","$(BR){Seq:2Hz}Mask:Rep-FOut_.VAL")
#! Field("$(INJ){}Mode-Calc_.OUTF",16777215,1,"$(INJ){}Mode-Calc_.OUTF")
#! Link("$(INJ){}Mode-Calc_.OUTF","$(BR){Seq:Stk}Mask:Rep-FOut_.VAL")
#! Field("$(INJ){}Mode-Calc_.OUTG",16777215,1,"$(INJ){}Mode-Calc_.OUTG")
#! Link("$(INJ){}Mode-Calc_.OUTG","INJ-TS{Seq}Mask:Rep-FOut_.PROC")
#! Record("$(LN){Seq}Mask:Rep-FOut_",3000,2656,0,1,"$(LN){Seq}Mask:Rep-FOut_")
#! Field("$(LN){Seq}Mask:Rep-FOut_.VAL",16777215,1,"$(LN){Seq}Mask:Rep-FOut_.VAL")
#! Field("$(LN){Seq}Mask:Rep-FOut_.OUTA",16777215,1,"$(LN){Seq}Mask:Rep-FOut_.OUTA")
#! Field("$(LN){Seq}Mask:Rep-FOut_.OUTB",16777215,1,"$(LN){Seq}Mask:Rep-FOut_.OUTB")
#! Record("$(BR){Seq:1Hz}Mask:Rep-FOut_",3000,2816,0,1,"$(BR){Seq:1Hz}Mask:Rep-FOut_")
#! Field("$(BR){Seq:1Hz}Mask:Rep-FOut_.VAL",16777215,1,"$(BR){Seq:1Hz}Mask:Rep-FOut_.VAL")
#! Field("$(BR){Seq:1Hz}Mask:Rep-FOut_.OUTA",16777215,1,"$(BR){Seq:1Hz}Mask:Rep-FOut_.OUTA")
#! Field("$(BR){Seq:1Hz}Mask:Rep-FOut_.OUTB",16777215,1,"$(BR){Seq:1Hz}Mask:Rep-FOut_.OUTB")
#! Record("$(BR){Seq:2Hz}Mask:Rep-FOut_",3000,2976,0,1,"$(BR){Seq:2Hz}Mask:Rep-FOut_")
#! Field("$(BR){Seq:2Hz}Mask:Rep-FOut_.VAL",16777215,1,"$(BR){Seq:2Hz}Mask:Rep-FOut_.VAL")
#! Field("$(BR){Seq:2Hz}Mask:Rep-FOut_.OUTA",16777215,1,"$(BR){Seq:2Hz}Mask:Rep-FOut_.OUTA")
#! Field("$(BR){Seq:2Hz}Mask:Rep-FOut_.OUTB",16777215,1,"$(BR){Seq:2Hz}Mask:Rep-FOut_.OUTB")
#! Record("$(BR){Seq:Stk}Mask:Rep-FOut_",3000,3136,0,1,"$(BR){Seq:Stk}Mask:Rep-FOut_")
#! Field("$(BR){Seq:Stk}Mask:Rep-FOut_.VAL",16777215,1,"$(BR){Seq:Stk}Mask:Rep-FOut_.VAL")
#! Field("$(BR){Seq:Stk}Mask:Rep-FOut_.OUTA",16777215,1,"$(BR){Seq:Stk}Mask:Rep-FOut_.OUTA")
#! Field("$(BR){Seq:Stk}Mask:Rep-FOut_.OUTB",16777215,1,"$(BR){Seq:Stk}Mask:Rep-FOut_.OUTB")
#! Record("$(INJ){}Mode:Prmt-Calc_",3680,2348,0,0,"$(INJ){}Mode:Prmt-Calc_")
#! Field("$(INJ){}Mode:Prmt-Calc_.INPA",16777215,1,"$(INJ){}Mode:Prmt-Calc_.INPA")
#! Link("$(INJ){}Mode:Prmt-Calc_.INPA","$(INJ){}Mode:Prmt-Sel.VAL")
#! Field("$(INJ){}Mode:Prmt-Calc_.INPB",16777215,0,"$(INJ){}Mode:Prmt-Calc_.INPB")
#! Link("$(INJ){}Mode:Prmt-Calc_.INPB","$(INJ){}Mode:Allw-RB.VAL")
#! Field("$(INJ){}Mode:Prmt-Calc_.OUT",16777215,1,"$(INJ){}Mode:Prmt-Calc_.OUT")
#! Link("$(INJ){}Mode:Prmt-Calc_.OUT","$(INJ){}Mode:Prmt-RB.VAL")
#! Record("$(INJ){}Bucket-Calc_",3120,3822,0,1,"$(INJ){}Bucket-Calc_")
#! Field("$(INJ){}Bucket-Calc_.A",16777215,0,"$(INJ){}Bucket-Calc_.A")
#! Field("$(INJ){}Bucket-Calc_.FLNK",16777215,1,"$(INJ){}Bucket-Calc_.FLNK")
#! Link("$(INJ){}Bucket-Calc_.FLNK","$(INJ){}Bucket-FOut_")
#! Field("$(INJ){}Bucket-Calc_.B",16777215,0,"$(INJ){}Bucket-Calc_.B")
#! Field("$(INJ){}Bucket-Calc_.OUT",16777215,1,"$(INJ){}Bucket-Calc_.OUT")
#! Link("$(INJ){}Bucket-Calc_.OUT","$(INJ){}Bucket:0-FOut_.VAL")
#! Field("$(INJ){}Bucket-Calc_.C",16777215,1,"$(INJ){}Bucket-Calc_.C")
#! Record("INJ-TS{Seq}Mask:Rep-FOut_",3280,2848,0,1,"INJ-TS{Seq}Mask:Rep-FOut_")
#! Field("INJ-TS{Seq}Mask:Rep-FOut_.LNK1",16777215,1,"INJ-TS{Seq}Mask:Rep-FOut_.LNK1")
#! Field("INJ-TS{Seq}Mask:Rep-FOut_.LNK2",16777215,1,"INJ-TS{Seq}Mask:Rep-FOut_.LNK2")
#! Field("INJ-TS{Seq}Mask:Rep-FOut_.PROC",16777215,0,"INJ-TS{Seq}Mask:Rep-FOut_.PROC")
#! Field("INJ-TS{Seq}Mask:Rep-FOut_.LNK3",16777215,1,"INJ-TS{Seq}Mask:Rep-FOut_.LNK3")
#! Field("INJ-TS{Seq}Mask:Rep-FOut_.LNK4",16777215,1,"INJ-TS{Seq}Mask:Rep-FOut_.LNK4")
#! Record("$(INJ){}Bucket-FOut_",3480,3754,0,0,"$(INJ){}Bucket-FOut_")
#! Field("$(INJ){}Bucket-FOut_.LNK1",16777215,0,"$(INJ){}Bucket-FOut_.LNK1")
#! Link("$(INJ){}Bucket-FOut_.LNK1","$(INJ){}Bucket-FOut_/LNK11")
#! Field("$(INJ){}Bucket-FOut_.LNK2",16777215,1,"$(INJ){}Bucket-FOut_.LNK2")
#! Link("$(INJ){}Bucket-FOut_.LNK2","$(INJ){}Bucket:0-FOut_")
#! Field("$(INJ){}Bucket-FOut_.LNK3",16777215,1,"$(INJ){}Bucket-FOut_.LNK3")
#! Link("$(INJ){}Bucket-FOut_.LNK3","$(INJ){}Bucket:1-FOut_")
#! Field("$(INJ){}Bucket-FOut_.LNK4",16777215,1,"$(INJ){}Bucket-FOut_.LNK4")
#! Link("$(INJ){}Bucket-FOut_.LNK4","$(INJ){}Bucket:2-FOut_")
#! Field("$(INJ){}Bucket-FOut_.LNK5",16777215,1,"$(INJ){}Bucket-FOut_.LNK5")
#! Link("$(INJ){}Bucket-FOut_.LNK5","$(INJ){}Bucket-FOut_/LNK51")
#! Connector("$(INJ){}Bucket-FOut_/LNK51","$(INJ){}Bucket-FOut_/LNK5",3740,3845,16777215,"",0)
#! Connector("$(INJ){}Bucket-FOut_/LNK5","INJ-TS{Seq}Mask:Rep-FOut_",3607,3720,16777215,"",0)
#! Connector("$(INJ){}Bucket-FOut_/LNK11","$(INJ){}Bucket-FOut_/LNK1",3460,4065,16777215,"",0)
#! Connector("$(INJ){}Bucket-FOut_/LNK1","$(INJ){}BucketMod-RB",3237,4240,16777215,"",0)
#! Record("$(INJ){}Bucket:1-FOut_",3860,4040,0,0,"$(INJ){}Bucket:1-FOut_")
#! Field("$(INJ){}Bucket:1-FOut_.OUTA",16777215,1,"$(INJ){}Bucket:1-FOut_.OUTA")
#! Field("$(INJ){}Bucket:1-FOut_.OUTB",16777215,1,"$(INJ){}Bucket:1-FOut_.OUTB")
#! Field("$(INJ){}Bucket:1-FOut_.OUTC",16777215,1,"$(INJ){}Bucket:1-FOut_.OUTC")
#! Field("$(INJ){}Bucket:1-FOut_.OUTD",16777215,1,"$(INJ){}Bucket:1-FOut_.OUTD")
#! Record("$(INJ){}Bucket:2-FOut_",3860,4272,0,0,"$(INJ){}Bucket:2-FOut_")
#! Field("$(INJ){}Bucket:2-FOut_.OUTA",16777215,1,"$(INJ){}Bucket:2-FOut_.OUTA")
#! Field("$(INJ){}Bucket:2-FOut_.OUTB",16777215,1,"$(INJ){}Bucket:2-FOut_.OUTB")
#! Field("$(INJ){}Bucket:2-FOut_.OUTC",16777215,1,"$(INJ){}Bucket:2-FOut_.OUTC")
#! Field("$(INJ){}Bucket:2-FOut_.OUTD",16777215,1,"$(INJ){}Bucket:2-FOut_.OUTD")
#! Field("$(INJ){}Bucket:2-FOut_.SELL",16777215,0,"$(INJ){}Bucket:2-FOut_.SELL")
#! Link("$(INJ){}Bucket:2-FOut_.SELL","$(INJ){}Bucket-Calc_.C")
#! Record("$(INJ){}Bucket:0-FOut_",3860,3862,0,0,"$(INJ){}Bucket:0-FOut_")
#! Field("$(INJ){}Bucket:0-FOut_.VAL",16777215,0,"$(INJ){}Bucket:0-FOut_.VAL")
#! Field("$(INJ){}Bucket:0-FOut_.OUTA",16777215,1,"$(INJ){}Bucket:0-FOut_.OUTA")
#! Field("$(INJ){}Bucket:0-FOut_.OUTB",16777215,1,"$(INJ){}Bucket:0-FOut_.OUTB")
#! TextBox(TB0,2340,2040,2520,2080,0,"Dialog",24,1,16724787,"User Control",null)
#! TextBox(TB7,4240,4200,4420,4240,0,"Dialog",24,1,16724787,"User Control",null)
#! TextBox(TB6,2760,3600,2940,3640,0,"Dialog",24,1,16724787,"User Control",null)
#! TextBox(TB5,3940,2080,4120,2120,0,"Dialog",24,1,16724787,"User Control",null)
#! TextBox(TB4,2620,2460,2800,2500,0,"Dialog",24,1,16724787,"User Control",null)
#! TextBox(TB3,2620,1900,2800,1940,0,"Dialog",24,1,16724787,"User Control",null)
#! TextBox(TB2,4220,2640,4400,2680,0,"Dialog",24,1,16724787,"User Control",null)
#! TextBox(TB1,2340,2600,2520,2640,0,"Dialog",24,1,16724787,"User Control",null)
#! Record("$(LN){ACMI}Mode-Sel",4260,4211,0,1,"$(LN){ACMI}Mode-Sel")
#! Field("$(LN){ACMI}Mode-Sel.FLNK",16777215,0,"$(LN){ACMI}Mode-Sel.FLNK")
#! Link("$(LN){ACMI}Mode-Sel.FLNK","$(INJ){ACMI}Mode-Sel/FLNK")
#! Connector("$(INJ){ACMI}Mode-Sel/FLNK","$(INJ){ACMI}Mode-Sel/FLNK1",4060,4075,16777215,"",0)
#! Connector("$(INJ){ACMI}Mode-Sel/FLNK1","INJ-TS{Seq}Mask:Rep-FOut_",3767,3720,16777215,"",0)
#! Field("$(LN){ACMI}Mode-Sel.VAL",16777215,0,"$(LN){ACMI}Mode-Sel.VAL")
#! Record("$(LN){ACMI}Mode-I",4520,3872,0,0,"$(LN){ACMI}Mode-I")
#! Field("$(LN){ACMI}Mode-I.INP",16777215,0,"$(LN){ACMI}Mode-I.INP")
#! Link("$(LN){ACMI}Mode-I.INP","$(LN){ACMI}Mode-Sel.VAL")

alias("$(INJ){$(EVG)-Mxc:2}Prescaler-RB","$(INJ){$(EVG)}Div:10K-RB")
alias("$(INJ){$(EVG)-Mxc:6}Prescaler-RB","$(INJ){$(EVG)}Div:1-RB")

record(calc, "$(BR){}Ratio:10Kto1-I") {
    field(INPA, "$(INJ){$(EVG)}Div:10K-RB CP MS") # 10 KHz divider
    field(INPB, "$(INJ){$(EVG)}Div:1-RB CP MS") # 1 Hz divider
    field(CALC, "B/A")
    field(HIGH, "11000")
    field(LOW , "9000")
    field(HSV , "INVALID")
    field(LSV , "INVALID")
    field(FLNK, "$(BR){}Ratio:10Kto2-I")
}

record(calc, "$(BR){}Ratio:10Kto2-I") {
    field(INPA, "$(BR){}Ratio:10Kto1-I NPP MS")
    field(CALC, "A/2")
    field(FLNK, "$(BR){}Ratio:10K-I")
}

record(calc, "$(BR){}Ratio:10K-I") {
    field(DESC, "Ratio of 10KHz to rep rate")
    field(INPA, "$(BR){}Ratio:10Kto1-I NPP MS")
    field(INPB, "$(BR){}Ratio:10Kto2-I NPP MS")
    field(INPC, "$(BR){}Mode-Sel CP MS")
    field(CALC, "C==3?B:A")
}
# Soft sequence repeater
#
# Macros
#  P - PV prefix
#  NELM - Element count
#  NREP - Number of repetitions
#  CYCLELEN - Number of ticks of the total cycle length.
#  FLNK

# Inputs

record(waveform, "$(LN){Seq:N}EvtCode-SP") {
    field( DESC, "Sequence event code array")
    field( NELM, "2048")
    field( FTVL, "UCHAR")
    field( FLNK, "$(LN){Seq:N}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(LN){Seq:N}EvtCode-RB")
}

record(waveform, "$(LN){Seq:N}Timestamp-SP") {
    field( DESC, "Sequence timestamp array")
    field( NELM, "2048")
    field( FTVL, "DOUBLE")
    field( FLNK, "$(LN){Seq:N}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(LN){Seq:N}Timestamp-RB")
}

record(longout, "$(LN){Seq:N}Mask:Rep-SP") {
    field( DESC, "Mask selecting repeated slots")
    field( FLNK, "$(LN){Seq:N}Rep-Calc_")
    info( autosaveFields_pass0, "VAL")
}

# Calculation


record(aSub, "$(LN){Seq:N}Rep-Calc_") {
    field( SNAM, "Seq Repeat")
    # A - cycle length in ticks
    field( INPA, "$(INJ){$(EVG)}Div:1-RB MS")
    field( FTA , "ULONG")
    # B - # of repetitions per cycle
    field( INPB, "10")
    field( FTB , "ULONG")
    # C - Bit mask to select which repetitions should actually be issued
    field( INPC, "$(LN){Seq:N}Mask:Rep-SP MS PP")
    field( FTC , "ULONG")
    # D - Unused
    field( INPD, "$(LN){Seq:N}Timestamp-SP MS PP")
    field( FTD , "DOUBLE")
    field( NOD , "2048")
    # E - Input waveform
    field( INPE, "$(LN){Seq:N}EvtCode-SP MS PP")
    field( FTE , "UCHAR")
    field( NOE , "2048")

    # VALA - Single rep. cycle time
    field( FTVA, "DOUBLE")
    # VALB - Full output waveform
    field( FTVB, "DOUBLE")
    field( NOVB, "2048")
    field( FTVC, "UCHAR")
    field( NOVC, "2048")

    field( EFLG, "ALWAYS")

    field( FLNK, "")
}

# Soft sequence repeater
#
# Macros
#  P - PV prefix
#  NELM - Element count
#  NREP - Number of repetitions
#  CYCLELEN - Number of ticks of the total cycle length.
#  FLNK

# Inputs

record(waveform, "$(BR){Seq:N1Hz}EvtCode-SP") {
    field( DESC, "Sequence event code array")
    field( NELM, "2048")
    field( FTVL, "UCHAR")
    field( FLNK, "$(BR){Seq:N1Hz}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(BR){Seq:N1Hz}EvtCode-RB")
}

record(waveform, "$(BR){Seq:N1Hz}Timestamp-SP") {
    field( DESC, "Sequence timestamp array")
    field( NELM, "2048")
    field( FTVL, "DOUBLE")
    field( FLNK, "$(BR){Seq:N1Hz}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(BR){Seq:N1Hz}Timestamp-RB")
}

record(longout, "$(BR){Seq:N1Hz}Mask:Rep-SP") {
    field( DESC, "Mask selecting repeated slots")
    field( FLNK, "$(BR){Seq:N1Hz}Rep-Calc_")
    info( autosaveFields_pass0, "VAL")
}

# Calculation


record(aSub, "$(BR){Seq:N1Hz}Rep-Calc_") {
    field( SNAM, "Seq Repeat")
    # A - cycle length in ticks
    field( INPA, "$(INJ){$(EVG)}Div:1-RB MS")
    field( FTA , "ULONG")
    # B - # of repetitions per cycle
    field( INPB, "1")
    field( FTB , "ULONG")
    # C - Bit mask to select which repetitions should actually be issued
    field( INPC, "$(BR){Seq:N1Hz}Mask:Rep-SP MS PP")
    field( FTC , "ULONG")
    # D - Unused
    field( INPD, "$(BR){Seq:N1Hz}Timestamp-SP MS PP")
    field( FTD , "DOUBLE")
    field( NOD , "2048")
    # E - Input waveform
    field( INPE, "$(BR){Seq:N1Hz}EvtCode-SP MS PP")
    field( FTE , "UCHAR")
    field( NOE , "2048")

    # VALA - Single rep. cycle time
    field( FTVA, "DOUBLE")
    # VALB - Full output waveform
    field( FTVB, "DOUBLE")
    field( NOVB, "2048")
    field( FTVC, "UCHAR")
    field( NOVC, "2048")

    field( EFLG, "ALWAYS")

    field( FLNK, "")
}

# Soft sequence repeater
#
# Macros
#  P - PV prefix
#  NELM - Element count
#  NREP - Number of repetitions
#  CYCLELEN - Number of ticks of the total cycle length.
#  FLNK

# Inputs

record(waveform, "$(BR){Seq:NStk}EvtCode-SP") {
    field( DESC, "Sequence event code array")
    field( NELM, "2048")
    field( FTVL, "UCHAR")
    field( FLNK, "$(BR){Seq:NStk}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(BR){Seq:NStk}EvtCode-RB")
}

record(waveform, "$(BR){Seq:NStk}Timestamp-SP") {
    field( DESC, "Sequence timestamp array")
    field( NELM, "2048")
    field( FTVL, "DOUBLE")
    field( FLNK, "$(BR){Seq:NStk}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(BR){Seq:NStk}Timestamp-RB")
}

record(longout, "$(BR){Seq:NStk}Mask:Rep-SP") {
    field( DESC, "Mask selecting repeated slots")
    field( FLNK, "$(BR){Seq:NStk}Rep-Calc_")
    info( autosaveFields_pass0, "VAL")
}

# Calculation


record(aSub, "$(BR){Seq:NStk}Rep-Calc_") {
    field( SNAM, "Seq Repeat")
    # A - cycle length in ticks
    field( INPA, "$(INJ){$(EVG)}Div:1-RB MS")
    field( FTA , "ULONG")
    # B - # of repetitions per cycle
    field( INPB, "1")
    field( FTB , "ULONG")
    # C - Bit mask to select which repetitions should actually be issued
    field( INPC, "$(BR){Seq:NStk}Mask:Rep-SP MS PP")
    field( FTC , "ULONG")
    # D - Unused
    field( INPD, "$(BR){Seq:NStk}Timestamp-SP MS PP")
    field( FTD , "DOUBLE")
    field( NOD , "2048")
    # E - Input waveform
    field( INPE, "$(BR){Seq:NStk}EvtCode-SP MS PP")
    field( FTE , "UCHAR")
    field( NOE , "2048")

    # VALA - Single rep. cycle time
    field( FTVA, "DOUBLE")
    # VALB - Full output waveform
    field( FTVB, "DOUBLE")
    field( NOVB, "2048")
    field( FTVC, "UCHAR")
    field( NOVC, "2048")

    field( EFLG, "ALWAYS")

    field( FLNK, "")
}

# Soft sequence repeater
#
# Macros
#  P - PV prefix
#  NELM - Element count
#  NREP - Number of repetitions
#  CYCLELEN - Number of ticks of the total cycle length.
#  FLNK

# Inputs

record(waveform, "$(BR){Seq:N2Hz}EvtCode-SP") {
    field( DESC, "Sequence event code array")
    field( NELM, "2048")
    field( FTVL, "UCHAR")
    field( FLNK, "$(BR){Seq:N2Hz}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(BR){Seq:N2Hz}EvtCode-RB")
}

record(waveform, "$(BR){Seq:N2Hz}Timestamp-SP") {
    field( DESC, "Sequence timestamp array")
    field( NELM, "2048")
    field( FTVL, "DOUBLE")
    field( FLNK, "$(BR){Seq:N2Hz}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(BR){Seq:N2Hz}Timestamp-RB")
}

record(longout, "$(BR){Seq:N2Hz}Mask:Rep-SP") {
    field( DESC, "Mask selecting repeated slots")
    field( FLNK, "$(BR){Seq:N2Hz}Rep-Calc_")
    info( autosaveFields_pass0, "VAL")
}

# Calculation


record(aSub, "$(BR){Seq:N2Hz}Rep-Calc_") {
    field( SNAM, "Seq Repeat")
    # A - cycle length in ticks
    field( INPA, "$(INJ){$(EVG)}Div:1-RB MS")
    field( FTA , "ULONG")
    # B - # of repetitions per cycle
    field( INPB, "2")
    field( FTB , "ULONG")
    # C - Bit mask to select which repetitions should actually be issued
    field( INPC, "$(BR){Seq:N2Hz}Mask:Rep-SP MS PP")
    field( FTC , "ULONG")
    # D - Unused
    field( INPD, "$(BR){Seq:N2Hz}Timestamp-SP MS PP")
    field( FTD , "DOUBLE")
    field( NOD , "2048")
    # E - Input waveform
    field( INPE, "$(BR){Seq:N2Hz}EvtCode-SP MS PP")
    field( FTE , "UCHAR")
    field( NOE , "2048")

    # VALA - Single rep. cycle time
    field( FTVA, "DOUBLE")
    # VALB - Full output waveform
    field( FTVB, "DOUBLE")
    field( NOVB, "2048")
    field( FTVC, "UCHAR")
    field( NOVC, "2048")

    field( EFLG, "ALWAYS")

    field( FLNK, "")
}

# Soft sequence repeater
#
# Macros
#  P - PV prefix
#  NELM - Element count
#  NREP - Number of repetitions
#  CYCLELEN - Number of ticks of the total cycle length.
#  FLNK

# Inputs

record(waveform, "$(LN){Seq:B}EvtCode-SP") {
    field( DESC, "Sequence event code array")
    field( NELM, "2048")
    field( FTVL, "UCHAR")
    field( FLNK, "$(LN){Seq:B}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(LN){Seq:B}EvtCode-RB")
}

record(waveform, "$(LN){Seq:B}Timestamp-SP") {
    field( DESC, "Sequence timestamp array")
    field( NELM, "2048")
    field( FTVL, "DOUBLE")
    field( FLNK, "$(LN){Seq:B}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(LN){Seq:B}Timestamp-RB")
}

record(longout, "$(LN){Seq:B}Mask:Rep-SP") {
    field( DESC, "Mask selecting repeated slots")
    field( FLNK, "$(LN){Seq:B}Rep-Calc_")
    info( autosaveFields_pass0, "VAL")
}

# Calculation


record(aSub, "$(LN){Seq:B}Rep-Calc_") {
    field( SNAM, "Seq Repeat")
    # A - cycle length in ticks
    field( INPA, "$(INJ){$(EVG)}Div:1-RB MS")
    field( FTA , "ULONG")
    # B - # of repetitions per cycle
    field( INPB, "10")
    field( FTB , "ULONG")
    # C - Bit mask to select which repetitions should actually be issued
    field( INPC, "$(LN){Seq:B}Mask:Rep-SP MS PP")
    field( FTC , "ULONG")
    # D - Unused
    field( INPD, "$(LN){Seq:B}Timestamp-SP MS PP")
    field( FTD , "DOUBLE")
    field( NOD , "2048")
    # E - Input waveform
    field( INPE, "$(LN){Seq:B}EvtCode-SP MS PP")
    field( FTE , "UCHAR")
    field( NOE , "2048")

    # VALA - Single rep. cycle time
    field( FTVA, "DOUBLE")
    # VALB - Full output waveform
    field( FTVB, "DOUBLE")
    field( NOVB, "2048")
    field( FTVC, "UCHAR")
    field( NOVC, "2048")

    field( EFLG, "ALWAYS")

    field( FLNK, "")
}

# Soft sequence repeater
#
# Macros
#  P - PV prefix
#  NELM - Element count
#  NREP - Number of repetitions
#  CYCLELEN - Number of ticks of the total cycle length.
#  FLNK

# Inputs

record(waveform, "$(BR){Seq:B1Hz}EvtCode-SP") {
    field( DESC, "Sequence event code array")
    field( NELM, "2048")
    field( FTVL, "UCHAR")
    field( FLNK, "$(BR){Seq:B1Hz}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(BR){Seq:B1Hz}EvtCode-RB")
}

record(waveform, "$(BR){Seq:B1Hz}Timestamp-SP") {
    field( DESC, "Sequence timestamp array")
    field( NELM, "2048")
    field( FTVL, "DOUBLE")
    field( FLNK, "$(BR){Seq:B1Hz}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(BR){Seq:B1Hz}Timestamp-RB")
}

record(longout, "$(BR){Seq:B1Hz}Mask:Rep-SP") {
    field( DESC, "Mask selecting repeated slots")
    field( FLNK, "$(BR){Seq:B1Hz}Rep-Calc_")
    info( autosaveFields_pass0, "VAL")
}

# Calculation


record(aSub, "$(BR){Seq:B1Hz}Rep-Calc_") {
    field( SNAM, "Seq Repeat")
    # A - cycle length in ticks
    field( INPA, "$(INJ){$(EVG)}Div:1-RB MS")
    field( FTA , "ULONG")
    # B - # of repetitions per cycle
    field( INPB, "1")
    field( FTB , "ULONG")
    # C - Bit mask to select which repetitions should actually be issued
    field( INPC, "$(BR){Seq:B1Hz}Mask:Rep-SP MS PP")
    field( FTC , "ULONG")
    # D - Unused
    field( INPD, "$(BR){Seq:B1Hz}Timestamp-SP MS PP")
    field( FTD , "DOUBLE")
    field( NOD , "2048")
    # E - Input waveform
    field( INPE, "$(BR){Seq:B1Hz}EvtCode-SP MS PP")
    field( FTE , "UCHAR")
    field( NOE , "2048")

    # VALA - Single rep. cycle time
    field( FTVA, "DOUBLE")
    # VALB - Full output waveform
    field( FTVB, "DOUBLE")
    field( NOVB, "2048")
    field( FTVC, "UCHAR")
    field( NOVC, "2048")

    field( EFLG, "ALWAYS")

    field( FLNK, "")
}

# Soft sequence repeater
#
# Macros
#  P - PV prefix
#  NELM - Element count
#  NREP - Number of repetitions
#  CYCLELEN - Number of ticks of the total cycle length.
#  FLNK

# Inputs

record(waveform, "$(BR){Seq:BStk}EvtCode-SP") {
    field( DESC, "Sequence event code array")
    field( NELM, "2048")
    field( FTVL, "UCHAR")
    field( FLNK, "$(BR){Seq:BStk}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(BR){Seq:BStk}EvtCode-RB")
}

record(waveform, "$(BR){Seq:BStk}Timestamp-SP") {
    field( DESC, "Sequence timestamp array")
    field( NELM, "2048")
    field( FTVL, "DOUBLE")
    field( FLNK, "$(BR){Seq:BStk}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(BR){Seq:BStk}Timestamp-RB")
}

record(longout, "$(BR){Seq:BStk}Mask:Rep-SP") {
    field( DESC, "Mask selecting repeated slots")
    field( FLNK, "$(BR){Seq:BStk}Rep-Calc_")
    info( autosaveFields_pass0, "VAL")
}

# Calculation


record(aSub, "$(BR){Seq:BStk}Rep-Calc_") {
    field( SNAM, "Seq Repeat")
    # A - cycle length in ticks
    field( INPA, "$(INJ){$(EVG)}Div:1-RB MS")
    field( FTA , "ULONG")
    # B - # of repetitions per cycle
    field( INPB, "1")
    field( FTB , "ULONG")
    # C - Bit mask to select which repetitions should actually be issued
    field( INPC, "$(BR){Seq:BStk}Mask:Rep-SP MS PP")
    field( FTC , "ULONG")
    # D - Unused
    field( INPD, "$(BR){Seq:BStk}Timestamp-SP MS PP")
    field( FTD , "DOUBLE")
    field( NOD , "2048")
    # E - Input waveform
    field( INPE, "$(BR){Seq:BStk}EvtCode-SP MS PP")
    field( FTE , "UCHAR")
    field( NOE , "2048")

    # VALA - Single rep. cycle time
    field( FTVA, "DOUBLE")
    # VALB - Full output waveform
    field( FTVB, "DOUBLE")
    field( NOVB, "2048")
    field( FTVC, "UCHAR")
    field( NOVC, "2048")

    field( EFLG, "ALWAYS")

    field( FLNK, "")
}

# Soft sequence repeater
#
# Macros
#  P - PV prefix
#  NELM - Element count
#  NREP - Number of repetitions
#  CYCLELEN - Number of ticks of the total cycle length.
#  FLNK

# Inputs

record(waveform, "$(BR){Seq:B2Hz}EvtCode-SP") {
    field( DESC, "Sequence event code array")
    field( NELM, "2048")
    field( FTVL, "UCHAR")
    field( FLNK, "$(BR){Seq:B2Hz}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(BR){Seq:B2Hz}EvtCode-RB")
}

record(waveform, "$(BR){Seq:B2Hz}Timestamp-SP") {
    field( DESC, "Sequence timestamp array")
    field( NELM, "2048")
    field( FTVL, "DOUBLE")
    field( FLNK, "$(BR){Seq:B2Hz}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(BR){Seq:B2Hz}Timestamp-RB")
}

record(longout, "$(BR){Seq:B2Hz}Mask:Rep-SP") {
    field( DESC, "Mask selecting repeated slots")
    field( FLNK, "$(BR){Seq:B2Hz}Rep-Calc_")
    info( autosaveFields_pass0, "VAL")
}

# Calculation


record(aSub, "$(BR){Seq:B2Hz}Rep-Calc_") {
    field( SNAM, "Seq Repeat")
    # A - cycle length in ticks
    field( INPA, "$(INJ){$(EVG)}Div:1-RB MS")
    field( FTA , "ULONG")
    # B - # of repetitions per cycle
    field( INPB, "2")
    field( FTB , "ULONG")
    # C - Bit mask to select which repetitions should actually be issued
    field( INPC, "$(BR){Seq:B2Hz}Mask:Rep-SP MS PP")
    field( FTC , "ULONG")
    # D - Unused
    field( INPD, "$(BR){Seq:B2Hz}Timestamp-SP MS PP")
    field( FTD , "DOUBLE")
    field( NOD , "2048")
    # E - Input waveform
    field( INPE, "$(BR){Seq:B2Hz}EvtCode-SP MS PP")
    field( FTE , "UCHAR")
    field( NOE , "2048")

    # VALA - Single rep. cycle time
    field( FTVA, "DOUBLE")
    # VALB - Full output waveform
    field( FTVB, "DOUBLE")
    field( NOVB, "2048")
    field( FTVC, "UCHAR")
    field( NOVC, "2048")

    field( EFLG, "ALWAYS")

    field( FLNK, "")
}

# Soft sequence repeater
#
# Macros
#  P - PV prefix
#  NELM - Element count
#  NREP - Number of repetitions
#  CYCLELEN - Number of ticks of the total cycle length.
#  FLNK

# Inputs

record(waveform, "$(INJ){Seq:F0}EvtCode-SP") {
    field( DESC, "Sequence event code array")
    field( NELM, "1")
    field( FTVL, "UCHAR")
    field( FLNK, "$(INJ){Seq:F0}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(INJ){Seq:F0}EvtCode-RB")
}

record(waveform, "$(INJ){Seq:F0}Timestamp-SP") {
    field( DESC, "Sequence timestamp array")
    field( NELM, "1")
    field( FTVL, "DOUBLE")
    field( FLNK, "$(INJ){Seq:F0}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(INJ){Seq:F0}Timestamp-RB")
}

record(longout, "$(INJ){Seq:F0}Mask:Rep-SP") {
    field( DESC, "Mask selecting repeated slots")
    field( FLNK, "$(INJ){Seq:F0}Rep-Calc_")
    info( autosaveFields_pass0, "VAL")
}

# Calculation


record(aSub, "$(INJ){Seq:F0}Rep-Calc_") {
    field( SNAM, "Seq Repeat")
    # A - cycle length in ticks
    field( INPA, "100")
    field( FTA , "ULONG")
    # B - # of repetitions per cycle
    field( INPB, "1")
    field( FTB , "ULONG")
    # C - Bit mask to select which repetitions should actually be issued
    field( INPC, "$(INJ){Seq:F0}Mask:Rep-SP MS PP")
    field( FTC , "ULONG")
    # D - Unused
    field( INPD, "$(INJ){Seq:F0}Timestamp-SP MS PP")
    field( FTD , "DOUBLE")
    field( NOD , "1")
    # E - Input waveform
    field( INPE, "$(INJ){Seq:F0}EvtCode-SP MS PP")
    field( FTE , "UCHAR")
    field( NOE , "1")

    # VALA - Single rep. cycle time
    field( FTVA, "DOUBLE")
    # VALB - Full output waveform
    field( FTVB, "DOUBLE")
    field( NOVB, "1")
    field( FTVC, "UCHAR")
    field( NOVC, "1")

    field( EFLG, "ALWAYS")

    field( FLNK, "")
}

# Soft sequence repeater
#
# Macros
#  P - PV prefix
#  NELM - Element count
#  NREP - Number of repetitions
#  CYCLELEN - Number of ticks of the total cycle length.
#  FLNK

# Inputs

record(waveform, "$(INJ){Seq:F2}EvtCode-SP") {
    field( DESC, "Sequence event code array")
    field( NELM, "1")
    field( FTVL, "UCHAR")
    field( FLNK, "$(INJ){Seq:F2}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(INJ){Seq:F2}EvtCode-RB")
}

record(waveform, "$(INJ){Seq:F2}Timestamp-SP") {
    field( DESC, "Sequence timestamp array")
    field( NELM, "1")
    field( FTVL, "DOUBLE")
    field( FLNK, "$(INJ){Seq:F2}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(INJ){Seq:F2}Timestamp-RB")
}

record(longout, "$(INJ){Seq:F2}Mask:Rep-SP") {
    field( DESC, "Mask selecting repeated slots")
    field( FLNK, "$(INJ){Seq:F2}Rep-Calc_")
    info( autosaveFields_pass0, "VAL")
}

# Calculation


record(aSub, "$(INJ){Seq:F2}Rep-Calc_") {
    field( SNAM, "Seq Repeat")
    # A - cycle length in ticks
    field( INPA, "100")
    field( FTA , "ULONG")
    # B - # of repetitions per cycle
    field( INPB, "1")
    field( FTB , "ULONG")
    # C - Bit mask to select which repetitions should actually be issued
    field( INPC, "$(INJ){Seq:F2}Mask:Rep-SP MS PP")
    field( FTC , "ULONG")
    # D - Unused
    field( INPD, "$(INJ){Seq:F2}Timestamp-SP MS PP")
    field( FTD , "DOUBLE")
    field( NOD , "1")
    # E - Input waveform
    field( INPE, "$(INJ){Seq:F2}EvtCode-SP MS PP")
    field( FTE , "UCHAR")
    field( NOE , "1")

    # VALA - Single rep. cycle time
    field( FTVA, "DOUBLE")
    # VALB - Full output waveform
    field( FTVB, "DOUBLE")
    field( NOVB, "1")
    field( FTVC, "UCHAR")
    field( NOVC, "1")

    field( EFLG, "ALWAYS")

    field( FLNK, "")
}

# Soft sequence repeater
#
# Macros
#  P - PV prefix
#  NELM - Element count
#  NREP - Number of repetitions
#  CYCLELEN - Number of ticks of the total cycle length.
#  FLNK

# Inputs

record(waveform, "$(INJ){Seq:F4}EvtCode-SP") {
    field( DESC, "Sequence event code array")
    field( NELM, "1")
    field( FTVL, "UCHAR")
    field( FLNK, "$(INJ){Seq:F4}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(INJ){Seq:F4}EvtCode-RB")
}

record(waveform, "$(INJ){Seq:F4}Timestamp-SP") {
    field( DESC, "Sequence timestamp array")
    field( NELM, "1")
    field( FTVL, "DOUBLE")
    field( FLNK, "$(INJ){Seq:F4}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(INJ){Seq:F4}Timestamp-RB")
}

record(longout, "$(INJ){Seq:F4}Mask:Rep-SP") {
    field( DESC, "Mask selecting repeated slots")
    field( FLNK, "$(INJ){Seq:F4}Rep-Calc_")
    info( autosaveFields_pass0, "VAL")
}

# Calculation


record(aSub, "$(INJ){Seq:F4}Rep-Calc_") {
    field( SNAM, "Seq Repeat")
    # A - cycle length in ticks
    field( INPA, "100")
    field( FTA , "ULONG")
    # B - # of repetitions per cycle
    field( INPB, "1")
    field( FTB , "ULONG")
    # C - Bit mask to select which repetitions should actually be issued
    field( INPC, "$(INJ){Seq:F4}Mask:Rep-SP MS PP")
    field( FTC , "ULONG")
    # D - Unused
    field( INPD, "$(INJ){Seq:F4}Timestamp-SP MS PP")
    field( FTD , "DOUBLE")
    field( NOD , "1")
    # E - Input waveform
    field( INPE, "$(INJ){Seq:F4}EvtCode-SP MS PP")
    field( FTE , "UCHAR")
    field( NOE , "1")

    # VALA - Single rep. cycle time
    field( FTVA, "DOUBLE")
    # VALB - Full output waveform
    field( FTVB, "DOUBLE")
    field( NOVB, "1")
    field( FTVC, "UCHAR")
    field( NOVC, "1")

    field( EFLG, "ALWAYS")

    field( FLNK, "")
}

# Soft sequence repeater
#
# Macros
#  P - PV prefix
#  NELM - Element count
#  NREP - Number of repetitions
#  CYCLELEN - Number of ticks of the total cycle length.
#  FLNK

# Inputs

record(waveform, "$(INJ){Seq:F6}EvtCode-SP") {
    field( DESC, "Sequence event code array")
    field( NELM, "1")
    field( FTVL, "UCHAR")
    field( FLNK, "$(INJ){Seq:F6}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(INJ){Seq:F6}EvtCode-RB")
}

record(waveform, "$(INJ){Seq:F6}Timestamp-SP") {
    field( DESC, "Sequence timestamp array")
    field( NELM, "1")
    field( FTVL, "DOUBLE")
    field( FLNK, "$(INJ){Seq:F6}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(INJ){Seq:F6}Timestamp-RB")
}

record(longout, "$(INJ){Seq:F6}Mask:Rep-SP") {
    field( DESC, "Mask selecting repeated slots")
    field( FLNK, "$(INJ){Seq:F6}Rep-Calc_")
    info( autosaveFields_pass0, "VAL")
}

# Calculation


record(aSub, "$(INJ){Seq:F6}Rep-Calc_") {
    field( SNAM, "Seq Repeat")
    # A - cycle length in ticks
    field( INPA, "100")
    field( FTA , "ULONG")
    # B - # of repetitions per cycle
    field( INPB, "1")
    field( FTB , "ULONG")
    # C - Bit mask to select which repetitions should actually be issued
    field( INPC, "$(INJ){Seq:F6}Mask:Rep-SP MS PP")
    field( FTC , "ULONG")
    # D - Unused
    field( INPD, "$(INJ){Seq:F6}Timestamp-SP MS PP")
    field( FTD , "DOUBLE")
    field( NOD , "1")
    # E - Input waveform
    field( INPE, "$(INJ){Seq:F6}EvtCode-SP MS PP")
    field( FTE , "UCHAR")
    field( NOE , "1")

    # VALA - Single rep. cycle time
    field( FTVA, "DOUBLE")
    # VALB - Full output waveform
    field( FTVB, "DOUBLE")
    field( NOVB, "1")
    field( FTVC, "UCHAR")
    field( NOVC, "1")

    field( EFLG, "ALWAYS")

    field( FLNK, "")
}

# Plain Soft sequence
#
# Macros
#  P - PV prefix
#  NELM - Element count
#  FLNK

# Inputs

record(waveform, "$(INJ){Seq:FT}EvtCode-SP") {
    field( DESC, "Sequence event code array")
    field( NELM, "1")
    field( FTVL, "UCHAR")
    field( FLNK, "")
    info( autosaveFields_pass1, "VAL")

    alias("$(INJ){Seq:FT}EvtCode-RB")
}

record(waveform, "$(INJ){Seq:FT}Timestamp-SP") {
    field( DESC, "Sequence timestamp array")
    field( NELM, "1")
    field( FTVL, "DOUBLE")
    field( FLNK, "")
    info( autosaveFields_pass1, "VAL")

    alias("$(INJ){Seq:FT}Timestamp-RB")
}
# Plain Soft sequence
#
# Macros
#  P - PV prefix
#  NELM - Element count
#  FLNK

# Inputs

record(waveform, "$(LN){Seq:ACMI}EvtCode-SP") {
    field( DESC, "Sequence event code array")
    field( NELM, "10")
    field( FTVL, "UCHAR")
    field( FLNK, "")
    info( autosaveFields_pass1, "VAL")

    alias("$(LN){Seq:ACMI}EvtCode-RB")
}

record(waveform, "$(LN){Seq:ACMI}Timestamp-SP") {
    field( DESC, "Sequence timestamp array")
    field( NELM, "10")
    field( FTVL, "DOUBLE")
    field( FLNK, "")
    info( autosaveFields_pass1, "VAL")

    alias("$(LN){Seq:ACMI}Timestamp-RB")
}
# Individually mask out (replace with code 0)
# events in sequence
#
# Macros
#  P - PV prefix
#  NELM
#  NWORD - Number of 32-bit mask words
#  INCODE - Input code array
#  INMASK - Input bit mask array
#  OUTCODE - Output code array
#


record(aSub, "$(LN){Seq:ACMI}EvtCode-Calc_") {
    field(SNAM, "Seq Mask")

    field(FTA, "UCHAR")
    field(FTB, "ULONG")

    field(NOA, "10")
    field(NOB, "1")

    field(INPA, "$(LN){Seq:ACMI}EvtCode-SP PP MS")
    field(INPB, "$(LN){ACMI}Mode-Sel.RVAL")

    field(FTVA, "UCHAR")

    field(NOVA, "10")

    field(OUTA, "")

    field( EFLG, "ALWAYS")
}
# Soft sequence merger
#
# Macros
#  P - PV prefix
#  NELM
#  TIMEA
#  CODEA
#  TIMEB
#  CODEB
#  ...
#  OUTTIME
#  OUTCODE
#

record(aSub, "$(INJ){Seq:F}Rep-Calc_") {
    field(SNAM, "Seq Merge")

    field(FTA, "DOUBLE")
    field(FTB, "UCHAR")
    field(FTC, "DOUBLE")
    field(FTD, "UCHAR")
    field(FTE, "DOUBLE")
    field(FTF, "UCHAR")
    field(FTG, "DOUBLE")
    field(FTH, "UCHAR")
    field(FTI, "DOUBLE")
    field(FTJ, "UCHAR")
    field(FTK, "DOUBLE")
    field(FTL, "UCHAR")

    field(NOA, "1")
    field(NOB, "1")
    field(NOC, "1")
    field(NOD, "1")
    field(NOE, "1")
    field(NOF, "1")
    field(NOG, "1")
    field(NOH, "1")
    field(NOI, "1")
    field(NOJ, "1")
    field(NOK, "1")
    field(NOL, "1")

    field(INPA, "$(INJ){Seq:F0}Rep-Calc_.VALB MS NPP")
    field(INPB, "$(INJ){Seq:F0}Rep-Calc_.VALC MS NPP")
    field(INPC, "$(INJ){Seq:F2}Rep-Calc_.VALB MS NPP")
    field(INPD, "$(INJ){Seq:F2}Rep-Calc_.VALC MS NPP")
    field(INPE, "$(INJ){Seq:F4}Rep-Calc_.VALB MS NPP")
    field(INPF, "$(INJ){Seq:F4}Rep-Calc_.VALC MS NPP")
    field(INPG, "$(INJ){Seq:F6}Rep-Calc_.VALB MS NPP")
    field(INPH, "$(INJ){Seq:F6}Rep-Calc_.VALC MS NPP")
    field(INPI, "")
    field(INPJ, "")
    field(INPK, "")
    field(INPL, "")

    field(FTVA, "DOUBLE")
    field(FTVB, "UCHAR")

    field(NOVA, "1")
    field(NOVB, "1")

    field(OUTA, "")
    field(OUTB, "")

    field( EFLG, "ALWAYS")
}

# Soft sequence merger
#
# Macros
#  P - PV prefix
#  NELM
#  TIMEA
#  CODEA
#  TIMEB
#  CODEB
#  ...
#  OUTTIME
#  OUTCODE
#

record(aSub, "$(INJ){Seq:NOut}Rep-Calc_") {
    field(SNAM, "Seq Merge")

    field(FTA, "DOUBLE")
    field(FTB, "UCHAR")
    field(FTC, "DOUBLE")
    field(FTD, "UCHAR")
    field(FTE, "DOUBLE")
    field(FTF, "UCHAR")
    field(FTG, "DOUBLE")
    field(FTH, "UCHAR")
    field(FTI, "DOUBLE")
    field(FTJ, "UCHAR")
    field(FTK, "DOUBLE")
    field(FTL, "UCHAR")

    field(NOA, "2048")
    field(NOB, "2048")
    field(NOC, "2048")
    field(NOD, "2048")
    field(NOE, "2048")
    field(NOF, "2048")
    field(NOG, "2048")
    field(NOH, "2048")
    field(NOI, "2048")
    field(NOJ, "2048")
    field(NOK, "2048")
    field(NOL, "2048")

    field(INPA, "$(LN){Seq:N}Rep-Calc_.VALB MS NPP")
    field(INPB, "$(LN){Seq:N}Rep-Calc_.VALC MS NPP")
    field(INPC, "$(BR){Seq:N1Hz}Rep-Calc_.VALB MS NPP")
    field(INPD, "$(BR){Seq:N1Hz}Rep-Calc_.VALC MS NPP")
    field(INPE, "$(BR){Seq:NStk}Rep-Calc_.VALB MS NPP")
    field(INPF, "$(BR){Seq:NStk}Rep-Calc_.VALC MS NPP")
    field(INPG, "$(BR){Seq:N2Hz}Rep-Calc_.VALB MS NPP")
    field(INPH, "$(BR){Seq:N2Hz}Rep-Calc_.VALC MS NPP")
    field(INPI, "$(INJ){Seq:F}Rep-Calc_.VALA MS NPP")
    field(INPJ, "$(INJ){Seq:F}Rep-Calc_.VALB MS NPP")
    field(INPK, "$(LN){Seq:ACMI}Timestamp-SP PP MS")
    field(INPL, "$(LN){Seq:ACMI}EvtCode-Calc_.VALA MS PP")

    field(FTVA, "DOUBLE")
    field(FTVB, "UCHAR")

    field(NOVA, "2048")
    field(NOVB, "2048")

    field(OUTA, "$(INJ){Seq:NOut}Shift-Calc_.B PP")
    field(OUTB, "$(INJ){$(EVG)-$(SEQN)}EvtCode-SP PP")

    field( EFLG, "ALWAYS")
}

# Soft sequence merger
#
# Macros
#  P - PV prefix
#  NELM
#  TIMEA
#  CODEA
#  TIMEB
#  CODEB
#  ...
#  OUTTIME
#  OUTCODE
#

record(aSub, "$(INJ){Seq:BOut}Rep-Calc_") {
    field(SNAM, "Seq Merge")

    field(FTA, "DOUBLE")
    field(FTB, "UCHAR")
    field(FTC, "DOUBLE")
    field(FTD, "UCHAR")
    field(FTE, "DOUBLE")
    field(FTF, "UCHAR")
    field(FTG, "DOUBLE")
    field(FTH, "UCHAR")
    field(FTI, "DOUBLE")
    field(FTJ, "UCHAR")
    field(FTK, "DOUBLE")
    field(FTL, "UCHAR")

    field(NOA, "2048")
    field(NOB, "2048")
    field(NOC, "2048")
    field(NOD, "2048")
    field(NOE, "2048")
    field(NOF, "2048")
    field(NOG, "2048")
    field(NOH, "2048")
    field(NOI, "2048")
    field(NOJ, "2048")
    field(NOK, "2048")
    field(NOL, "2048")

    field(INPA, "$(LN){Seq:B}Rep-Calc_.VALB MS NPP")
    field(INPB, "$(LN){Seq:B}Rep-Calc_.VALC MS NPP")
    field(INPC, "$(BR){Seq:B1Hz}Rep-Calc_.VALB MS NPP")
    field(INPD, "$(BR){Seq:B1Hz}Rep-Calc_.VALC MS NPP")
    field(INPE, "$(BR){Seq:BStk}Rep-Calc_.VALB MS NPP")
    field(INPF, "$(BR){Seq:BStk}Rep-Calc_.VALC MS NPP")
    field(INPG, "$(BR){Seq:B2Hz}Rep-Calc_.VALB MS NPP")
    field(INPH, "$(BR){Seq:B2Hz}Rep-Calc_.VALC MS NPP")
    field(INPI, "")
    field(INPJ, "")
    field(INPK, "")
    field(INPL, "")

    field(FTVA, "DOUBLE")
    field(FTVB, "UCHAR")

    field(NOVA, "2048")
    field(NOVB, "2048")

    field(OUTA, "")
    field(OUTB, "")

    field( EFLG, "ALWAYS")
}

# Soft sequence merger
#
# Macros
#  P - PV prefix
#  NELM
#  TIMEA
#  CODEA
#  TIMEB
#  CODEB
#  ...
#  OUTTIME
#  OUTCODE
#

record(aSub, "$(INJ){Seq:InjOut}Rep-Calc_") {
    field(SNAM, "Seq Merge")

    field(FTA, "DOUBLE")
    field(FTB, "UCHAR")
    field(FTC, "DOUBLE")
    field(FTD, "UCHAR")
    field(FTE, "DOUBLE")
    field(FTF, "UCHAR")
    field(FTG, "DOUBLE")
    field(FTH, "UCHAR")
    field(FTI, "DOUBLE")
    field(FTJ, "UCHAR")
    field(FTK, "DOUBLE")
    field(FTL, "UCHAR")

    field(NOA, "2048")
    field(NOB, "2048")
    field(NOC, "2048")
    field(NOD, "2048")
    field(NOE, "2048")
    field(NOF, "2048")
    field(NOG, "2048")
    field(NOH, "2048")
    field(NOI, "2048")
    field(NOJ, "2048")
    field(NOK, "2048")
    field(NOL, "2048")

    field(INPA, "$(INJ){Seq:NOut}Rep-Calc_.VALA MS NPP")
    field(INPB, "$(INJ){Seq:NOut}Rep-Calc_.VALB MS NPP")
    field(INPC, "$(INJ){Seq:BOut}Rep-Calc_.VALA MS NPP")
    field(INPD, "$(INJ){Seq:BOut}Rep-Calc_.VALB MS NPP")
    field(INPE, "")
    field(INPF, "")
    field(INPG, "")
    field(INPH, "")
    field(INPI, "")
    field(INPJ, "")
    field(INPK, "")
    field(INPL, "")

    field(FTVA, "DOUBLE")
    field(FTVB, "UCHAR")

    field(NOVA, "2048")
    field(NOVB, "2048")

    field(OUTA, "$(INJ){Seq:Out}Shift-Calc_.B PP")
    field(OUTB, "$(INJ){Seq:Out}Rep-Calc_.B PP")

    field( EFLG, "ALWAYS")
}

# Soft sequence merger
#
# Macros
#  P - PV prefix
#  NELM
#  TIMEA
#  CODEA
#  TIMEB
#  CODEB
#  ...
#  OUTTIME
#  OUTCODE
#

record(aSub, "$(INJ){Seq:Out}Rep-Calc_") {
    field(SNAM, "Seq Merge")

    field(FTA, "DOUBLE")
    field(FTB, "UCHAR")
    field(FTC, "DOUBLE")
    field(FTD, "UCHAR")
    field(FTE, "DOUBLE")
    field(FTF, "UCHAR")
    field(FTG, "DOUBLE")
    field(FTH, "UCHAR")
    field(FTI, "DOUBLE")
    field(FTJ, "UCHAR")
    field(FTK, "DOUBLE")
    field(FTL, "UCHAR")

    field(NOA, "2048")
    field(NOB, "2048")
    field(NOC, "2048")
    field(NOD, "2048")
    field(NOE, "2048")
    field(NOF, "2048")
    field(NOG, "2048")
    field(NOH, "2048")
    field(NOI, "2048")
    field(NOJ, "2048")
    field(NOK, "2048")
    field(NOL, "2048")

    field(INPA, "")
    field(INPB, "")
    field(INPC, "$(INJ){Seq:FT}Timestamp-SP MS PP")
    field(INPD, "$(INJ){Seq:FT}EvtCode-SP MS PP")
    field(INPE, "")
    field(INPF, "")
    field(INPG, "")
    field(INPH, "")
    field(INPI, "")
    field(INPJ, "")
    field(INPK, "")
    field(INPL, "")

    field(FTVA, "DOUBLE")
    field(FTVB, "UCHAR")

    field(NOVA, "2048")
    field(NOVB, "2048")

    field(OUTA, "$(INJ){$(EVG)-$(SEQB)}Timestamp-SP PP")
    field(OUTB, "$(INJ){$(EVG)-$(SEQB)}EvtCode-SP PP")

    field( EFLG, "ALWAYS")
}

# Time sequence shifter
#
# Add a constant delay to a waveform of times
#
# Macros
#  P - PV prefix
#  NELM
#  DELAY - Scalar delay
#  INTIME - Input time array
#  OUTTIME - Output time array
#


record(aSub, "$(INJ){Seq:Out}Shift-Calc_") {
    field(SNAM, "Seq Shift")

    field(FTA, "DOUBLE")
    field(FTB, "DOUBLE")

    field(NOB, "2048")

    field(INPA, "")
    field(INPB, "")

    field(FTVA, "DOUBLE")

    field(NOVA, "2048")

    field(OUTA, "$(INJ){Seq:Out}Rep-Calc_.A NPP MS")

    field( EFLG, "ALWAYS")
}
# Time sequence shifter
#
# Add a constant delay to a waveform of times
#
# Macros
#  P - PV prefix
#  NELM
#  DELAY - Scalar delay
#  INTIME - Input time array
#  OUTTIME - Output time array
#


record(aSub, "$(INJ){Seq:NOut}Shift-Calc_") {
    field(SNAM, "Seq Shift")

    field(FTA, "DOUBLE")
    field(FTB, "DOUBLE")

    field(NOB, "2048")

    field(INPA, "")
    field(INPB, "")

    field(FTVA, "DOUBLE")

    field(NOVA, "2048")

    field(OUTA, "$(INJ){$(EVG)-$(SEQN)}Timestamp-SP PP")

    field( EFLG, "ALWAYS")
}
